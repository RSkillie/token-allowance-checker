{"version":3,"sources":["components/OnboardContext.js","components/AddressDisplay.js","components/erc20-decimals-conversion.js","components/EditAllowanceForm.js","components/EditAllowanceFormContainer.js","components/TransactionModal.js","components/TokenAllowanceItem.js","components/wellKnownContracts.js","components/TokenAllowanceListContainer.js","components/AllowanceLister.js","components/OnboardGate.js","components/AddressInput.js","components/AddressInputContainer.js","App.js","index.js","../node_modules/web3-eth-accounts/src sync"],"names":["Web3Context","createContext","onboard","web3","address","networkId","loggedIn","loginFunction","OnboardContext","props","useState","setWeb3","setAddress","setNetworkId","setOnboard","setLoggedIn","useEffect","console","log","Onboard","dappId","subscriptions","wallet","name","Web3","provider","network","login","a","walletSelect","selected","walletCheck","contextValue","Provider","value","children","Fragment","Segment","basic","padded","textAlign","Message","info","icon","size","Icon","loading","Content","Header","AddressDisplay","ensName","useClippy","setClipboard","Popup","mouseEnterDelay","content","trigger","circular","onClick","window","open","toBaseUnit","decimals","BN","s","String","Error","base","pow","negative","substring","comps","split","length","whole","fraction","wei","mul","add","neg","toString","EditAllowanceForm","showModal","tokenName","tokenAddress","spenderAddress","currentAllowance","newAllowance","handleClose","handleSubmit","handleChange","headline","Modal","onClose","List","Item","Form","onSubmit","Field","required","Input","label","tag","labelPosition","placeholder","type","onChange","Grid","columns","Row","Column","Button","fluid","positive","EditAllowanceFormContainer","tokenDecimals","tokenSupply","allowance","spender","tokenSymbol","web3Context","useContext","setNewAllowance","convertAllowanceToDisplaystring","useCallback","gte","bnToDisplayString","roundToDecimals","utils","toBN","rounded","e","parseFloat","amount","TransactionModal","message","isConfirming","transactionHash","error","success","Actions","unlimitedAllowance","subn","TokenAllowanceItem","tokenContractInstance","ownerBalance","owner","spenders","spenderENSNames","allowances","editSpender","setEditSpender","showEditModal","setShowEditModal","showTransactionModal","setShowTransactionModal","transactionError","setTransactionError","setTransactionHash","confirming","setConfirming","handleSubmitEditAllowance","approve","from","result","tx","rows","allowanceElement","criticalAllowance","editEnabled","isBN","toLowerCase","eq","bn2DisplayString","Loader","active","inline","push","Table","key","Cell","compact","primary","disabled","openEditModal","tokenDisplayString","raised","as","celled","selectable","HeaderCell","Body","wellKnownContracts","1","symbol","contract","require","namehash","TokenAllowanceListContainer","contractAddress","contractInstance","setContractInstance","setTokenDecimals","setTokenSupply","setTokenName","setTokenSymbol","addressAllowances","setAddressAllowances","setLoading","reverseNames","setReverseNames","setOwnerBalance","cancelled","erc20Contract","ERC20Data","setProvider","currentProvider","at","Object","keys","includes","warn","totalSupply","balanceOf","balance","getAllowances","getReverseNames","foundNames","lookup","substr","eth","ens","resolver","ResolverContract","nh","hash","methods","call","reverseName","topicHashApprove","eventABI","client","createDfuseClient","apiKey","AllowanceLister","addressFromParams","useParams","tokenSpenders","setTokenSpenders","setError","document","title","collectAllowances","graphql","variables","limit","query","response","errors","edges","data","searchTransactions","forEach","node","matchingLogs","logEntry","topics","decoded","abi","decodeLog","slice","tokenContract","JSON","stringify","warning","tokens","entries","OnboardGate","history","useHistory","isOnboarding","setIsOnboarding","walletSelected","setWalletSelected","doLogin","AddressInput","handleInput","input","target","width","action","addressInputStates","AddressInputContainer","addressInputState","setAddressInputState","setInput","prevWalletAddress","setPrevWalletAddress","validAddress","test","getAddress","resolvedAddress","newWalletAddress","centered","widths","Group","App","HomepageHeading","inverted","vertical","Menu","fixed","Container","header","Link","to","position","href","rel","text","style","marginTop","marginBottom","fontSize","Subheader","path","paddingTop","container","stackable","verticalAlign","floated","Divider","horizontal","float","ReactDOM","render","getElementById","webpackEmptyContext","req","code","resolve","module","exports","id"],"mappings":"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","file":"static/js/main.43c4fd4f.chunk.js","sourcesContent":["import React, {useEffect, useState, createContext} from 'react'\nimport Onboard from 'bnc-onboard'\nimport Web3 from 'web3'\nimport {Icon, Message, Segment} from 'semantic-ui-react'\n\nconst onboardapikey='f4b71bf0-fe50-4eeb-bc2b-b323527ed9e6'\n\nexport const Web3Context = createContext({\n    onboard: null,\n    web3: null,\n    address: null,\n    networkId: null,\n    loggedIn: false,\n    loginFunction: null,\n})\n\nconst OnboardContext = (props) => {\n    const [web3, setWeb3] = useState()\n    const [address, setAddress] = useState()\n    const [networkId, setNetworkId] = useState()\n    const [onboard, setOnboard] = useState()\n    const [loggedIn, setLoggedIn] = useState(false)\n\n    useEffect(() => {\n        console.log(`Initializing OnBoard.js...`)\n        const onboard = (Onboard({\n            dappId: onboardapikey,\n            networkId: 1,\n            subscriptions: {\n                wallet: wallet => {\n                    console.log(`${wallet.name} is now connected!`)\n                    setWeb3(new Web3(wallet.provider))\n                },\n                address: address => {\n                    setAddress(address)\n                    console.log(`Address changed to ${address}!`)\n                },\n                network: networkId => {\n                    setNetworkId(networkId)\n                    console.log(`NetworkId change to ${networkId}`)\n                }\n            }\n        }))\n        setOnboard(onboard)\n    }, [])\n\n    const login = async () => {\n        if (onboard) {\n            if (!loggedIn) {\n                console.log(`logging in`)\n                const selected = await onboard.walletSelect()\n                if (selected) {\n                    await onboard.walletCheck()\n                    setLoggedIn(true)\n                }\n                return selected\n            } else {\n                console.log(`already logged in`)\n                return true\n            }\n        } else {\n            console.log(`Trying login without onboard`)\n            return false\n        }\n    }\n\n\n    const contextValue = {\n        onboard,\n        web3,\n        address,\n        networkId,\n        loginFunction: login\n    }\n\n    if (onboard) {\n        console.log('Onboard initialized!')\n        return <Web3Context.Provider value={contextValue}>\n            {props.children}\n        </Web3Context.Provider>\n    } else {\n        console.log('Onboard not yet initialized!')\n        return (\n            <React.Fragment>\n                <Segment basic padded='very' textAlign={'center'}>\n                    <Message info icon size={'huge'}>\n                        <Icon name='spinner' loading />\n                        <Message.Content>\n                            <Message.Header>Initializing web3</Message.Header>\n                            Please wait while initializing web3 connection.\n                        </Message.Content>\n                    </Message>\n                </Segment>\n            </React.Fragment>\n        )\n\n    }\n}\n\nexport default OnboardContext","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {Icon, Popup} from 'semantic-ui-react'\nimport useClippy from 'use-clippy'\n\nconst AddressDisplay = (props) => {\n    const {address, ensName} = props\n    const [, setClipboard ] = useClippy()\n\n    if (ensName) {\n        return <>\n            <div>{ensName}</div>\n            <div><small>{address}&nbsp;\n                <Popup mouseEnterDelay={500} content={'Copy to clipboard'} trigger={<Icon circular name={'copy outline'} size={'small'} onClick={()=>{setClipboard(address)}}/>}/>\n                <Popup mouseEnterDelay={500} content={'View on Etherscan'} trigger={<Icon circular name={'external square'} size={'small'} onClick={()=>{window.open(`https://etherscan.io/address/${address}`, '_blank')}}/>}/>\n            </small></div>\n        </>\n    } else {\n        return (\n            <div>\n                {address}&nbsp;\n                <Popup mouseEnterDelay={500} content={'Copy to clipboard'} trigger={<Icon circular name={'copy outline'} size={'small'} onClick={()=>{setClipboard(address)}}/>}/>\n                <Popup mouseEnterDelay={500} content={'View on Etherscan'} trigger={<Icon circular name={'external square'} size={'small'} onClick={()=>{window.open(`https://etherscan.io/address/${address}`, '_blank')}}/>}/>\n            </div>\n        )\n    }\n}\n\nAddressDisplay.propTypes = {\n    address: PropTypes.string.isRequired,\n    ensName: PropTypes.string\n}\n\n\nexport default AddressDisplay\n","function isString(s) {\n  return (typeof s === 'string' || s instanceof String)\n}\n\nexport function toBaseUnit(value, decimals, BN) {\n  if (!isString(value)) {\n    throw new Error('Pass strings to prevent floating point precision issues.')\n  }\n  const ten = new BN(10)\n  const base = ten.pow(new BN(decimals))\n\n  // Is it negative?\n  let negative = (value.substring(0, 1) === '-')\n  if (negative) {\n    value = value.substring(1)\n  }\n\n  if (value === '.') { \n    throw new Error(\n    `Invalid value ${value} cannot be converted to`\n    + ` base unit with ${decimals} decimals.`) \n  }\n\n  // Split it into a whole and fractional part\n  let comps = value.split('.')\n  if (comps.length > 2) { throw new Error('Too many decimal points') }\n\n  let whole = comps[0], fraction = comps[1]\n\n  if (!whole) { whole = '0' }\n  if (!fraction) { fraction = '0' }\n  if (fraction.length > decimals) { \n    throw new Error('Too many decimal places') \n  }\n\n  while (fraction.length < decimals) {\n    fraction += '0'\n  }\n\n  whole = new BN(whole)\n  fraction = new BN(fraction)\n  let wei = (whole.mul(base)).add(fraction)\n\n  if (negative) {\n    wei = wei.neg()\n  }\n\n  return new BN(wei.toString(10), 10)\n}","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {Form, Grid, Header, Input, Message, Modal} from 'semantic-ui-react'\n\nconst EditAllowanceForm = ({showModal, tokenName, tokenAddress, spenderAddress, currentAllowance, newAllowance, handleClose, handleSubmit, handleChange}) => {\n    let headline = tokenName\n    if (headline === '') {\n        headline = `Unknown ERC20 at ${tokenAddress}`\n    }\n    return (\n        <Modal\n            open={showModal}\n            size={'small'}\n            onClose={handleClose}\n        >\n            <Header>Edit Allowance</Header>\n            <Modal.Content>\n                <Message size={'huge'}>\n                    <Message.List>\n                        <Message.Item>Token: {headline}</Message.Item>\n                        <Message.Item>Spender: {spenderAddress}</Message.Item>\n                        <Message.Item>Current allowance: {currentAllowance}</Message.Item>\n                    </Message.List>\n                </Message>\n                <Form size={'huge'} onSubmit={handleSubmit}>\n                    <Form.Field required>\n                        <Input\n                            label={{ tag: true, content: 'Set new allowance' }}\n                            labelPosition='right'\n                            placeholder='Enter amount'\n                            type={'number'}\n                            name={'newAllowance'}\n                            onChange={handleChange}\n                            value={newAllowance}\n                        />\n                    </Form.Field>\n                    <Grid columns={2}>\n                        <Grid.Row>\n                            <Grid.Column>\n                                <Form.Button type={'button'} fluid size={'huge'} negative onClick={handleClose}>Cancel</Form.Button>\n                            </Grid.Column>\n                            <Grid.Column>\n                                <Form.Button type={'submit'} fluid size={'huge'} positive>Okay</Form.Button>\n                            </Grid.Column>\n                        </Grid.Row>\n                    </Grid>\n                </Form>\n            </Modal.Content>\n        </Modal>\n    )\n}\n\nEditAllowanceForm.propTypes = {\n    tokenName: PropTypes.string.isRequired,\n    tokenSymbol: PropTypes.string.isRequired,\n    tokenAddress: PropTypes.string.isRequired,\n    spenderAddress: PropTypes.string.isRequired,\n    spenderENSName: PropTypes.string,\n    currentAllowance: PropTypes.string.isRequired,\n    newAllowance: PropTypes.string,\n    showModal: PropTypes.bool.isRequired,\n    handleClose: PropTypes.func.isRequired,\n    handleChange: PropTypes.func.isRequired,\n    handleSubmit: PropTypes.func.isRequired,\n}\n\nexport default EditAllowanceForm","import React, {useCallback, useContext, useState} from 'react'\nimport PropTypes from 'prop-types'\nimport bnToDisplayString from '@triplespeeder/bn2string'\nimport {toBaseUnit} from './erc20-decimals-conversion'\nimport EditAllowanceForm from './EditAllowanceForm'\nimport {Web3Context} from './OnboardContext'\n\n\nconst EditAllowanceFormContainer = ({handleSubmit, handleClose, tokenDecimals, tokenSupply, tokenName, allowance, spender, tokenSymbol, tokenAddress}) => {\n    const web3Context = useContext(Web3Context)\n    const [newAllowance, setNewAllowance] = useState('')\n\n    const convertAllowanceToDisplaystring = useCallback(() => {\n        if (allowance.gte(tokenSupply)) {\n            return 'unlimited'\n        } else {\n            const allowanceDisplay = bnToDisplayString({\n                value: allowance,\n                decimals: tokenDecimals,\n                roundToDecimals: web3Context.web3.utils.toBN(2)\n            })\n            return allowanceDisplay.rounded\n        }\n    }, [allowance, tokenDecimals, tokenSupply, web3Context])\n\n    const handleChange = (e, { name, value }) => {\n        console.log(`handleChange: ${name} - ${value}`)\n        if (parseFloat(value) < 0) {\n            value = '0'\n        }\n        setNewAllowance(value)\n    }\n    const localHandleSubmit = () => {\n        // convert 'newAllowance' number to token baseunit\n        let amount = toBaseUnit(newAllowance, tokenDecimals, web3Context.web3.utils.BN)\n        handleSubmit(amount)\n    }\n\n    return (\n        <EditAllowanceForm\n            currentAllowance={convertAllowanceToDisplaystring()}\n            handleClose={handleClose}\n            spenderAddress={spender}\n            showModal={true}\n            tokenName={tokenName}\n            handleChange={handleChange}\n            handleSubmit={localHandleSubmit}\n            tokenSymbol={tokenSymbol}\n            tokenAddress={tokenAddress}\n            newAllowance={newAllowance}\n            />\n    )\n}\n\nEditAllowanceFormContainer.propTypes = {\n    tokenDecimals: PropTypes.object.isRequired, // bignumber\n    tokenName: PropTypes.string.isRequired,\n    tokenSymbol: PropTypes.string.isRequired,\n    tokenSupply: PropTypes.object.isRequired,\n    tokenAddress: PropTypes.string.isRequired,\n    allowance: PropTypes.object.isRequired, // bignumber\n    spender: PropTypes.string.isRequired,\n    handleSubmit: PropTypes.func.isRequired,\n    handleClose: PropTypes.func.isRequired,\n}\n\nexport default EditAllowanceFormContainer","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {Button, Icon, Message, Modal} from 'semantic-ui-react'\n\nconst TransactionModal = ({showModal, isConfirming, transactionHash, error, handleClose}) => {\n\n    let message\n    if (error) {\n        message = <Message error icon>\n            <Icon name='exclamation triangle' />\n            <Message.Content>\n                <Message.Header>Error</Message.Header>\n                {error}\n            </Message.Content>\n        </Message>\n    } else if (transactionHash) {\n        message = <Message success icon>\n            <Icon name='checkmark' />\n            <Message.Content>\n                <Message.Header>Allowance changed</Message.Header>\n                <p>The new allowance is now set.</p>\n                <p>Transaction Hash: {transactionHash}</p>\n            </Message.Content>\n        </Message>\n    } else if (isConfirming) {\n        message = <Message icon info>\n            <Icon name='spinner' loading/>\n            <Message.Content>\n                <Message.Header>Waiting for confirmation</Message.Header>\n                Transaction is being processed...\n            </Message.Content>\n        </Message>\n    }\n\n    return (\n        <Modal\n            open={showModal}\n            size={'small'}\n            onClose={handleClose}\n        >\n            <Modal.Content>\n                {message}\n            </Modal.Content>\n            {!isConfirming && <Modal.Actions>\n                <Button onClick={handleClose}>Dismiss</Button>\n            </Modal.Actions>}\n        </Modal>\n    )\n}\n\nTransactionModal.propTypes = {\n    showModal: PropTypes.bool.isRequired,\n    isConfirming: PropTypes.bool.isRequired,\n    transactionHash: PropTypes.string,\n    error: PropTypes.string,\n    handleClose: PropTypes.func.isRequired,\n}\n\nexport default TransactionModal","import React, {useContext, useState} from 'react'\nimport PropTypes from 'prop-types'\nimport {Button, Header, Loader, Popup, Segment, Table} from 'semantic-ui-react'\nimport AddressDisplay from './AddressDisplay'\nimport BN from 'bn.js'\nimport bn2DisplayString from '@triplespeeder/bn2string'\nimport EditAllowanceFormContainer from './EditAllowanceFormContainer'\nimport {Web3Context} from './OnboardContext'\nimport TransactionModal from './TransactionModal'\n\n\nconst unlimitedAllowance = new BN(2).pow(new BN(256)).subn(1)\n\nconst TokenAllowanceItem = ({tokenName, tokenAddress, tokenDecimals, tokenSupply, tokenSymbol, tokenContractInstance, ownerBalance, owner, spenders, spenderENSNames, allowances}) => {\n    const web3Context = useContext(Web3Context)\n    const [editSpender, setEditSpender] = useState('')\n    const [showEditModal, setShowEditModal] = useState(false)\n    const [showTransactionModal, setShowTransactionModal] = useState(false)\n    const [transactionError, setTransactionError] = useState('')\n    const [transactionHash, setTransactionHash] = useState('')\n    const [confirming, setConfirming] = useState(false)\n\n\n    const openEditModal = (spender) => {\n        setEditSpender(spender)\n        setShowEditModal(true)\n    }\n\n    const handleSubmitEditAllowance = async (newAllowance) => {\n        console.log(`Setting new allowance ${newAllowance} for ${editSpender}`)\n        setTransactionError('')\n        setTransactionHash('')\n        setShowEditModal(false)\n        setShowTransactionModal(true)\n        setConfirming(true)\n        let result\n        try {\n            result = await tokenContractInstance.approve(editSpender, newAllowance.toString(), {\n                    from: web3Context.address\n                })\n            setTransactionHash(result.tx)\n        } catch (e) {\n            console.log(`Error while approving: ${e.message}`)\n            setTransactionError(e.message)\n        }\n        setConfirming(false)\n    }\n\n    const handleCloseEditAllowance = () => {\n        setShowEditModal(false)\n    }\n\n    const handleCloseTransactionModal = () => {\n        setShowTransactionModal(false)\n    }\n\n    const rows = []\n    for (const spender of spenders) {\n        let allowanceElement\n        let criticalAllowance = false\n        let editEnabled = false\n        let loaded = BN.isBN(allowances[spender]) && BN.isBN(tokenDecimals) && BN.isBN(tokenSupply)\n        if (loaded) {\n            const value = allowances[spender]\n            // wallet account has to be owner in order to edit allowance\n            editEnabled = (owner.toLowerCase() === web3Context.address.toLowerCase())\n            criticalAllowance = (value.eq(unlimitedAllowance)) || (value.gte(tokenSupply))\n            if (criticalAllowance) {\n                // \\u221E is 'infinity'\n                // allowanceElement = <span>{'\\u221E'}</span>\n                allowanceElement = <em>unlimited</em>\n            } else {\n                const decimals = tokenDecimals\n                const roundToDecimals = new BN(2)\n                const {rounded} = bn2DisplayString({value, decimals, roundToDecimals})\n                allowanceElement = `${rounded}`\n            }\n        } else {\n            allowanceElement = <Loader active inline size={'mini'}/>\n        }\n        rows.push(\n            <Table.Row key={spender}>\n                <Table.Cell>\n                    <AddressDisplay address={spender} ensName={spenderENSNames[spender]}/>\n                </Table.Cell>\n                <Table.Cell negative={criticalAllowance}>\n                    {allowanceElement}\n                </Table.Cell>\n                <Table.Cell>\n                    <Popup\n                        content={editEnabled ? 'edit allowance' : 'Only address owner can edit allowance'}\n                        trigger={<span><Button\n                            icon={'edit'}\n                            size={'small'}\n                            compact\n                            primary\n                            disabled={!editEnabled}\n                            onClick={()=>{openEditModal(spender)}}\n                        /></span>}\n                    />\n                </Table.Cell>\n            </Table.Row>\n        )\n    }\n\n    let tokenDisplayString = tokenName\n    if (tokenDisplayString === '') {\n        tokenDisplayString = `Unknown ERC20`\n    }\n    const roundToDecimals = new BN(2)\n    if (BN.isBN(ownerBalance) && BN.isBN(tokenDecimals)) {\n        const {rounded} = bn2DisplayString({value: ownerBalance, decimals: tokenDecimals, roundToDecimals})\n        tokenDisplayString += ` (current balance: ${rounded})`\n    }\n\n    let headline = <AddressDisplay address={tokenAddress} ensName={tokenDisplayString}/>\n\n    return (\n        <React.Fragment>\n            <Segment raised>\n                <Header as={'h3'}>\n                    {headline}\n                </Header>\n                <Table basic={'very'} celled selectable>\n                    <Table.Header>\n                        <Table.Row>\n                            <Table.HeaderCell>Spender</Table.HeaderCell>\n                            <Table.HeaderCell>Allowance</Table.HeaderCell>\n                            <Table.HeaderCell>Action</Table.HeaderCell>\n                        </Table.Row>\n                    </Table.Header>\n                    <Table.Body>\n                        {rows}\n                    </Table.Body>\n                </Table>\n            </Segment>\n\n            {showEditModal && <EditAllowanceFormContainer\n                spender={editSpender}\n                tokenDecimals={tokenDecimals}\n                allowance={allowances[editSpender]}\n                tokenSymbol={tokenSymbol}\n                tokenName={tokenName}\n                tokenSupply={tokenSupply}\n                tokenAddress={tokenAddress}\n                handleSubmit={handleSubmitEditAllowance}\n                handleClose={handleCloseEditAllowance}\n            />}\n            {showTransactionModal && <TransactionModal\n                showModal={showTransactionModal}\n                isConfirming={confirming}\n                handleClose={handleCloseTransactionModal}\n                error={transactionError}\n                transactionHash={transactionHash}\n            />}\n        </React.Fragment>\n    )\n}\n\nTokenAllowanceItem.propTypes = {\n    tokenName: PropTypes.string,\n    tokenAddress: PropTypes.string,\n    tokenDecimals: PropTypes.object, // bignumber\n    tokenSupply: PropTypes.object, // bignumber\n    tokenSymbol: PropTypes.string,\n    tokenContractInstance: PropTypes.object,\n    owner: PropTypes.string.isRequired,\n    ownerBalance: PropTypes.object, // bignumber\n    spenders: PropTypes.array.isRequired,\n    spenderENSNames: PropTypes.object.isRequired,\n    allowances: PropTypes.object.isRequired,\n}\n\n\nexport default TokenAllowanceItem","const wellKnownContracts = {\n    // main network\n    1: {\n        '0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359': {\n            name: 'Sai Stablecoin',\n            symbol: 'SAI',\n        },\n        '0x9f8F72aA9304c8B593d555F12eF6589cC3A579A2': {\n            name: 'Maker Token',\n            symbol: 'MKR',\n        },\n        '0xECF8F87f810EcF450940c9f60066b4a7a501d6A7': {\n            name: 'Old Wrapped Ether',\n            symbol: 'WETH'\n        }\n    }\n}\n\nexport default wellKnownContracts\n","import React, {useContext, useEffect, useState} from 'react'\nimport ERC20Data from '@openzeppelin/contracts/build/contracts/ERC20Detailed.json'\nimport {Web3Context} from './OnboardContext'\nimport PropTypes from 'prop-types'\nimport TokenAllowanceItem from './TokenAllowanceItem'\nimport wellKnownContracts from './wellKnownContracts'\nconst contract = require('@truffle/contract')\nconst namehash = require('eth-ens-namehash')\n\n\n/*\n    TokenAllowanceListContainer:\n    - stores token contract address and instance\n    - list of addresses that have an allowance\n    - Renders TokenAllowanceListItem for each address having an allowance\n */\nconst TokenAllowanceListContainer = ({contractAddress, owner, spenders}) => {\n    const web3Context = useContext(Web3Context)\n    const [contractInstance, setContractInstance] = useState(null)\n    const [tokenDecimals, setTokenDecimals] = useState()\n    const [tokenSupply, setTokenSupply] = useState()\n    const [tokenName, setTokenName] = useState('')\n    const [tokenSymbol, setTokenSymbol] = useState('')\n    const [addressAllowances, setAddressAllowances] = useState({})\n    const [loading, setLoading] = useState(true)\n    const [reverseNames, setReverseNames] = useState({})\n    const [ownerBalance, setOwnerBalance] = useState()\n\n    useEffect(() => {\n        let cancelled = false\n        const getAllowances = async () => {\n            setLoading(true)\n\n            // initialize contract\n            const erc20Contract = contract(ERC20Data)\n            erc20Contract.setProvider(web3Context.web3.currentProvider)\n            const contractInstance = await erc20Contract.at(contractAddress)\n            let tokenName = ''\n            let tokenSymbol = ''\n            // Some contracts like MKR and SAI do not implement the correct ERC20 name and symbol.\n            // Get their data from hardocded fallback\n            if (Object.keys(wellKnownContracts[web3Context.networkId]).includes(contractAddress)) {\n                tokenName = wellKnownContracts[web3Context.networkId][contractAddress].name\n                tokenSymbol = wellKnownContracts[web3Context.networkId][contractAddress].symbol\n            } else {\n                try {\n                    tokenName = await contractInstance.name()\n                    tokenSymbol = await contractInstance.symbol()\n                } catch(error) {\n                    // Most likely token contract does not implement the name() method. Ignore error.\n                    console.warn(`Failed to get name/symbol of contract at ${contractAddress}. Please raise\n                    an issue to add this token at https://github.com/TripleSpeeder/token-allowance-checker/issues!`)\n                }\n            }\n            const decimals = await contractInstance.decimals()\n            const totalSupply = await contractInstance.totalSupply()\n            const balance = await contractInstance.balanceOf(owner)\n            if (cancelled)\n                return\n            setContractInstance(contractInstance)\n            setTokenDecimals(decimals)\n            setTokenSupply(totalSupply)\n            setOwnerBalance(balance)\n            setTokenName(tokenName)\n            setTokenSymbol(tokenSymbol)\n\n            // for each allowedAddress, get current allowance of spender\n            const allowances = {}\n            for (const spender of spenders) {\n                const allowance = await contractInstance.allowance(owner, spender)\n                if (cancelled)\n                    return\n                allowances[spender] = allowance\n            }\n            setAddressAllowances(allowances)\n\n            setLoading(false)\n        }\n        getAllowances()\n        return () => {\n            cancelled = true\n        }\n    }, [web3Context.web3, web3Context.networkId, contractAddress, owner, spenders])\n\n    useEffect(() => {\n        let cancelled = false\n        const getReverseNames = async(web3) => {\n            const foundNames = {}\n            for (const spender of spenders) {\n                try {\n                    const lookup = spender.toLowerCase().substr(2) + '.addr.reverse'\n                    const ResolverContract = await web3.eth.ens.resolver(lookup)\n                    const nh = namehash.hash(lookup)\n                    const reverseName = await ResolverContract.methods.name(nh).call()\n                    foundNames[spender] = reverseName\n                } catch(error) {\n                    console.log(`No reverse name found for ${spender}`)\n                }\n            }\n            if (cancelled) {\n                return\n            }\n            setReverseNames(foundNames)\n        }\n        if (web3Context.web3) {\n            getReverseNames(web3Context.web3)\n        }\n        return () => {\n            cancelled = true\n        }\n    }, [web3Context.web3, spenders])\n\n    return (\n        <React.Fragment>\n            <TokenAllowanceItem\n                tokenName={tokenName}\n                tokenAddress={contractAddress}\n                tokenDecimals={tokenDecimals}\n                tokenSupply={tokenSupply}\n                tokenSymbol={tokenSymbol}\n                owner={owner}\n                ownerBalance={ownerBalance}\n                spenders={spenders}\n                spenderENSNames={reverseNames}\n                allowances={addressAllowances}\n                tokenContractInstance={contractInstance}\n            />\n        </React.Fragment>\n    )\n}\n\nTokenAllowanceListContainer.propTypes = {\n    contractAddress: PropTypes.string.isRequired,\n    owner: PropTypes.string.isRequired,\n    spenders: PropTypes.array.isRequired,\n}\n\nexport default TokenAllowanceListContainer","import React, {useContext, useEffect, useState} from 'react'\nimport {useParams} from 'react-router-dom'\nimport {createDfuseClient} from '@dfuse/client'\nimport {Web3Context} from './OnboardContext'\nimport TokenAllowanceListContainer from './TokenAllowanceListContainer'\nimport 'semantic-ui-css/semantic.min.css'\nimport {Icon, Message, Segment} from 'semantic-ui-react'\n\nconst topicHashApprove = '0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925'\nconst eventABI = [\n    {\n        'indexed': true,\n        'internalType': 'address',\n        'name': 'owner',\n        'type': 'address'\n    },\n    {\n        'indexed': true,\n        'internalType': 'address',\n        'name': 'spender',\n        'type': 'address'\n    },\n    {\n        'indexed': false,\n        'internalType': 'uint256',\n        'name': 'value',\n        'type': 'uint256'\n    }\n]\n\nconst client = createDfuseClient({\n    apiKey: 'server_217e99c3f906df80430c3c5f4366c8d0',\n    network: 'mainnet.eth.dfuse.io',\n})\nconst searchTransactions = `query ($query: String! $limit: Int64!) {\n      searchTransactions(\n        indexName: LOGS, \n        query: $query, \n        limit: $limit, \n        sort: DESC\n      ) {\n        edges {\n          node {\n            block {\n              number\n            }\n            matchingLogs {\n              data\n              topics\n              address\n            }\n          }\n        }\n      }\n    }`\n\nconst AllowanceLister = () => {\n\n    const web3Context = useContext(Web3Context)\n    const addressFromParams = useParams().address\n\n    const [loading, setLoading] = useState(false)\n    const [tokenSpenders, setTokenSpenders] = useState({})\n    const [error, setError] = useState('')\n    const [address, setAddress] = useState(\n        addressFromParams ? addressFromParams.toLowerCase() : ''\n            /*(web3Context.address? web3Context.address.toLowerCase() : '')*/\n    )\n\n    useEffect(() => {\n        setAddress(addressFromParams ? addressFromParams.toLowerCase() : '')\n    }, [addressFromParams])\n\n    useEffect(() => {\n        document.title = `TAC - ${address}`\n    }, [address])\n\n\n    useEffect(() => {\n        let cancelled = false\n        const collectAllowances = async () => {\n            setLoading(true)\n            setError('')\n\n            const tokenSpenders = {}\n            // Perform query\n            try {\n                const response = await client.graphql(searchTransactions, {\n                    variables: {\n                        limit: '10',\n                        query: `signer:${address} method:'approve(address,uint256)' topic.0:${topicHashApprove}`,\n                    }\n                })\n                if (cancelled) {\n                    console.log(`Received stale response.`)\n                    return\n                }\n                // any errors reported?\n                if (response.errors) {\n                    throw response.errors\n                }\n                // get actual results\n                const edges = response.data.searchTransactions.edges || []\n                if (edges.length <= 0) {\n                    console.log(`No Approve() calls found for ${address}`)\n                }\n                edges.forEach(({node}) => {\n                    node.matchingLogs.forEach((logEntry) => {\n                        // Seems the dfuse query based on topic is not working correctly.\n                        // Double-check that the logEntry actually is of the expected topic.\n                        if (logEntry.topics[0] !== topicHashApprove) {\n                            console.warn(`Skipping wrong topic ${logEntry.topics[0]}`)\n                            return\n                        }\n                        const decoded = web3Context.web3.eth.abi.decodeLog(eventABI, logEntry.data, logEntry.topics.slice(1))\n                        // double-check owner - Is this necessary?\n                        if (decoded.owner.toLowerCase() === address) {\n                            // Add tokenContract if its new\n                            const tokenContract = logEntry.address\n                            if (Object.keys(tokenSpenders).includes(tokenContract)) {\n                                // console.log(`tokenContract ${tokenContract} already known`)\n                            } else {\n                                console.log(`Adding tokenContract ${tokenContract}`)\n                                tokenSpenders[tokenContract] = []\n                            }\n                            // Add spender address if its new\n                            if (tokenSpenders[tokenContract].includes(decoded.spender)) {\n                                // console.log(`Spender ${decoded.spender} for ${tokenContract} already known`)\n                            } else {\n                                console.log(`Adding Spender ${decoded.spender} for ${tokenContract}`)\n                                tokenSpenders[tokenContract].push(decoded.spender)\n                            }\n                        } else {\n                            console.log(`Skipping log event due to owner mismatch. Expected ${address}, got ${decoded.owner}`)\n                        }\n                    })\n                    setTokenSpenders(tokenSpenders)\n                })\n            } catch(errors) {\n                console.log(errors)\n                if (!cancelled) {\n                    setError(JSON.stringify(errors))\n                }\n            }\n            setLoading(false)\n        }\n\n        setTokenSpenders({})\n        if (web3Context.web3 && address) {\n            console.log(`Starting query for \"${address}\"`)\n            collectAllowances(address)\n        }\n\n        return () => {\n            cancelled = true\n        }\n    }, [web3Context.web3, address])\n\n    if (address === '') {\n        return (\n            <Segment basic padded='very' textAlign={'center'}>\n                <Message info icon size={'huge'}>\n                    <Icon name='info' />\n                    <Message.Content>\n                        <Message.Header>Enter an address to start!</Message.Header>\n                    </Message.Content>\n                </Message>\n            </Segment>\n        )\n    }\n\n    if (loading) {\n        return (\n            <Segment basic padded='very' textAlign={'center'}>\n                <Message icon warning size={'huge'}>\n                    <Icon name='circle notched' loading />\n                    <Message.Content>\n                        <Message.Header>Please wait</Message.Header>\n                        <p>Checking address: {address}</p>\n                        {`Querying dfuse API for ERC20 Approvals...`}\n                    </Message.Content>\n                </Message>\n            </Segment>\n        )\n    }\n\n    if (error) {\n        return (\n            <Segment basic padded='very' textAlign={'center'}>\n                <Message error icon size={'huge'}>\n                    <Icon name='exclamation triangle' />\n                    <Message.Content>\n                        <Message.Header>Error</Message.Header>\n                        {error}\n                    </Message.Content>\n                </Message>\n            </Segment>\n        )\n    }\n\n    if (Object.keys(tokenSpenders).length === 0) {\n        return (\n            <Segment basic padded='very' textAlign={'center'}>\n                <Message success icon size={'huge'}>\n                    <Icon name='info' />\n                    <Message.Content>\n                        <Message.Header>No Approvals</Message.Header>\n                        Address {address} has no Approvals.\n                    </Message.Content>\n                </Message>\n            </Segment>\n        )\n    }\n\n    const tokens = []\n    for (const [key, value] of Object.entries(tokenSpenders)) {\n        tokens.push(\n            <TokenAllowanceListContainer\n                key={key}\n                owner={address}\n                spenders={value}\n                contractAddress={key}/>\n        )\n    }\n\n    return (\n        <React.Fragment>\n            <Segment basic>\n                <h2>{address} has these allowances</h2>\n            </Segment>\n            {tokens}\n        </React.Fragment>\n    )\n}\n\nexport default AllowanceLister","import React, {useEffect, useState, useContext} from 'react'\nimport {Web3Context} from './OnboardContext'\nimport {Icon, Message, Segment} from 'semantic-ui-react'\nimport {useHistory} from 'react-router-dom'\n\nconst OnboardGate = (props) => {\n    const history = useHistory()\n    const web3Context = useContext(Web3Context)\n    const [isOnboarding, setIsOnboarding] = useState(true)\n    const [walletSelected, setWalletSelected] = useState(false)\n\n    useEffect(() => {\n\n        const doLogin = async() => {\n            setIsOnboarding(true)\n            const result = await web3Context.loginFunction()\n            if (!result) {\n                // send user back to home page if he rejected wallet selection\n                history.push('/')\n            }\n            setWalletSelected(result)\n            setIsOnboarding(false)\n        }\n\n        if (web3Context.onboard) {\n            doLogin()\n        }\n\n    }, [web3Context.onboard, history])\n\n    if (walletSelected && web3Context.web3) {\n        return <React.Fragment>\n            {props.children}\n        </React.Fragment>\n    }\n\n    if (isOnboarding) {\n        return (\n            <React.Fragment>\n                <Segment basic padded='very' textAlign={'center'}>\n                    <Message info icon size={'huge'}>\n                        <Icon name='spinner' loading />\n                        <Message.Content>\n                            <Message.Header>Waiting for wallet</Message.Header>\n                            Please complete wallet selection.\n                        </Message.Content>\n                    </Message>\n                </Segment>\n            </React.Fragment>\n        )\n    }\n\n    if (!walletSelected) {\n        return (\n            <React.Fragment>\n                <Segment basic padded='very' textAlign={'center'}>\n                    <Message warning icon size={'huge'}>\n                        <Icon name='exclamation triangle' />\n                        <Message.Content>\n                            <Message.Header>No wallet selected</Message.Header>\n                            You need to select a wallet.\n                        </Message.Content>\n                    </Message>\n                </Segment>\n            </React.Fragment>\n        )\n    }\n}\n\nexport default OnboardGate","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {Form, Input} from 'semantic-ui-react'\n\nconst AddressInput = (props) => {\n    const {handleInput, loading, error, value, success} = props\n\n    const handleChange = async (e) => {\n        const input=e.target.value\n        handleInput(input)\n    }\n\n    return (\n            <Form.Field\n                inline\n                width={14}\n            >\n                <Input\n                    placeholder='Address or ENS Name'\n                    error={error}\n                    loading={loading}\n                    onChange={handleChange}\n                    value={value}\n                    type={'text'}\n                    action={{\n                        type:'Submit',\n                        disabled:!success,\n                        content:'Go!',\n                        positive:true,\n                    }}\n                    label={'Enter address/ENS name or select in wallet'}\n                />\n            </Form.Field>\n    )\n}\n\nAddressInput.propTypes = {\n    value: PropTypes.string.isRequired,\n    loading: PropTypes.bool,\n    error: PropTypes.bool,\n    success: PropTypes.bool,\n    handleInput: PropTypes.func.isRequired,\n}\n\nexport default AddressInput\n","import React, {useState, useEffect, useContext} from 'react'\nimport AddressInput from './AddressInput'\nimport {Web3Context} from './OnboardContext'\nimport {useHistory, useParams} from 'react-router-dom'\nimport {Form, Grid} from 'semantic-ui-react'\n\nexport const addressInputStates = {\n    ADDRESS_INITIAL: 'address_initial', // no user interaction\n    ADDRESS_RESOLVING: 'address_resolving', // valid ENS name entered, waiting for resolving\n    ADDRESS_VALID: 'address_valid', // got a valid address\n    ADDRESS_INVALID: 'address_invalid',\n}\n\nconst AddressInputContainer = () => {\n    const web3Context = useContext(Web3Context)\n    const addressFromParams = (useParams().address || '')\n    const history = useHistory()\n    const [addressInputState, setAddressInputState] = useState(addressInputStates.ADDRESS_INITIAL)\n    const [input, setInput] = useState(\n        addressFromParams ? addressFromParams.toLowerCase() : ''\n            /*(web3Context.address? web3Context.address.toLowerCase() : '')*/\n    )\n    const [address, setAddress] = useState('')\n    const [prevWalletAddress, setPrevWalletAddress] = useState(web3Context.address ? web3Context.address.toLowerCase() : '')\n\n    // verify address input\n    useEffect(() => {\n        const handleInput = async() => {\n            if (input.length === 0) {\n                setAddressInputState(addressInputStates.ADDRESS_INITIAL)\n            } else {\n                // check for valid input (raw address and ENS name)\n                const validAddress = (/^(0x)?[0-9a-f]{40}$/i.test(input))\n                const validENSName = (/.*\\.eth$/i.test(input))\n                if (validENSName) {\n                    // resolve entered ENS name\n                    setAddressInputState(addressInputStates.ADDRESS_RESOLVING)\n                    try {\n                        const resolvedAddress = await web3Context.web3.eth.ens.getAddress(input)\n                        console.log(`Resolved ${input} to ${resolvedAddress}`)\n                        setAddressInputState(addressInputStates.ADDRESS_VALID)\n                        setAddress(resolvedAddress)\n                    } catch (e) {\n                        console.log('Could not resolve ' + input)\n                        setAddressInputState(addressInputStates.ADDRESS_INVALID)\n                    }\n                }\n                else if(validAddress) {\n                    setAddress(input)\n                    setAddressInputState(addressInputStates.ADDRESS_VALID)\n                }\n                else {\n                    setAddressInputState(addressInputStates.ADDRESS_INVALID)\n                }\n            }\n        }\n        handleInput()\n    }, [input, setAddress, web3Context.web3])\n\n    // accept address from wallet depending on context\n    useEffect(() => {\n        const newWalletAddress = web3Context.address ? web3Context.address.toLowerCase() : ''\n        // console.log(`fromParams: ${addressFromParams}`)\n        // console.log(`newWallet : ${newWalletAddress}`)\n        // console.log(`prevWallet: ${prevWalletAddress}`)\n        if (newWalletAddress !== '') {\n            if ((addressFromParams === '') || // in this case always take wallet address\n                (newWalletAddress !== prevWalletAddress) // user actively changed wallet address\n            ) {\n                setInput(newWalletAddress)\n                setPrevWalletAddress(newWalletAddress)\n                history.push(`/address/${newWalletAddress}`)\n            }\n        }\n    }, [web3Context.address, prevWalletAddress, addressFromParams, history])\n\n    const error = (addressInputState === addressInputStates.ADDRESS_INVALID)\n    const loading = (addressInputState === addressInputStates.ADDRESS_RESOLVING)\n    const success = (addressInputState === addressInputStates.ADDRESS_VALID)\n\n    const handleSubmit = () => {\n        if (success) {\n            console.log(`Submit! Address: ${address}`)\n            history.push(`/address/${address}`)\n        } else {\n            console.log(`Submit with invalid address`)\n        }\n    }\n\n    return (\n        <Grid textAlign={'center'} centered columns={1}>\n            <Grid.Row>\n                <Grid.Column width={14}>\n                    <Form\n                        size={'huge'}\n                        onSubmit={handleSubmit}\n                        error = {error}\n                        success= {success}\n                        widths={'equal'}\n                    >\n                        <Form.Group>\n                            <AddressInput handleInput={setInput}\n                                          value={input}\n                                          error={error}\n                                          success={success}\n                                          loading={loading}\n                            />\n                        </Form.Group>\n                    </Form>\n                </Grid.Column>\n            </Grid.Row>\n        </Grid>\n    )\n}\n\nAddressInputContainer.propTypes = {\n}\n\nexport default AddressInputContainer\n","import React from 'react'\nimport './App.css'\nimport {HashRouter as Router, Link, Route, Switch} from 'react-router-dom'\nimport AllowanceLister from './components/AllowanceLister'\nimport OnboardGate from './components/OnboardGate'\nimport {Button, Container, Divider, Grid, Header, Icon, List, Menu, Popup, Segment} from 'semantic-ui-react'\nimport AddressInputContainer from './components/AddressInputContainer'\nimport OnboardContext from './components/OnboardContext'\n\n\nconst App = () => {\n\n    const HomepageHeading =\n        <Segment\n            inverted={false}\n            textAlign={'center'}\n            vertical>\n            <Menu fixed='top' inverted size={'huge'}>\n                <Container>\n                    <Menu.Item\n                        header\n                        as={Link}\n                        to={`/`}\n                    >\n                        <Icon name={'home'} size={'big'}/> Home\n                    </Menu.Item>\n                    <Menu.Item\n                        as={Link}\n                        to={`/address/`}\n                    >\n                        <Icon name={'search'} size={'big'}/> Check Allowances\n                    </Menu.Item>\n                    <Menu.Menu position='right'>\n                        <Menu.Item>\n                            <a href={'https://github.com/TripleSpeeder/token-allowance-checker'}\n                               title={'github.com/TripleSpeeder/token-allowance-checker'}\n                               target={'_blank'} rel=\"noopener noreferrer\"\n                            >\n                                <Icon name={'github'} size={'big'}/>\n                            </a>\n                        </Menu.Item>\n                    </Menu.Menu>\n                </Container>\n            </Menu>\n            <Container\n                text\n                style={{\n                    marginTop: '4em',\n                    marginBottom: '2em'\n                }}\n            >\n                <Header\n                    as='h1'\n                    inverted={false}\n                    style={{\n                        fontSize: '3em',\n                        marginTop: '0.5em',\n                    }}\n                >\n                    Token Allowance Checker\n                    <Header.Subheader>\n                        powered by <a href={'https://www.dfuse.io/'} rel=\"noopener noreferrer\" target={'_blank'}>dfuse</a>\n                    </Header.Subheader>\n                </Header>\n            </Container>\n        </Segment>\n\n    return (\n        <Router>\n            {HomepageHeading}\n            <OnboardContext>\n                <Switch>\n                <Route path={['/address/:address', '/address']}>\n                    <Container>\n                        <OnboardGate>\n                            <Segment basic padded>\n                                <AddressInputContainer/>\n                            </Segment>\n                            <AllowanceLister/>\n                        </OnboardGate>\n                    </Container>\n                </Route>\n                <Route path={'/'}>\n                    <Segment basic vertical style={{ paddingTop: '4em' }}>\n                        <Grid container stackable verticalAlign='top'>\n                            <Grid.Row>\n                                <Grid.Column width={8}>\n                                    <Header as='h3' style={{ fontSize: '2em' }}>\n                                        Do you actually know who can spend your tokens?\n                                    </Header>\n                                    <p style={{ fontSize: '1.33em' }}>\n                                        <em>Token Allowance Checker</em> helps you keep track of which contracts you have approved to spend\n                                        your tokens.\n                                    </p>\n                                    <Header as='h3' style={{ fontSize: '2em' }}>\n                                        Control your approvals\n                                    </Header>\n                                    <p style={{ fontSize: '1.33em' }}>\n                                        <em>Token Allowance Checker</em> will show you all approvals for ERC20-compliant tokens, and the option to change\n                                        the approved amount - or completely zero it.</p>\n                                </Grid.Column>\n                                <Grid.Column floated='right' width={7}>\n                                    <Header as='h3' style={{ fontSize: '2em' }}>\n                                        The unlimited approval problem\n                                    </Header>\n                                    <p style={{ fontSize: '1.33em' }}>\n                                        Many DApps have the habit of requiring you to approve effectively unlimited amount of\n                                        tokens. This helps improving the user experience, as you only have to sign off an approval\n                                        once and it will be enough for all future transactions.\n                                    </p>\n                                    <p style={{ fontSize: '1.33em' }}>\n                                        However this also means that the DApp (or the person/entity controlling it) can at any time\n                                        transfer <em>all of your tokens</em>, without requiring any further approval.\n                                    </p>\n                                    <p style={{ fontSize: '1.33em' }}>\n                                        In addition, there is no concept of expiring approvals. Once approved, the approval will\n                                        remain forever. If you do not trust a DApp or its operators anymore, there is usually no\n                                        easy way to remove the approval.\n                                    </p>\n                                </Grid.Column>\n                            </Grid.Row>\n                        </Grid>\n                    </Segment>\n                    <Segment basic textAlign={'center'}>\n                        <Button as={Link} to={`/address/`} primary size={'massive'}>Check Allowances<Icon name='right arrow' /></Button>\n                    </Segment>\n\n                </Route>\n            </Switch>\n            </OnboardContext>\n            <Segment basic>\n                <Divider></Divider>\n                <Container textAlign={'center'}>\n                    <List horizontal >\n                        <List.Item as={'a'} href={'https://twitter.com/TripleSpeeder'} target={'_blank'}>\n                            <Popup content='@triplespeeder' trigger={<Icon size={'big'} name={'twitter'}/>}/>\n                        </List.Item>\n                        <List.Item as={'a'} href={'https://t.me/triplespeeder'} target={'_blank'}>\n                            <Popup content='@triplespeeder' trigger={<Icon size={'big'} name={'telegram'}/>}/>\n                        </List.Item>\n                        <List.Item as={'a'} href={'mailto:michael@m-bauer.org'}>\n                            <Popup content='michael@m-bauer.org' trigger={<Icon size={'big'} name={'mail outline'}/>}/>\n                        </List.Item>\n                        <List.Item as={'a'} href={'https://github.com/TripleSpeeder'} target={'_blank'}>\n                            <Popup content='github.com/TripleSpeeder' trigger={<Icon size={'big'} name={'github'}/>}/>\n                        </List.Item>\n                        <List.Item as={'a'} href={'https://www.reddit.com/u/TripleSpeeder'} target={'_blank'}>\n                            <Popup content='u/TripleSpeeder' trigger={<Icon size={'big'} name={'reddit'}/>}/>\n                        </List.Item>\n                    </List>\n                </Container>\n                <Container textAlign={'center'}>\n                    <p style={{ fontSize: '1em', float: 'right' }}><Icon name={'copyright outline'}/> Michael Bauer</p>\n                </Container>\n            </Segment>\n        </Router>\n\n    )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 964;"],"sourceRoot":""}