{"version":3,"sources":["features/editAllowance/EditAllowanceSlice.ts","components/AddressDisplay.tsx","features/allowancesList/TokenAllowanceItemActions.tsx","features/allowancesList/TokenAllowanceItem.tsx","features/allowancesList/TokenAllowancesItem.tsx","features/allowancesList/AllowancesListContainer.tsx","features/allowancesListFilter/AllowancesListFilter.tsx","features/editAllowance/EditAllowanceForm.tsx","features/editAllowance/EditAllowanceFormContainer.tsx","utils/erc20-decimals-conversion.ts","features/allowancesList/AllowanceLister.tsx","features/onboard/OnboardGate.tsx","features/addressInput/AddressInput.tsx","features/addressInput/AddressInputContainer.tsx","components/AddressExtractor.tsx","components/NetworkSelector.tsx","app/App.tsx","app/rootReducer.ts","app/store.ts","index.tsx","features/allowancesList/AllowancesListSlice.ts","features/transactionTracker/TransactionTrackerSlice.ts","features/onboard/onboardSlice.ts","features/addressInput/AddressSlice.ts","utils/wellKnownContracts.ts","features/tokenContracts/tokenContractsSlice.ts","../node_modules/web3-eth-accounts/src sync","features/balances/BalancesSlice.tsx"],"names":["editAllowanceSlice","createSlice","name","initialState","showModal","editAllowanceId","reducers","openEditAllowanceModal","state","action","allowanceId","payload","closeEditAllowanceModal","actions","AddressDisplay","contractName","etherscanUrl","ethAddress","networkId","useSelector","onboard","address","ensName","esContractName","setClipboard","content","navigator","clipboard","writeText","then","console","log","Popup","mouseEnterDelay","trigger","Icon","circular","size","onClick","window","open","TokenAllowanceItemActions","transactionContent","actionContent","dispatch","useDispatch","allowance","allowances","allowancesById","transaction","editTransactionId","transactions","transactionsById","undefined","walletAddressId","addresses","icon","msg","header","transactionState","TransactionStates","CONFIRMED","transactionHash","FAILED","color","error","SUBMITTED","loading","INITIAL","editEnabled","ownerId","Button","compact","primary","disabled","event","preventDefault","unlimitedAllowance","BN","pow","subn","TokenAllowanceItem","allowanceElement","criticalAllowance","allowanceValue","allowanceValuesById","tokenContract","tokenContracts","contractsById","tokenContractId","spenderAddress","addressesById","spenderId","useEffect","QueryStates","QUERY_STATE_INITIAL","fetchAllowanceValueThunk","QUERY_STATE_RUNNING","Loader","active","inline","QUERY_STATE_COMPLETE","value","eq","gte","totalSupply","roundToDecimals","rounded","bnToDisplayString","decimals","QUERY_STATE_ERROR","Table","Row","key","Cell","negative","TokenAllowancesItem","tokenId","allowanceIds","tokenAddress","ownerBalance","balanceId","buildBalanceId","balances","balancesById","contractInstance","addBalanceThunk","Segment","raised","Placeholder","Header","Line","Paragraph","tokenDisplayString","queryState","bn2DisplayString","symbol","headline","rows","forEach","push","as","Subheader","basic","celled","selectable","HeaderCell","Body","AllowancesListContainer","message","showZeroAllowances","addressFilter","allowancesByTokenId","allowanceIdsByOwnerId","filter","isZero","filterString","toLowerCase","tokenContractAddress","addressId","includes","warn","map","_","groupBy","allowanceQueryStateByOwner","ownerAddress","items","Object","entries","entry","id","padded","textAlign","Message","warning","Content","currentPage","length","success","AllowancesListFilter","toggleShowZeroAllowances","addressFilterValue","handleAddressFilterChange","refresh","clearAddressFilter","Grid","verticalAlign","centered","columns","divided","Column","width","Input","label","placeholder","onChange","link","fluid","Checkbox","toggle","checked","title","EditAllowanceForm","tokenName","handleChange","currentAllowance","newAllowance","handleClose","handleSubmit","Modal","onClose","List","Item","Form","onSubmit","Field","required","tag","labelPosition","type","positive","EditAllowanceFormContainer","editAllowance","spender","useState","setNewAllowance","convertAllowanceToDisplaystring","useCallback","spenderENSName","e","target","parseFloat","newValue","base","substring","Error","toString","comps","split","whole","fraction","decimalsNumber","toNumber","wholeBN","fractionBN","wei","mul","add","neg","toBaseUnit","setAllowanceThunk","tokenSymbol","AllowanceLister","checkAddressId","showEditAllowanceModal","setShowZeroAllowances","setAddressFilter","document","fetchAllowancesThunk","Fragment","loadAllowances","OnboardGate","children","history","useHistory","onboardAPI","walletSelected","selectWallet","initialize","info","AddressInput","handleInput","addressInputStates","AddressInputContainer","web3","addressInputState","setAddressInputState","input","setInput","setAddress","a","validAddress","test","eth","ens","getAddress","resolvedAddress","widths","Group","AddressExtractor","addressFromParams","useParams","addressFromWallet","setCheckAddressThunk","clearCheckAddressId","NetworkSelector","options","text","requiredNetworkId","networkEntry","find","Dropdown","data","setRequiredNetworkIdThunk","parseInt","App","GrantMessage","rel","href","HomepageHeading","inverted","vertical","Menu","fixed","Container","Link","to","position","style","marginTop","marginBottom","fontSize","path","paddingTop","container","stackable","floated","Divider","float","horizontal","pkg","version","rootReducer","combineReducers","onboardReducer","addressesReducer","tokenContractReducer","allowancesReducer","balancesReducer","editAllowanceReducer","transactionTrackerReducer","customizedMiddleware","getDefaultMiddleware","serializableCheck","ignoredActions","setOnboardAPI","setWeb3Instance","addContract","setAllowanceValue","addBalance","setBalanceValue","ignoredPaths","immutableCheck","ignore","store","configureStore","reducer","middleware","require","default","ReactDOM","render","getElementById","contract","topicHashApprove","eventABI","indexed","internalType","defaultQueryStateByOwner","allowancesSlice","addAllowance","keys","prepare","buildAllowanceId","setQueryState","extraReducers","addAddress","addTransaction","transactionId","setNetworkId","getState","owner","network","client","createDfuseClient","apiKey","erc20Contract","ERC20Data","setProvider","currentProvider","cursor","numPageResults","badContracts","knownContracts","knownSpenders","graphql","variables","limit","query","response","errors","edges","searchTransactions","edgeIndex","node","index","matchingLogs","logEntry","topics","hash","decoded","abi","decodeLog","slice","at","balanceOf","addContractThunk","addAddressThunk","fetchEtherscanNameThunk","pageInfo","endCursor","JSON","stringify","TransactionTrackerSlice","editAllowanceTransaction","updateTransaction","infuraApiKey","wallets","walletName","preferred","infuraKey","rpcUrl","appUrl","email","prevWalletAddressId","onboardSlice","setPrevWalletAddressId","setWalletSelected","setRequiredNetworkId","checkWallet","walletCheck","result","walletSelect","config","Onboard","dappId","subscriptions","wallet","Web3","provider","setWalletAddressThunk","prevNetworkId","balance","heading","description","ResolvingStates","addressSlice","resolvingState","Initial","setResolvingState","setENSName","setCheckAddressId","setWalletAddressId","setEtherscanContractName","apiHost","requestUrl","fetch","json","ContractName","Resolving","reverseENSLookupName","substr","resolver","ResolverContract","methods","namehash","call","reverseENS","Resolved","checkAddress","endsWith","walletAddress","wellKnownContracts","1","3","tokenContractSlice","contractAddress","uuidv4","approve","from","tx","webpackEmptyContext","req","code","resolve","module","exports","balancesSlice","setBalanceQuerystate"],"mappings":"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","file":"static/js/main.5c6b7e2c.chunk.js","sourcesContent":["import { AllowanceId } from 'features/allowancesList/AllowancesListSlice'\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit'\n\ninterface EditAllowanceState {\n    showModal: boolean\n    editAllowanceId: AllowanceId\n}\n\nconst initialState: EditAllowanceState = {\n    showModal: false,\n    editAllowanceId: '',\n}\n\nconst editAllowanceSlice = createSlice({\n    name: 'editAllowance',\n    initialState: initialState,\n    reducers: {\n        openEditAllowanceModal(state, action: PayloadAction<AllowanceId>) {\n            const allowanceId = action.payload\n            state.showModal = true\n            state.editAllowanceId = allowanceId\n        },\n        closeEditAllowanceModal(state) {\n            state.showModal = false\n        },\n    },\n})\nexport const {\n    openEditAllowanceModal,\n    closeEditAllowanceModal,\n} = editAllowanceSlice.actions\nexport default editAllowanceSlice.reducer\n","import React from 'react'\nimport { Icon, Popup } from 'semantic-ui-react'\nimport { EthAddress } from 'features/addressInput/AddressSlice'\nimport { useSelector } from 'react-redux'\nimport { RootState } from '../app/rootReducer'\n\ninterface AddressDisplayProps {\n    ethAddress: EthAddress\n}\n\nconst AddressDisplay = ({ ethAddress }: AddressDisplayProps) => {\n    const networkId: number = useSelector(\n        (state: RootState) => state.onboard.networkId\n    )\n    const { address, ensName, esContractName } = ethAddress\n    const setClipboard = (content: string) => {\n        navigator.clipboard.writeText(content).then(\n            function() {\n                /* clipboard successfully set */\n            },\n            function() {\n                console.log(`failed to set clipboard`)\n            }\n        )\n    }\n\n    let contractName\n    if (ensName) {\n        contractName = `Reverse ENS: ${ensName}`\n    } else if (esContractName) {\n        contractName = `Contract: ${esContractName}`\n    }\n\n    let etherscanUrl: string\n    switch (networkId) {\n        case 3: // Ropsten\n            etherscanUrl = `https://ropsten.etherscan.io/address/${address}`\n            break\n        case 1:\n            etherscanUrl = `https://etherscan.io/address/${address}`\n            break\n        default:\n            etherscanUrl = `https://etherscan.io/address/${address}`\n    }\n\n    if (contractName) {\n        return (\n            <>\n                <div>\n                    <strong>{contractName}</strong>\n                </div>\n                <div>\n                    <small>\n                        {address}&nbsp;\n                        <Popup\n                            mouseEnterDelay={500}\n                            content={'Copy to clipboard'}\n                            trigger={\n                                <Icon\n                                    circular\n                                    name={'copy outline'}\n                                    size={'small'}\n                                    onClick={() => {\n                                        setClipboard(address)\n                                    }}\n                                />\n                            }\n                        />\n                        <Popup\n                            mouseEnterDelay={500}\n                            content={'View on Etherscan'}\n                            trigger={\n                                <Icon\n                                    circular\n                                    name={'external square'}\n                                    size={'small'}\n                                    onClick={() => {\n                                        window.open(etherscanUrl, '_blank')\n                                    }}\n                                />\n                            }\n                        />\n                    </small>\n                </div>\n            </>\n        )\n    } else {\n        return (\n            <div>\n                {address}&nbsp;\n                <Popup\n                    mouseEnterDelay={500}\n                    content={'Copy to clipboard'}\n                    trigger={\n                        <Icon\n                            circular\n                            name={'copy outline'}\n                            size={'small'}\n                            onClick={() => {\n                                setClipboard(address)\n                            }}\n                        />\n                    }\n                />\n                <Popup\n                    mouseEnterDelay={500}\n                    content={'View on Etherscan'}\n                    trigger={\n                        <Icon\n                            circular\n                            name={'external square'}\n                            size={'small'}\n                            onClick={() => {\n                                window.open(etherscanUrl, '_blank')\n                            }}\n                        />\n                    }\n                />\n            </div>\n        )\n    }\n}\n\nexport default AddressDisplay\n","import { AllowanceId } from './AllowancesListSlice'\nimport React from 'react'\nimport { Button, Icon, Popup } from 'semantic-ui-react'\nimport { openEditAllowanceModal } from '../editAllowance/EditAllowanceSlice'\nimport { TransactionStates } from '../transactionTracker/TransactionTrackerSlice'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { RootState } from '../../app/rootReducer'\n\ninterface TokenAllowanceItemActionsProps {\n    allowanceId: AllowanceId\n}\nconst TokenAllowanceItemActions = ({\n    allowanceId,\n}: TokenAllowanceItemActionsProps) => {\n    const dispatch = useDispatch()\n    const allowance = useSelector(\n        (state: RootState) => state.allowances.allowancesById[allowanceId]\n    )\n    const transaction = useSelector((state: RootState) =>\n        allowance.editTransactionId\n            ? state.transactions.transactionsById[allowance.editTransactionId]\n            : undefined\n    )\n    const walletAddressId = useSelector(\n        (state: RootState) => state.addresses.walletAddressId\n    )\n\n    const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n        event.preventDefault()\n        dispatch(openEditAllowanceModal(allowanceId))\n    }\n\n    let transactionContent\n    if (transaction) {\n        let icon\n        let msg\n        let header\n        switch (transaction.transactionState) {\n            case TransactionStates.CONFIRMED:\n                icon = <Icon name={'check'} size={'large'} />\n                header = 'Transaction confirmed'\n                msg = `Transaction hash: ${transaction.transactionHash}`\n                break\n            case TransactionStates.FAILED:\n                icon = (\n                    <Icon\n                        name={'exclamation triangle'}\n                        color={'red'}\n                        size={'large'}\n                    />\n                )\n                header = 'Transaction failed'\n                msg = `${transaction.error}`\n                break\n            case TransactionStates.SUBMITTED:\n                icon = <Icon name={'spinner'} loading size={'large'} />\n                header = 'Transaction created'\n                msg = `Waiting for confirmation...`\n                break\n            case TransactionStates.INITIAL:\n            default:\n                icon = <Icon name={'question'} size={'large'} />\n                header = 'Transaction unknown'\n                msg = 'Tx state INITIAL'\n        }\n        transactionContent = (\n            <Popup header={header} content={msg} trigger={icon} />\n        )\n    }\n    let actionContent\n    if (transaction?.transactionState !== TransactionStates.SUBMITTED) {\n        const editEnabled = allowance.ownerId === walletAddressId\n        actionContent = (\n            <Popup\n                content={\n                    editEnabled\n                        ? 'edit allowance'\n                        : 'Only address owner can edit allowance'\n                }\n                trigger={\n                    <span>\n                        <Button\n                            icon={'edit'}\n                            size={'small'}\n                            compact\n                            primary\n                            disabled={!editEnabled}\n                            onClick={handleClick}\n                        />\n                    </span>\n                }\n            />\n        )\n    }\n\n    return (\n        <>\n            {actionContent}&nbsp;{transactionContent}\n        </>\n    )\n}\n\nexport default TokenAllowanceItemActions\n","import React, { useEffect } from 'react'\nimport {\n    AllowanceId,\n    fetchAllowanceValueThunk,\n    QueryStates,\n} from './AllowancesListSlice'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { RootState } from 'app/rootReducer'\nimport { Loader, Table } from 'semantic-ui-react'\nimport AddressDisplay from 'components/AddressDisplay'\nimport bnToDisplayString from '@triplespeeder/bn2string'\nimport BN from 'bn.js'\nimport TokenAllowanceItemActions from './TokenAllowanceItemActions'\n\ninterface TokenAllowanceItemProps {\n    allowanceId: AllowanceId\n}\n\nconst unlimitedAllowance = new BN(2).pow(new BN(256)).subn(1)\n\nconst TokenAllowanceItem = ({ allowanceId }: TokenAllowanceItemProps) => {\n    const dispatch = useDispatch()\n    const allowance = useSelector(\n        (state: RootState) => state.allowances.allowancesById[allowanceId]\n    )\n    const allowanceValue = useSelector(\n        (state: RootState) => state.allowances.allowanceValuesById[allowanceId]\n    )\n    const tokenContract = useSelector(\n        (state: RootState) =>\n            state.tokenContracts.contractsById[allowance.tokenContractId]\n    )\n    const spenderAddress = useSelector(\n        (state: RootState) => state.addresses.addressesById[allowance.spenderId]\n    )\n    // lazy-load allowance value\n    useEffect(() => {\n        if (allowanceValue.state === QueryStates.QUERY_STATE_INITIAL) {\n            dispatch(fetchAllowanceValueThunk(allowanceId))\n        }\n    }, [allowanceValue, allowanceId, dispatch])\n\n    let allowanceElement, criticalAllowance\n    switch (allowanceValue.state) {\n        case QueryStates.QUERY_STATE_RUNNING:\n            allowanceElement = <Loader active inline size={'mini'} />\n            break\n        case QueryStates.QUERY_STATE_COMPLETE:\n            criticalAllowance =\n                allowanceValue.value.eq(unlimitedAllowance) ||\n                allowanceValue.value.gte(tokenContract.totalSupply)\n            if (criticalAllowance) {\n                allowanceElement = <em>unlimited</em>\n            } else {\n                const roundToDecimals = new BN('2')\n                const { /*precise,*/ rounded } = bnToDisplayString({\n                    value: allowanceValue.value,\n                    decimals: tokenContract.decimals,\n                    roundToDecimals,\n                })\n                allowanceElement = <span>{rounded}</span>\n            }\n            break\n        case QueryStates.QUERY_STATE_ERROR:\n            allowanceElement = <span>error</span>\n            break\n        case QueryStates.QUERY_STATE_INITIAL:\n        default:\n            allowanceElement = ''\n    }\n\n    return (\n        <Table.Row key={`${allowanceId}`}>\n            <Table.Cell>\n                <AddressDisplay ethAddress={spenderAddress} />\n            </Table.Cell>\n            <Table.Cell negative={criticalAllowance}>\n                {allowanceElement}\n            </Table.Cell>\n            <Table.Cell>\n                <TokenAllowanceItemActions allowanceId={allowanceId} />\n            </Table.Cell>\n        </Table.Row>\n    )\n}\n\nexport default TokenAllowanceItem\n","import React, { useEffect } from 'react'\nimport { Header, Segment, Table, Placeholder } from 'semantic-ui-react'\nimport AddressDisplay from '../../components/AddressDisplay'\nimport BN from 'bn.js'\nimport { AddressId } from '../addressInput/AddressSlice'\nimport { AllowanceId, QueryStates } from './AllowancesListSlice'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { RootState } from 'app/rootReducer'\nimport TokenAllowanceItem from './TokenAllowanceItem'\nimport { addBalanceThunk, buildBalanceId } from '../balances/BalancesSlice'\nimport bn2DisplayString from '@triplespeeder/bn2string'\n\ninterface TokenAllowanceItemProps {\n    tokenId: AddressId\n    ownerId: AddressId\n    allowanceIds: Array<AllowanceId>\n}\n\nconst TokenAllowancesItem = ({\n    tokenId,\n    ownerId,\n    allowanceIds,\n}: TokenAllowanceItemProps) => {\n    const dispatch = useDispatch()\n    const tokenContract = useSelector(\n        (state: RootState) => state.tokenContracts.contractsById[tokenId]\n    )\n    const tokenAddress = useSelector(\n        (state: RootState) => state.addresses.addressesById[tokenId]\n    )\n    const ownerBalance = useSelector((state: RootState) => {\n        const balanceId = buildBalanceId(ownerId, tokenId)\n        return state.balances.balancesById[balanceId]\n    })\n\n    // lazy-load owner balance when contract instance is available\n    useEffect(() => {\n        if (!ownerBalance && tokenContract?.contractInstance) {\n            dispatch(addBalanceThunk(ownerId, tokenId))\n        }\n    }, [ownerBalance, ownerId, tokenId, tokenContract, dispatch])\n\n    // return placeholder if contract is not yet loaded\n    if (!tokenContract) {\n        return (\n            <Segment raised>\n                <Placeholder>\n                    <Placeholder.Header>\n                        <Placeholder.Line />\n                        <Placeholder.Line />\n                    </Placeholder.Header>\n                    <Placeholder.Paragraph>\n                        <Placeholder.Line />\n                        <Placeholder.Line />\n                        <Placeholder.Line />\n                    </Placeholder.Paragraph>\n                </Placeholder>\n            </Segment>\n        )\n    }\n\n    let tokenDisplayString = tokenContract.name\n    if (tokenDisplayString === '') {\n        tokenDisplayString = `Unnamed ERC20`\n    }\n    const roundToDecimals = new BN(2)\n    if (\n        !ownerBalance ||\n        ownerBalance.queryState === QueryStates.QUERY_STATE_RUNNING\n    ) {\n        tokenDisplayString += ` (current balance: loading...)`\n    } else {\n        const { rounded } = bn2DisplayString({\n            value: ownerBalance.value,\n            decimals: tokenContract.decimals,\n            roundToDecimals,\n        })\n        tokenDisplayString += ` (current balance: ${rounded} ${tokenContract.symbol})`\n    }\n    const headline = <div>{tokenDisplayString}</div>\n\n    // populate rows with one entry per allowance from allowanceIds\n    const rows: Array<React.ReactNode> = []\n    allowanceIds.forEach(allowanceId => {\n        rows.push(\n            <TokenAllowanceItem key={allowanceId} allowanceId={allowanceId} />\n        )\n    })\n\n    return (\n        <Segment raised>\n            <Header as={'h3'}>\n                {headline}\n                <Header.Subheader>\n                    <AddressDisplay ethAddress={tokenAddress} />\n                </Header.Subheader>\n            </Header>\n            <Table basic={'very'} celled selectable>\n                <Table.Header>\n                    <Table.Row>\n                        <Table.HeaderCell>Spender</Table.HeaderCell>\n                        <Table.HeaderCell>Allowance</Table.HeaderCell>\n                        <Table.HeaderCell>Action</Table.HeaderCell>\n                    </Table.Row>\n                </Table.Header>\n                <Table.Body>{rows}</Table.Body>\n            </Table>\n        </Segment>\n    )\n}\n\nexport default TokenAllowancesItem\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport _ from 'lodash'\nimport { RootState } from '../../app/rootReducer'\nimport TokenAllowancesItem from './TokenAllowancesItem'\nimport { QueryStates } from './AllowancesListSlice'\nimport { Segment, Message, Icon } from 'semantic-ui-react'\nimport { AddressId } from '../addressInput/AddressSlice'\n\ninterface AllowancesListContainerProps {\n    ownerId: AddressId\n    showZeroAllowances: boolean\n    addressFilter: string\n}\n\nconst AllowancesListContainer = ({\n    ownerId,\n    showZeroAllowances,\n    addressFilter,\n}: AllowancesListContainerProps) => {\n    const allowancesByTokenId = useSelector((state: RootState) => {\n        let candidates\n        if (showZeroAllowances && addressFilter === '') {\n            // no filter required, just return all IDs.\n            candidates = state.allowances.allowanceIdsByOwnerId[ownerId]\n        } else {\n            // apply filter\n            candidates = state.allowances.allowanceIdsByOwnerId[ownerId].filter(\n                allowanceId => {\n                    const allowance =\n                        state.allowances.allowancesById[allowanceId]\n                    if (!showZeroAllowances) {\n                        const allowanceValue =\n                            state.allowances.allowanceValuesById[allowanceId]\n                        const isZeroAllowance =\n                            allowanceValue.state ===\n                                QueryStates.QUERY_STATE_COMPLETE &&\n                            allowanceValue.value.isZero()\n                        if (isZeroAllowance) {\n                            return false\n                        }\n                    }\n                    if (addressFilter) {\n                        const filterString = addressFilter.toLowerCase()\n                        const tokenContract =\n                            state.tokenContracts.contractsById[\n                                allowance.tokenContractId\n                            ]\n                        if (tokenContract) {\n                            const tokenContractAddress =\n                                state.addresses.addressesById[\n                                    tokenContract.addressId\n                                ]\n                            const matchedFilter =\n                                tokenContract.name\n                                    .toLowerCase()\n                                    .includes(filterString) ||\n                                tokenContract.symbol\n                                    .toLowerCase()\n                                    .includes(filterString) ||\n                                tokenContractAddress.address\n                                    .toLowerCase()\n                                    .includes(filterString) ||\n                                tokenContractAddress.ensName\n                                    ?.toLowerCase()\n                                    .includes(filterString)\n                            if (!matchedFilter) {\n                                return false\n                            }\n                        } else {\n                            console.warn(\n                                `No tokencontract for ${allowance.tokenContractId}`\n                            )\n                        }\n                    }\n                    return true\n                }\n            )\n        }\n        // get all allowances of owner\n        const allowances = candidates?.map(\n            allowanceId => state.allowances.allowancesById[allowanceId]\n        )\n        // group allowances by tokenID\n        return _.groupBy(allowances, 'tokenContractId')\n    })\n    const queryState = useSelector(\n        (state: RootState) =>\n            state.allowances.allowanceQueryStateByOwner[ownerId]\n    )\n    const ownerAddress = useSelector(\n        (state: RootState) => state.addresses.addressesById[ownerId]\n    )\n\n    if (!queryState) {\n        console.log(`No querystate available for ${ownerId}`)\n        return null\n    }\n\n    let message\n    const items: Array<React.ReactNode> = []\n    for (const entry of Object.entries(allowancesByTokenId)) {\n        const tokenId = entry[0]\n        const allowanceIds = entry[1].map(allowance => allowance.id)\n        items.push(\n            <TokenAllowancesItem\n                key={tokenId}\n                tokenId={tokenId}\n                ownerId={ownerId}\n                allowanceIds={allowanceIds}\n            />\n        )\n    }\n\n    switch (queryState.state) {\n        case QueryStates.QUERY_STATE_RUNNING:\n            message = (\n                <Segment basic padded='very' textAlign={'center'}>\n                    <Message icon warning size={'huge'}>\n                        <Icon name='circle notched' loading />\n                        <Message.Content>\n                            <Message.Header>Loading events</Message.Header>\n                            <div>\n                                Querying dfuse API for ERC20 Approvals, getting\n                                page {queryState.currentPage + 1}...\n                            </div>\n                        </Message.Content>\n                    </Message>\n                </Segment>\n            )\n            break\n        case QueryStates.QUERY_STATE_ERROR:\n            message = (\n                <Segment basic padded='very' textAlign={'center'}>\n                    <Message error icon size={'huge'}>\n                        <Icon name='exclamation triangle' />\n                        <Message.Content>\n                            <Message.Header>Error</Message.Header>\n                            {queryState.error}\n                        </Message.Content>\n                    </Message>\n                </Segment>\n            )\n            break\n        case QueryStates.QUERY_STATE_COMPLETE:\n            if (items.length === 0) {\n                message = (\n                    <Segment basic padded='very' textAlign={'center'}>\n                        <Message success icon size={'huge'}>\n                            <Icon name='info' />\n                            <Message.Content>\n                                <Message.Header>No Approvals</Message.Header>\n                                {ownerAddress.ensName ??\n                                    ownerAddress.address}{' '}\n                                has no Approvals.\n                            </Message.Content>\n                        </Message>\n                    </Segment>\n                )\n            }\n            break\n        case QueryStates.QUERY_STATE_INITIAL:\n        default:\n            return <div>Unhandled state!</div>\n    }\n\n    return (\n        <>\n            {message}\n            {items}\n        </>\n    )\n}\n\nexport default AllowancesListContainer\n","import React from 'react'\nimport {\n    Checkbox,\n    Grid,\n    Icon,\n    Input,\n    Button,\n    ButtonProps,\n} from 'semantic-ui-react'\nimport { InputOnChangeData } from 'semantic-ui-react/dist/commonjs/elements/Input/Input'\nimport { CheckboxProps } from 'semantic-ui-react/dist/commonjs/modules/Checkbox/Checkbox'\n\ninterface AllowancesListFilterProps {\n    addressFilterValue: string\n    showZeroAllowances: boolean\n    toggleShowZeroAllowances: (\n        event: React.FormEvent<HTMLInputElement>,\n        data: CheckboxProps\n    ) => void\n    handleAddressFilterChange: (\n        event: React.ChangeEvent<HTMLInputElement>,\n        data: InputOnChangeData\n    ) => void\n    clearAddressFilter: (input: void) => void\n    refresh: (event: React.MouseEvent, data: ButtonProps) => void\n}\n\nconst AllowancesListFilter = ({\n    showZeroAllowances,\n    toggleShowZeroAllowances,\n    addressFilterValue,\n    handleAddressFilterChange,\n    refresh,\n    clearAddressFilter,\n}: AllowancesListFilterProps) => {\n    return (\n        <Grid\n            verticalAlign='middle'\n            centered\n            textAlign={'center'}\n            columns={2}\n            divided\n        >\n            <Grid.Row>\n                <Grid.Column width={9}>\n                    <Input\n                        label='Tokenfilter'\n                        name='filter'\n                        placeholder='Enter name, symbol or contract address'\n                        onChange={handleAddressFilterChange}\n                        value={addressFilterValue}\n                        icon={\n                            <Icon\n                                name='eraser'\n                                circular\n                                link\n                                onClick={clearAddressFilter}\n                            />\n                        }\n                        fluid\n                    />\n                </Grid.Column>\n                <Grid.Column width={6}>\n                    <Checkbox\n                        toggle\n                        label='Include zero allowances'\n                        checked={showZeroAllowances}\n                        onChange={toggleShowZeroAllowances}\n                    />\n                </Grid.Column>\n                <Grid.Column width={1}>\n                    <Button\n                        circular\n                        icon={'refresh'}\n                        onClick={refresh}\n                        title={'Refresh allowances'}\n                        size={'small'}\n                        compact\n                    />\n                </Grid.Column>\n            </Grid.Row>\n        </Grid>\n    )\n}\n\nexport default AllowancesListFilter\n","import React from 'react'\nimport { Form, Grid, Header, Input, Message, Modal } from 'semantic-ui-react'\n\ninterface EditAllowanceFormProps {\n    tokenName: string\n    tokenSymbol: string\n    tokenAddress: string\n    spenderAddress: string\n    spenderENSName: string\n    currentAllowance: string\n    newAllowance: string\n    handleChange: (e: React.FormEvent<EventTarget>) => void\n    handleClose: () => void\n    handleSubmit: () => void\n}\n\nconst EditAllowanceForm = ({\n    tokenName,\n    handleChange,\n    tokenAddress,\n    spenderAddress,\n    currentAllowance,\n    newAllowance,\n    handleClose,\n    handleSubmit,\n}: EditAllowanceFormProps) => {\n    let headline = tokenName\n    if (headline === '') {\n        headline = `Unnamed ERC20 at ${tokenAddress}`\n    }\n    return (\n        <Modal open={true} size={'small'} onClose={handleClose}>\n            <Header>Edit Allowance</Header>\n            <Modal.Content>\n                <Message size={'huge'}>\n                    <Message.List>\n                        <Message.Item>Token: {headline}</Message.Item>\n                        <Message.Item>Spender: {spenderAddress}</Message.Item>\n                        <Message.Item>\n                            Current allowance: {currentAllowance}\n                        </Message.Item>\n                    </Message.List>\n                </Message>\n                <Form size={'huge'} onSubmit={handleSubmit}>\n                    <Form.Field required>\n                        <Input\n                            label={{\n                                tag: true,\n                                content: 'Enter new allowance',\n                            }}\n                            labelPosition='right'\n                            placeholder='Enter amount'\n                            type={'number'}\n                            name={'newAllowance'}\n                            onChange={handleChange}\n                            value={newAllowance}\n                        />\n                    </Form.Field>\n                    <Grid columns={2}>\n                        <Grid.Row>\n                            <Grid.Column>\n                                <Form.Button\n                                    type={'button'}\n                                    fluid\n                                    size={'huge'}\n                                    negative\n                                    onClick={handleClose}\n                                >\n                                    Cancel\n                                </Form.Button>\n                            </Grid.Column>\n                            <Grid.Column>\n                                <Form.Button\n                                    type={'submit'}\n                                    fluid\n                                    size={'huge'}\n                                    positive\n                                >\n                                    Set allowance\n                                </Form.Button>\n                            </Grid.Column>\n                        </Grid.Row>\n                    </Grid>\n                </Form>\n            </Modal.Content>\n        </Modal>\n    )\n}\n\nexport default EditAllowanceForm\n","import React, { useCallback, useState } from 'react'\nimport bnToDisplayString from '@triplespeeder/bn2string'\nimport { toBaseUnit } from '../../utils/erc20-decimals-conversion'\nimport EditAllowanceForm from './EditAllowanceForm'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { RootState } from 'app/rootReducer'\nimport BN from 'bn.js'\nimport { closeEditAllowanceModal } from './EditAllowanceSlice'\nimport { setAllowanceThunk } from '../tokenContracts/tokenContractsSlice'\n\nconst EditAllowanceFormContainer = () => {\n    const dispatch = useDispatch()\n    const allowance = useSelector(\n        (state: RootState) =>\n            state.allowances.allowancesById[state.editAllowance.editAllowanceId]\n    )\n    const allowanceValue = useSelector(\n        (state: RootState) =>\n            state.allowances.allowanceValuesById[\n                state.editAllowance.editAllowanceId\n            ]\n    )\n    const tokenContract = useSelector(\n        (state: RootState) =>\n            state.tokenContracts.contractsById[allowance.tokenContractId]\n    )\n    const spender = useSelector(\n        (state: RootState) => state.addresses.addressesById[allowance.spenderId]\n    )\n    const [newAllowance, setNewAllowance] = useState('0')\n\n    const convertAllowanceToDisplaystring = useCallback(() => {\n        if (allowanceValue.value.gte(tokenContract.totalSupply)) {\n            return 'unlimited'\n        } else {\n            const allowanceDisplay = bnToDisplayString({\n                value: allowanceValue.value,\n                decimals: tokenContract.decimals,\n                roundToDecimals: new BN(2),\n            })\n            return allowanceDisplay.rounded\n        }\n    }, [\n        allowanceValue.value,\n        tokenContract.totalSupply,\n        tokenContract.decimals,\n    ])\n\n    const handleAllowanceInputChange = (e: React.FormEvent<EventTarget>) => {\n        let { value } = e.target as HTMLInputElement\n        console.log(`handleChange: ${value}`)\n        if (parseFloat(value) < 0) {\n            value = '0'\n        }\n        setNewAllowance(value)\n    }\n\n    const handleClose = () => {\n        dispatch(closeEditAllowanceModal())\n    }\n\n    const handleSubmit = () => {\n        console.log(`Submitted new allowance: ${newAllowance}`)\n        // convert 'newAllowance' number to token baseunit\n        const newValue = toBaseUnit(newAllowance, tokenContract.decimals)\n        dispatch(closeEditAllowanceModal())\n        dispatch(\n            setAllowanceThunk(\n                tokenContract.addressId,\n                spender.address,\n                newValue,\n                allowance.id\n            )\n        )\n    }\n\n    return (\n        <EditAllowanceForm\n            newAllowance={newAllowance}\n            currentAllowance={convertAllowanceToDisplaystring()}\n            tokenAddress={tokenContract.addressId}\n            handleClose={handleClose}\n            spenderAddress={spender.address}\n            spenderENSName={spender.ensName || ''}\n            tokenName={tokenContract.name}\n            handleChange={handleAllowanceInputChange}\n            handleSubmit={handleSubmit}\n            tokenSymbol={tokenContract.symbol}\n        />\n    )\n}\n\nexport default EditAllowanceFormContainer\n","import BN from 'bn.js'\n\nexport function toBaseUnit(value: string, decimals: BN) {\n    const ten = new BN(10)\n    const base = ten.pow(decimals)\n\n    // Is it negative?\n    const negative = value.substring(0, 1) === '-'\n    if (negative) {\n        value = value.substring(1)\n    }\n\n    if (value === '.') {\n        throw new Error(\n            `Invalid value ${value} cannot be converted to` +\n                ` base unit with ${decimals.toString()} decimals.`\n        )\n    }\n\n    // Split it into a whole and fractional part\n    const comps = value.split('.')\n    if (comps.length > 2) {\n        throw new Error('Too many decimal points')\n    }\n    let whole = comps[0]\n    let fraction = comps[1]\n\n    if (!whole) {\n        whole = '0'\n    }\n    if (!fraction) {\n        fraction = '0'\n    }\n    const decimalsNumber = decimals.toNumber()\n    if (fraction.length > decimalsNumber) {\n        throw new Error('Too many decimal places')\n    }\n\n    while (fraction.length < decimalsNumber) {\n        fraction += '0'\n    }\n\n    const wholeBN = new BN(whole)\n    const fractionBN = new BN(fraction)\n    let wei = wholeBN.mul(base).add(fractionBN)\n\n    if (negative) {\n        wei = wei.neg()\n    }\n\n    return new BN(wei.toString(10), 10)\n}\n","import React, { useEffect, useState } from 'react'\nimport 'semantic-ui-css/semantic.min.css'\nimport { Segment } from 'semantic-ui-react'\nimport AllowancesListContainer from './AllowancesListContainer'\nimport AllowancesListFilter from '../allowancesListFilter/AllowancesListFilter'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { RootState } from '../../app/rootReducer'\nimport { fetchAllowancesThunk, QueryStates } from './AllowancesListSlice'\nimport EditAllowanceFormContainer from '../editAllowance/EditAllowanceFormContainer'\n\nconst AllowanceLister = () => {\n    const dispatch = useDispatch()\n    const address = useSelector((state: RootState) => {\n        if (state.addresses.checkAddressId) {\n            return state.addresses.addressesById[state.addresses.checkAddressId]\n        } else {\n            return undefined\n        }\n    })\n    const queryState = useSelector((state: RootState) => {\n        if (address)\n            return state.allowances.allowanceQueryStateByOwner[address.address]\n        else return undefined\n    })\n    const showEditAllowanceModal = useSelector(\n        (state: RootState) => state.editAllowance.showModal\n    )\n\n    const [showZeroAllowances, setShowZeroAllowances] = useState(true)\n    const [addressFilter, setAddressFilter] = useState('')\n\n    const toggleShowZeroAllowances = () => {\n        setShowZeroAllowances(!showZeroAllowances)\n    }\n\n    const clearAddressFilter = () => {\n        setAddressFilter('')\n    }\n\n    const handleAddressFilterChange = (e: React.FormEvent<EventTarget>) => {\n        const { value } = e.target as HTMLInputElement\n        setAddressFilter(value)\n    }\n\n    useEffect(() => {\n        document.title = `TAC - ${address?.ensName ?? address?.address ?? ''}`\n    }, [address])\n\n    useEffect(() => {\n        if (\n            queryState &&\n            queryState.state === QueryStates.QUERY_STATE_INITIAL\n        ) {\n            if (address) dispatch(fetchAllowancesThunk(address.address))\n        }\n    }, [queryState, dispatch, address])\n\n    const loadAllowances = () => {\n        if (address) {\n            console.log(\n                `Starting query for \"${address?.ensName ?? address?.address}\"`\n            )\n            dispatch(fetchAllowancesThunk(address.address))\n        }\n    }\n\n    const handleRefreshClick = () => {\n        loadAllowances()\n    }\n\n    if (!address) {\n        return <div>No address set</div>\n    }\n\n    return (\n        <React.Fragment>\n            <Segment basic>\n                <h2>Allowances of {address?.ensName ?? address?.address}:</h2>\n            </Segment>\n            <AllowancesListFilter\n                showZeroAllowances={showZeroAllowances}\n                toggleShowZeroAllowances={toggleShowZeroAllowances}\n                addressFilterValue={addressFilter}\n                handleAddressFilterChange={handleAddressFilterChange}\n                clearAddressFilter={clearAddressFilter}\n                refresh={handleRefreshClick}\n            />\n            <AllowancesListContainer\n                ownerId={address.address}\n                showZeroAllowances={showZeroAllowances}\n                addressFilter={addressFilter}\n            />\n            {showEditAllowanceModal && <EditAllowanceFormContainer />}\n        </React.Fragment>\n    )\n}\n\nexport default AllowanceLister\n","import React, { useEffect } from 'react'\nimport { Icon, Message, Segment } from 'semantic-ui-react'\nimport { useHistory } from 'react-router-dom'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { RootState } from '../../app/rootReducer'\nimport { initialize, selectWallet } from './onboardSlice'\n\ninterface OnboardGateProps {\n    children?: React.ReactNode\n}\nconst OnboardGate = ({ children }: OnboardGateProps) => {\n    const history = useHistory()\n    const dispatch = useDispatch()\n    const { onboardAPI, walletSelected } = useSelector(\n        (state: RootState) => state.onboard\n    )\n\n    useEffect(() => {\n        if (!onboardAPI) {\n            console.log(`OnboardGate: Dispatching initialize()`)\n            dispatch(initialize(history))\n        } else if (!walletSelected) {\n            console.log(`OnboardGate: Dispatching selectWallet`)\n            dispatch(selectWallet(history))\n        }\n    }, [onboardAPI, walletSelected, dispatch, history])\n\n    if (walletSelected) {\n        return <React.Fragment>{children}</React.Fragment>\n    } else {\n        return (\n            <Segment basic padded='very' textAlign={'center'}>\n                <Message info icon size={'huge'}>\n                    <Icon name='spinner' loading />\n                    <Message.Content>\n                        <Message.Header>Waiting for wallet</Message.Header>\n                        Please complete wallet selection.\n                    </Message.Content>\n                </Message>\n            </Segment>\n        )\n    }\n}\n\nexport default OnboardGate\n","import React from 'react'\nimport { Form, Input } from 'semantic-ui-react'\n\ninterface AddressInputProps {\n    value: string\n    loading: boolean\n    error: boolean\n    success: boolean\n    handleInput: (input: string) => void\n}\n\nconst AddressInput = ({\n    handleInput,\n    loading,\n    error,\n    value,\n    success,\n}: AddressInputProps) => {\n    const handleChange = (e: React.FormEvent<EventTarget>) => {\n        const { value } = e.target as HTMLInputElement\n        handleInput(value)\n    }\n\n    return (\n        <Form.Field inline width={14}>\n            <Input\n                placeholder='Address or ENS Name'\n                error={error}\n                loading={loading}\n                onChange={handleChange}\n                value={value}\n                type={'text'}\n                action={{\n                    type: 'Submit',\n                    disabled: !success,\n                    content: 'Go!',\n                    positive: true,\n                }}\n                label={'Enter address/ENS name or select in wallet'}\n            />\n        </Form.Field>\n    )\n}\n\nexport default AddressInput\n","import React, { useState, useEffect } from 'react'\nimport AddressInput from './AddressInput'\nimport { useHistory } from 'react-router-dom'\nimport { Form, Grid } from 'semantic-ui-react'\nimport { useSelector } from 'react-redux'\nimport { RootState } from '../../app/rootReducer'\n\nexport const addressInputStates = {\n    ADDRESS_INITIAL: 'address_initial', // no user interaction\n    ADDRESS_RESOLVING: 'address_resolving', // valid ENS name entered, waiting for resolving\n    ADDRESS_VALID: 'address_valid', // got a valid address\n    ADDRESS_INVALID: 'address_invalid',\n}\n\nconst AddressInputContainer = () => {\n    const { web3 } = useSelector((state: RootState) => state.onboard)\n    const { checkAddressId } = useSelector(\n        (state: RootState) => state.addresses\n    )\n\n    const history = useHistory()\n    const [addressInputState, setAddressInputState] = useState(\n        addressInputStates.ADDRESS_INITIAL\n    )\n    const [input, setInput] = useState('')\n    const [address, setAddress] = useState('')\n\n    // verify address input\n    useEffect(() => {\n        const handleInput = async () => {\n            if (input.length === 0) {\n                setAddressInputState(addressInputStates.ADDRESS_INITIAL)\n            } else {\n                // check for valid input (raw address and ENS name)\n                const validAddress = /^(0x)?[0-9a-f]{40}$/i.test(input)\n                const validENSName = /.*\\.eth$/i.test(input)\n                if (validENSName && web3) {\n                    // resolve entered ENS name\n                    setAddressInputState(addressInputStates.ADDRESS_RESOLVING)\n                    try {\n                        const resolvedAddress = await web3.eth.ens.getAddress(\n                            input\n                        )\n                        console.log(`Resolved ${input} to ${resolvedAddress}`)\n                        setAddressInputState(addressInputStates.ADDRESS_VALID)\n                        setAddress(resolvedAddress)\n                    } catch (e) {\n                        console.log('Could not resolve ' + input)\n                        setAddressInputState(addressInputStates.ADDRESS_INVALID)\n                    }\n                } else if (validAddress) {\n                    setAddress(input)\n                    setAddressInputState(addressInputStates.ADDRESS_VALID)\n                } else {\n                    setAddressInputState(addressInputStates.ADDRESS_INVALID)\n                }\n            }\n        }\n        handleInput()\n    }, [input, setAddress, web3])\n\n    // keep address input field in sync with address provided by wallet or url\n    useEffect(() => {\n        if (checkAddressId) {\n            setInput(checkAddressId)\n        }\n    }, [checkAddressId])\n\n    const error = addressInputState === addressInputStates.ADDRESS_INVALID\n    const loading = addressInputState === addressInputStates.ADDRESS_RESOLVING\n    const success = addressInputState === addressInputStates.ADDRESS_VALID\n\n    const handleSubmit = () => {\n        if (success) {\n            history.push(`/address/${address}`)\n        }\n    }\n\n    return (\n        <Grid textAlign={'center'} centered columns={1}>\n            <Grid.Row>\n                <Grid.Column width={14}>\n                    <Form\n                        size={'huge'}\n                        onSubmit={handleSubmit}\n                        error={error}\n                        success={success}\n                        widths={'equal'}\n                    >\n                        <Form.Group>\n                            <AddressInput\n                                handleInput={setInput}\n                                value={input}\n                                error={error}\n                                success={success}\n                                loading={loading}\n                            />\n                        </Form.Group>\n                    </Form>\n                </Grid.Column>\n            </Grid.Row>\n        </Grid>\n    )\n}\n\nexport default AddressInputContainer\n","import React, { FunctionComponent, useEffect } from 'react'\nimport { useHistory, useParams } from 'react-router-dom'\nimport {\n    clearCheckAddressId,\n    setCheckAddressThunk,\n} from '../features/addressInput/AddressSlice'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { RootState } from '../app/rootReducer'\n\ninterface AddressExtractorProps {\n    children?: React.ReactNode\n}\n\nconst AddressExtractor: FunctionComponent = ({\n    children,\n}: AddressExtractorProps) => {\n    const dispatch = useDispatch()\n    const history = useHistory()\n    const { address: addressFromParams } = useParams()\n    const { walletAddressId: addressFromWallet } = useSelector(\n        (state: RootState) => state.addresses\n    )\n    const { web3 } = useSelector((state: RootState) => state.onboard)\n\n    useEffect(() => {\n        if (addressFromParams) {\n            if (web3) {\n                console.log(\n                    `AddressExtractor: Setting new address ${addressFromParams}`\n                )\n                dispatch(setCheckAddressThunk(addressFromParams.toLowerCase()))\n            }\n        } else if (addressFromWallet) {\n            console.log(\n                `AddressExtractor: no address in params. Falling back to walletAddress ${addressFromWallet}`\n            )\n            history.push(`/address/${addressFromWallet}`)\n        } else {\n            console.log(`AddressExtractor: Clearing checkAddressId`)\n            dispatch(clearCheckAddressId())\n        }\n    }, [addressFromParams, addressFromWallet, dispatch, history, web3])\n\n    return <React.Fragment>{children}</React.Fragment>\n}\n\nexport default AddressExtractor\n","import React, { SyntheticEvent } from 'react'\nimport { Dropdown, DropdownProps } from 'semantic-ui-react'\nimport { RootState } from '../app/rootReducer'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { setRequiredNetworkIdThunk } from 'features/onboard/onboardSlice'\n\nconst NetworkSelector = () => {\n    const options = [\n        { key: 1, text: 'Mainnet', value: 1 },\n        { key: 2, text: 'Ropsten', value: 3 },\n    ]\n\n    const dispatch = useDispatch()\n    const { requiredNetworkId, walletSelected } = useSelector(\n        (state: RootState) => state.onboard\n    )\n\n    const handleChange = (\n        event: SyntheticEvent<HTMLElement, Event>,\n        data: DropdownProps\n    ) => {\n        const { value } = data\n        console.log(`Selected value: ${value}`)\n        dispatch(setRequiredNetworkIdThunk(parseInt(`${value}`)))\n    }\n\n    const networkEntry = options.find(\n        value => value.value === requiredNetworkId\n    )\n    const text = networkEntry?.text ?? 'select network'\n\n    return (\n        <Dropdown\n            disabled={!walletSelected}\n            text={text}\n            options={options}\n            onChange={handleChange}\n            value={requiredNetworkId}\n        />\n    )\n}\n\nexport default NetworkSelector\n","import React from 'react'\nimport './App.css'\nimport { HashRouter as Router, Link, Route, Switch } from 'react-router-dom'\nimport {\n    Button,\n    Container,\n    Divider,\n    Grid,\n    Header,\n    Icon,\n    List,\n    Menu,\n    Popup,\n    Segment,\n    Message,\n} from 'semantic-ui-react'\nimport AllowanceLister from '../features/allowancesList/AllowanceLister'\nimport OnboardGate from '../features/onboard/OnboardGate'\nimport AddressInputContainer from '../features/addressInput/AddressInputContainer'\nimport pkg from '../../package.json'\nimport AddressExtractor from '../components/AddressExtractor'\nimport NetworkSelector from 'components/NetworkSelector'\n\nconst App: React.FC = () => {\n    const GrantMessage = (\n        <Message color={'yellow'} size={'big'} icon>\n            <Icon name={'hand point right'} />\n            <Message.Content>\n                <Message.Header>\n                    Gitcoins <em>$250k Matching Round</em> is now live until\n                    2020-04-07!\n                </Message.Header>\n                <div>\n                    Do you like this project? Contribute to the{' '}\n                    <strong>gitcoin grant</strong> to support the ongoing\n                    development of Token Allowance Checker!\n                </div>\n                <div>\n                    <strong>\n                        -&gt;{' '}\n                        <a\n                            target={'_blank'}\n                            rel={'noopener noreferrer'}\n                            href={\n                                'https://gitcoin.co/grants/480/token-allowance-checker?tab=description'\n                            }\n                        >\n                            Gitcoin Grant Page\n                        </a>{' '}\n                        &lt;-\n                    </strong>\n                </div>\n                <div>\n                    Direct donations are also welcome! Please use address{' '}\n                    <strong>tac.dappstar.eth</strong>.\n                </div>\n            </Message.Content>\n        </Message>\n    )\n\n    const HomepageHeading = (\n        <Segment inverted={false} textAlign='center' vertical>\n            <Menu fixed='top' inverted size='huge'>\n                <Container>\n                    <Menu.Item header as={Link} to='/'>\n                        <Icon name='home' size='big' /> Home\n                    </Menu.Item>\n                    <Menu.Item as={Link} to='/address/'>\n                        <Icon name='search' size='big' /> Check Allowances\n                    </Menu.Item>\n                    <Menu.Menu position='right'>\n                        <Menu.Item>\n                            <NetworkSelector />\n                        </Menu.Item>\n                        <Menu.Item>\n                            <a\n                                href='https://github.com/TripleSpeeder/token-allowance-checker'\n                                title='github.com/TripleSpeeder/token-allowance-checker'\n                                target='_blank'\n                                rel='noopener noreferrer'\n                            >\n                                <Icon name='github' size='big' />\n                            </a>\n                        </Menu.Item>\n                    </Menu.Menu>\n                </Container>\n            </Menu>\n            <Container\n                text\n                style={{\n                    marginTop: '4em',\n                    marginBottom: '2em',\n                }}\n            >\n                <Header\n                    as='h1'\n                    inverted={false}\n                    style={{\n                        fontSize: '3em',\n                        marginTop: '0.5em',\n                    }}\n                >\n                    Token Allowance Checker\n                    <Header.Subheader>\n                        powered by{' '}\n                        <a\n                            href='https://www.dfuse.io/'\n                            rel='noopener noreferrer'\n                            target='_blank'\n                        >\n                            dfuse\n                        </a>\n                    </Header.Subheader>\n                </Header>\n            </Container>\n            <Container textAlign={'center'}>{GrantMessage}</Container>\n        </Segment>\n    )\n\n    return (\n        <Router>\n            {HomepageHeading}\n            <Switch>\n                <Route path={['/address/:address', '/address']}>\n                    <Container>\n                        <OnboardGate>\n                            <AddressExtractor>\n                                <Segment basic padded>\n                                    <AddressInputContainer />\n                                </Segment>\n                                <AllowanceLister />\n                            </AddressExtractor>\n                        </OnboardGate>\n                    </Container>\n                </Route>\n                <Route path='/'>\n                    <Segment basic vertical style={{ paddingTop: '4em' }}>\n                        <Grid container stackable verticalAlign='top'>\n                            <Grid.Row>\n                                <Grid.Column width={8}>\n                                    <Header as='h3' style={{ fontSize: '2em' }}>\n                                        Do you actually know who can spend your\n                                        tokens?\n                                    </Header>\n                                    <p style={{ fontSize: '1.33em' }}>\n                                        <em>Token Allowance Checker</em> helps\n                                        you keep track of which contracts you\n                                        have approved to spend your tokens.\n                                    </p>\n                                    <Header as='h3' style={{ fontSize: '2em' }}>\n                                        Control your approvals\n                                    </Header>\n                                    <p style={{ fontSize: '1.33em' }}>\n                                        <em>Token Allowance Checker</em> will\n                                        show you all approvals for\n                                        ERC20-compliant tokens, and the option\n                                        to change the approved amount - or\n                                        completely zero it.\n                                    </p>\n                                </Grid.Column>\n                                <Grid.Column floated='right' width={7}>\n                                    <Header as='h3' style={{ fontSize: '2em' }}>\n                                        The unlimited approval problem\n                                    </Header>\n                                    <p style={{ fontSize: '1.33em' }}>\n                                        Many DApps have the habit of requiring\n                                        you to approve effectively unlimited\n                                        amount of tokens. This helps improving\n                                        the user experience, as you only have to\n                                        sign off an approval once and it will be\n                                        enough for all future transactions.\n                                    </p>\n                                    <p style={{ fontSize: '1.33em' }}>\n                                        However this also means that the DApp\n                                        (or the person/entity controlling it)\n                                        can at any time transfer{' '}\n                                        <em>all of your tokens</em>, without\n                                        requiring any further approval.\n                                    </p>\n                                    <p style={{ fontSize: '1.33em' }}>\n                                        In addition, there is no concept of\n                                        expiring approvals. Once approved, the\n                                        approval will remain forever. If you do\n                                        not trust a DApp or its operators\n                                        anymore, there is usually no easy way to\n                                        remove the approval.\n                                    </p>\n                                </Grid.Column>\n                            </Grid.Row>\n                        </Grid>\n                    </Segment>\n                    <Segment basic textAlign='center'>\n                        <Button primary as={Link} to='/address/' size='massive'>\n                            Check Allowances\n                            <Icon name='arrow right' />\n                        </Button>\n                    </Segment>\n                </Route>\n            </Switch>\n            <Segment basic>\n                <Divider />\n                <Container textAlign='center'>\n                    <span style={{ fontSize: '1em', float: 'right' }}>\n                        <Icon name='copyright outline' /> Michael Bauer\n                    </span>\n                    <List horizontal>\n                        <List.Item\n                            as='a'\n                            href='https://twitter.com/TripleSpeeder'\n                            target='_blank'\n                        >\n                            <Popup\n                                content='@triplespeeder'\n                                trigger={<Icon size='big' name='twitter' />}\n                            />\n                        </List.Item>\n                        <List.Item\n                            as='a'\n                            href='https://t.me/triplespeeder'\n                            target='_blank'\n                        >\n                            <Popup\n                                content='@triplespeeder'\n                                trigger={<Icon size='big' name='telegram' />}\n                            />\n                        </List.Item>\n                        <List.Item as='a' href='mailto:michael@m-bauer.org'>\n                            <Popup\n                                content='michael@m-bauer.org'\n                                trigger={\n                                    <Icon size='big' name='mail outline' />\n                                }\n                            />\n                        </List.Item>\n                        <List.Item\n                            as='a'\n                            href='https://github.com/TripleSpeeder'\n                            target='_blank'\n                        >\n                            <Popup\n                                content='github.com/TripleSpeeder'\n                                trigger={<Icon size='big' name='github' />}\n                            />\n                        </List.Item>\n                        <List.Item\n                            as='a'\n                            href='https://www.reddit.com/u/TripleSpeeder'\n                            target='_blank'\n                        >\n                            <Popup\n                                content='u/TripleSpeeder'\n                                trigger={<Icon size='big' name='reddit' />}\n                            />\n                        </List.Item>\n                    </List>\n                    <span style={{ fontSize: '1em', float: 'left' }}>\n                        {pkg.version}\n                    </span>\n                </Container>\n            </Segment>\n        </Router>\n    )\n}\n\nexport default App\n","import { combineReducers } from '@reduxjs/toolkit'\nimport onboardReducer from 'features/onboard/onboardSlice'\nimport addressesReducer from 'features/addressInput/AddressSlice'\nimport tokenContractReducer from 'features/tokenContracts/tokenContractsSlice'\nimport allowancesReducer from 'features/allowancesList/AllowancesListSlice'\nimport balancesReducer from 'features/balances/BalancesSlice'\nimport editAllowanceReducer from 'features/editAllowance/EditAllowanceSlice'\nimport transactionTrackerReducer from 'features/transactionTracker/TransactionTrackerSlice'\n\nconst rootReducer = combineReducers({\n    onboard: onboardReducer,\n    addresses: addressesReducer,\n    tokenContracts: tokenContractReducer,\n    allowances: allowancesReducer,\n    balances: balancesReducer,\n    editAllowance: editAllowanceReducer,\n    transactions: transactionTrackerReducer,\n})\n\nexport type RootState = ReturnType<typeof rootReducer>\n\nexport default rootReducer\n","import { configureStore, Action, getDefaultMiddleware } from '@reduxjs/toolkit'\nimport { ThunkAction } from 'redux-thunk'\nimport rootReducer, { RootState } from './rootReducer'\nimport {\n    setOnboardAPI,\n    setWeb3Instance,\n} from '../features/onboard/onboardSlice'\nimport { addContract } from 'features/tokenContracts/tokenContractsSlice'\nimport { setAllowanceValue } from 'features/allowancesList/AllowancesListSlice'\nimport { setBalanceValue, addBalance } from 'features/balances/BalancesSlice'\n\nconst customizedMiddleware = getDefaultMiddleware({\n    serializableCheck: {\n        ignoredActions: [\n            setOnboardAPI.type,\n            setWeb3Instance.type,\n            addContract.type,\n            setAllowanceValue.type,\n            addBalance.type,\n            setBalanceValue.type,\n        ],\n        ignoredPaths: [\n            'onboard.web3',\n            'onboard.onboardAPI',\n            'tokenContracts.contractsById',\n            'allowances.allowanceValuesById',\n            'balances.balancesById',\n        ],\n    },\n    immutableCheck: {\n        ignore: [\n            'onboard.web3',\n            'onboard.onboardAPI',\n            'tokenContracts.contractsById',\n        ],\n    },\n})\n\nconst store = configureStore({\n    reducer: rootReducer,\n    middleware: customizedMiddleware,\n})\n\nif (process.env.NODE_ENV === 'development' && module.hot) {\n    module.hot.accept('./rootReducer', () => {\n        const newRootReducer = require('./rootReducer').default\n        store.replaceReducer(newRootReducer)\n    })\n}\n\nexport type AppDispatch = typeof store.dispatch\nexport type AppThunk = ThunkAction<void, RootState, unknown, Action<string>>\n\nexport default store\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport store from './app/store'\nimport './index.css'\n\nconst render = () => {\n    const App = require('./app/App').default\n    ReactDOM.render(\n        <Provider store={store}>\n            <App />\n        </Provider>,\n        document.getElementById('root')\n    )\n}\n\nrender()\n\nif (process.env.NODE_ENV === 'development' && module.hot) {\n    module.hot.accept('./app/App', render)\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { AppDispatch, AppThunk } from '../../app/store'\nimport { addContractThunk } from 'features/tokenContracts/tokenContractsSlice'\nimport {\n    addAddressThunk,\n    AddressId,\n    EthAddressPayload,\n    addAddress,\n    fetchEtherscanNameThunk,\n} from '../addressInput/AddressSlice'\nimport BN from 'bn.js'\nimport { createDfuseClient } from '@dfuse/client'\nimport {\n    TransactionId,\n    addTransaction,\n    EditAllowanceTransaction,\n} from '../transactionTracker/TransactionTrackerSlice'\nimport ERC20Data from '@openzeppelin/contracts/build/contracts/ERC20Detailed.json'\nimport ERC20Detailed from '../../contracts'\nimport { setNetworkId } from '../onboard/onboardSlice'\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst contract = require('@truffle/contract')\n\nconst topicHashApprove =\n    '0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925'\nconst eventABI = [\n    {\n        indexed: true,\n        internalType: 'address',\n        name: 'owner',\n        type: 'address',\n    },\n    {\n        indexed: true,\n        internalType: 'address',\n        name: 'spender',\n        type: 'address',\n    },\n    {\n        indexed: false,\n        internalType: 'uint256',\n        name: 'value',\n        type: 'uint256',\n    },\n]\n\nconst searchTransactions = `query ($query: String! $limit: Int64! $cursor: String) {\n      searchTransactions(\n        indexName: LOGS, \n        query: $query, \n        limit: $limit, \n        sort: DESC,\n        cursor: $cursor,\n      ) {\n        pageInfo {\n          endCursor\n        }\n        edges {\n          node {\n            hash\n            block {\n              number\n            }\n            matchingLogs {\n              data\n              topics\n              address\n            }\n          }\n        }\n      }\n    }`\n\nexport type AllowanceId = string\n\nexport interface Allowance {\n    id: AllowanceId\n    tokenContractId: AddressId\n    ownerId: AddressId\n    spenderId: AddressId\n    editTransactionId?: TransactionId\n}\n\nexport interface AllowanceValue {\n    allowanceId: AllowanceId\n    value: BN\n    state: QueryStates\n}\n\nexport enum QueryStates {\n    QUERY_STATE_INITIAL,\n    QUERY_STATE_RUNNING,\n    QUERY_STATE_ERROR,\n    QUERY_STATE_COMPLETE,\n}\n\nexport interface QueryState {\n    state: QueryStates\n    currentPage: number\n    error?: string\n}\n\ninterface AllowancesState {\n    allowancesById: Record<AllowanceId, Allowance>\n    allowanceValuesById: Record<AllowanceId, AllowanceValue>\n    allowanceIdsByOwnerId: Record<AddressId, AllowanceId[]>\n    allowanceQueryStateByOwner: Record<AddressId, QueryState>\n}\n\ninterface AllowancePayload {\n    id: AllowanceId\n    allowance: Allowance\n}\n\ninterface QueryStatePayload {\n    ownerId: AddressId\n    queryState: QueryState\n}\n\n// initial state\nconst initialState: AllowancesState = {\n    allowancesById: {},\n    allowanceValuesById: {},\n    allowanceIdsByOwnerId: {},\n    allowanceQueryStateByOwner: {},\n}\n\nconst defaultQueryStateByOwner: QueryState = {\n    currentPage: 0,\n    state: QueryStates.QUERY_STATE_INITIAL,\n}\n\nexport const buildAllowanceId = (\n    tokenContractId: AddressId,\n    ownerId: AddressId,\n    spenderId: AddressId\n) => {\n    return `${ownerId}-${tokenContractId}-${spenderId}`\n}\n\nconst allowancesSlice = createSlice({\n    name: 'Allowances',\n    initialState: initialState,\n    reducers: {\n        addAllowance: {\n            reducer(state, action: PayloadAction<AllowancePayload>) {\n                const { id, allowance } = action.payload\n                if (Object.keys(state.allowancesById).includes(id)) {\n                    // already known.\n                    return\n                }\n                state.allowancesById[id] = allowance\n                state.allowanceIdsByOwnerId[allowance.ownerId].push(\n                    allowance.id\n                )\n                state.allowanceValuesById[id] = {\n                    allowanceId: id,\n                    state: QueryStates.QUERY_STATE_INITIAL,\n                    value: new BN('-1'),\n                }\n            },\n            prepare(\n                tokenContractId: AddressId,\n                ownerId: AddressId,\n                spenderId: AddressId\n            ) {\n                const id = buildAllowanceId(tokenContractId, ownerId, spenderId)\n                return {\n                    payload: {\n                        id,\n                        allowance: {\n                            id,\n                            tokenContractId,\n                            ownerId,\n                            spenderId,\n                        },\n                    },\n                }\n            },\n        },\n        setQueryState(state, action: PayloadAction<QueryStatePayload>) {\n            const { ownerId, queryState } = action.payload\n            state.allowanceQueryStateByOwner[ownerId] = queryState\n        },\n        setAllowanceValue(state, action: PayloadAction<AllowanceValue>) {\n            const allowanceValue = action.payload\n            state.allowanceValuesById[\n                allowanceValue.allowanceId\n            ] = allowanceValue\n        },\n    },\n    extraReducers: {\n        [addAddress.type](state, action: PayloadAction<EthAddressPayload>) {\n            const { id: ownerId } = action.payload\n            if (Object.keys(state.allowanceIdsByOwnerId).includes(ownerId)) {\n                // owner already known.\n                return\n            }\n            state.allowanceIdsByOwnerId[ownerId] = []\n            state.allowanceQueryStateByOwner[ownerId] = defaultQueryStateByOwner\n        },\n        [addTransaction.type](\n            state,\n            action: PayloadAction<EditAllowanceTransaction>\n        ) {\n            const { allowanceId, transactionId } = action.payload\n            state.allowancesById[allowanceId].editTransactionId = transactionId\n        },\n        [setNetworkId.type](state, action: PayloadAction<number>) {\n            const networkId = action.payload\n            console.log(\n                `Resetting allowances due to network change to ${networkId}`\n            )\n            Object.keys(state.allowanceQueryStateByOwner).forEach(ownerId => {\n                state.allowanceQueryStateByOwner[\n                    ownerId\n                ] = defaultQueryStateByOwner\n            })\n            Object.keys(state.allowanceIdsByOwnerId).forEach(ownerId => {\n                state.allowanceIdsByOwnerId[ownerId] = []\n            })\n            state.allowanceValuesById = {}\n            state.allowancesById = {}\n        },\n    },\n})\n\nexport const {\n    addAllowance,\n    setQueryState,\n    setAllowanceValue,\n} = allowancesSlice.actions\n\nexport default allowancesSlice.reducer\n\nexport const fetchAllowanceValueThunk = (\n    allowanceId: AllowanceId\n): AppThunk => async (dispatch: AppDispatch, getState) => {\n    // indicate start of loading\n    dispatch(\n        setAllowanceValue({\n            allowanceId,\n            value: new BN('-1'),\n            state: QueryStates.QUERY_STATE_RUNNING,\n        })\n    )\n\n    const allowance = getState().allowances.allowancesById[allowanceId]\n    const owner = getState().addresses.addressesById[allowance.ownerId]\n    const spender = getState().addresses.addressesById[allowance.spenderId]\n    const tokenContract = getState().tokenContracts.contractsById[\n        allowance.tokenContractId\n    ]\n\n    try {\n        const value = await tokenContract.contractInstance.allowance(\n            owner.address,\n            spender.address\n        )\n        dispatch(\n            setAllowanceValue({\n                allowanceId,\n                value,\n                state: QueryStates.QUERY_STATE_COMPLETE,\n            })\n        )\n    } catch (error) {\n        console.log(\n            `Failed to get allowance from token ${tokenContract.addressId}`\n        )\n        dispatch(\n            setAllowanceValue({\n                allowanceId,\n                value: new BN('-1'),\n                state: QueryStates.QUERY_STATE_ERROR,\n            })\n        )\n    }\n}\n\nexport const fetchAllowancesThunk = (ownerId: AddressId): AppThunk => async (\n    dispatch,\n    getState\n) => {\n    const web3 = getState().onboard.web3\n    if (!web3) {\n        console.log(`Missing web3!`)\n        return\n    }\n    const owner = getState().addresses.addressesById[ownerId]\n    const { networkId } = getState().onboard\n\n    let currentPage = 0\n\n    // update query state to indicate start of loading\n    dispatch(\n        setQueryState({\n            ownerId,\n            queryState: {\n                state: QueryStates.QUERY_STATE_RUNNING,\n                currentPage,\n            },\n        })\n    )\n\n    // create client\n    let network\n    switch (networkId) {\n        case 3:\n            // Ropsten\n            network = 'ropsten.eth.dfuse.io'\n            break\n        case 1:\n            // main network\n            network = 'mainnet.eth.dfuse.io'\n            break\n        default:\n            console.log(`Network ${networkId} not supported by dfuse.io`)\n            dispatch(\n                setQueryState({\n                    ownerId,\n                    queryState: {\n                        state: QueryStates.QUERY_STATE_ERROR,\n                        currentPage,\n                        error: `Network ${networkId} not supported.`,\n                    },\n                })\n            )\n            return\n    }\n    const client = createDfuseClient({\n        apiKey: 'web_085aeaac9c520204b1a9dcaa357e5460',\n        network: network,\n    })\n\n    // prepare ERC20 contract\n    const erc20Contract = contract(ERC20Data)\n    erc20Contract.setProvider(web3.currentProvider)\n\n    // query dfuse API\n    let cursor = ''\n    try {\n        // search page by page until no more results are found\n        let numPageResults = 0\n        const badContracts: Array<string> = []\n        const knownContracts: Array<string> = []\n        const knownSpenders: Array<string> = []\n\n        do {\n            console.log(\n                `Getting page ${currentPage}. Last page result: ${numPageResults}.`\n            )\n            const response = await client.graphql(searchTransactions, {\n                variables: {\n                    limit: '50',\n                    query: `topic.0:${topicHashApprove} topic.1:${owner.address}`,\n                    cursor: cursor,\n                },\n            })\n            // abort if any errors reported\n            if (response.errors) {\n                throw response.errors\n            }\n\n            // get actual results\n            const edges = response.data.searchTransactions.edges || []\n            for (let edgeIndex = 0; edgeIndex < edges.length; edgeIndex++) {\n                const { node } = edges[edgeIndex]\n                for (let index = 0; index < node.matchingLogs.length; index++) {\n                    const logEntry = node.matchingLogs[index]\n                    // skip bad contracts\n                    if (badContracts.includes(logEntry.address.toLowerCase())) {\n                        continue\n                    }\n\n                    // Apparently dfuse query results based on topic sometimes return wrong topics. Double-check that the\n                    // logEntry actually is of the expected topic.\n                    if (logEntry.topics[0] !== topicHashApprove) {\n                        console.log(\n                            `Skipping log event. Topic is wrong, expected ${topicHashApprove}, got ${logEntry.topics[0]}. Transaction: ${node.hash}`\n                        )\n                        continue\n                    }\n\n                    const tokenContractAddress = logEntry.address.toLowerCase()\n\n                    if (logEntry.data === '0x') {\n                        console.log(\n                            `Detected bad contract at ${logEntry.address}: LogEntry.data is missing. Transaction: ${node.hash}.`\n                        )\n                        badContracts.push(tokenContractAddress)\n                        continue\n                    }\n\n                    let decoded\n                    try {\n                        decoded = web3.eth.abi.decodeLog(\n                            eventABI,\n                            logEntry.data,\n                            logEntry.topics.slice(1)\n                        )\n                    } catch (e) {\n                        console.log(\n                            `Detected bad contract at ${logEntry.address}: Can not decode logEntry from transaction: ${node.hash}:`\n                        )\n                        console.log(logEntry)\n                        badContracts.push(tokenContractAddress)\n                        continue\n                    }\n\n                    // check if spender is an actual address. Some contracts emit logs with spender 0x0...\n                    if (!parseInt(decoded.spender)) {\n                        console.log(\n                            `Skipping log event: Invalid spender ${decoded.spender}, contract: ${logEntry.address}`\n                        )\n                        continue\n                    }\n                    // double-check owner is correct.\n                    if (\n                        decoded.owner.toLowerCase() !==\n                        owner.address.toLowerCase()\n                    ) {\n                        console.log(\n                            `Skipping log event due to owner mismatch. Expected ${owner.address}, got ${decoded.owner}. Transaction: ${node.hash}`\n                        )\n                        continue\n                    }\n\n                    // Add tokenContract\n                    if (!knownContracts.includes(tokenContractAddress)) {\n                        // Check if the contract really implements the required ERC20 methods.\n                        let contractInstance: ERC20Detailed.ERC20DetailedInstance\n                        try {\n                            contractInstance = await erc20Contract.at(\n                                tokenContractAddress\n                            )\n                        } catch (error) {\n                            console.log(\n                                `Error instantiating contract at ${tokenContractAddress}: ${error}`\n                            )\n                            badContracts.push(tokenContractAddress)\n                            continue\n                        }\n                        try {\n                            // these are the required calls\n                            await contractInstance.totalSupply()\n                            await contractInstance.balanceOf(\n                                tokenContractAddress\n                            )\n                            await contractInstance.allowance(\n                                tokenContractAddress,\n                                tokenContractAddress\n                            )\n                            // TODO: Check if approve() method is available!\n                        } catch (error) {\n                            console.log(\n                                `Contract at ${tokenContractAddress} is not ERC20. Ignoring.`\n                            )\n                            badContracts.push(tokenContractAddress)\n                            continue\n                        }\n                        knownContracts.push(tokenContractAddress)\n                        // console.log(`Adding tokenContract ${tokenContractAddress}`)\n                        dispatch(addContractThunk(contractInstance))\n                    }\n                    // Add spender address and create allowance entry\n                    const spenderAddress = decoded.spender.toLowerCase()\n                    if (!knownSpenders.includes(spenderAddress)) {\n                        knownSpenders.push(spenderAddress)\n                        // console.log(`Adding Spender ${spenderAddress} for ${tokenContractAddress}`)\n                        dispatch(addAddressThunk(spenderAddress))\n                        // look for spender contract name on Etherscan\n                        dispatch(fetchEtherscanNameThunk(spenderAddress))\n                        // Add allowance entry\n                        dispatch(\n                            addAllowance(\n                                tokenContractAddress,\n                                ownerId,\n                                spenderAddress\n                            )\n                        )\n                    }\n                }\n            }\n            numPageResults = edges.length\n            currentPage++\n            // get start cursor for next page\n            cursor = response.data.searchTransactions.pageInfo.endCursor\n            dispatch(\n                setQueryState({\n                    ownerId,\n                    queryState: {\n                        state: QueryStates.QUERY_STATE_RUNNING,\n                        currentPage,\n                    },\n                })\n            )\n        } while (numPageResults > 0)\n\n        dispatch(\n            setQueryState({\n                ownerId,\n                queryState: {\n                    state: QueryStates.QUERY_STATE_COMPLETE,\n                    currentPage,\n                },\n            })\n        )\n    } catch (errors) {\n        console.log(errors)\n        dispatch(\n            setQueryState({\n                ownerId,\n                queryState: {\n                    state: QueryStates.QUERY_STATE_ERROR,\n                    currentPage,\n                    error: JSON.stringify(errors),\n                },\n            })\n        )\n    }\n}\n","import { AllowanceId } from '../allowancesList/AllowancesListSlice'\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit'\n\nexport enum TransactionStates {\n    INITIAL,\n    SUBMITTED,\n    CONFIRMED,\n    FAILED,\n}\n\nexport type TransactionId = string\nexport interface EditAllowanceTransaction {\n    transactionId: TransactionId\n    allowanceId: AllowanceId\n    transactionState: TransactionStates\n    transactionHash?: string\n    error?: string\n}\n\ninterface TransactionTrackerState {\n    transactionsById: Record<TransactionId, EditAllowanceTransaction>\n}\n\ninterface UpdateTransactionPayload {\n    transactionId: TransactionId\n    transactionState?: TransactionStates\n    transactionHash?: string\n    error?: string\n}\n\nconst initialState: TransactionTrackerState = {\n    transactionsById: {},\n}\n\nconst TransactionTrackerSlice = createSlice({\n    name: 'transactionTracker',\n    initialState: initialState,\n    reducers: {\n        addTransaction(state, action: PayloadAction<EditAllowanceTransaction>) {\n            const editAllowanceTransaction = action.payload\n            state.transactionsById[\n                editAllowanceTransaction.transactionId\n            ] = editAllowanceTransaction\n        },\n        updateTransaction(\n            state,\n            action: PayloadAction<UpdateTransactionPayload>\n        ) {\n            const {\n                transactionId,\n                transactionState,\n                error,\n                transactionHash,\n            } = action.payload\n            transactionState &&\n                (state.transactionsById[\n                    transactionId\n                ].transactionState = transactionState)\n            error && (state.transactionsById[transactionId].error = error)\n            transactionHash &&\n                (state.transactionsById[\n                    transactionId\n                ].transactionHash = transactionHash)\n        },\n    },\n})\n\nexport const {\n    addTransaction,\n    updateTransaction,\n} = TransactionTrackerSlice.actions\nexport default TransactionTrackerSlice.reducer\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport Onboard from 'bnc-onboard'\nimport Web3 from 'web3'\nimport { AppDispatch, AppThunk } from '../../app/store'\nimport { API, WalletInitOptions } from 'bnc-onboard/dist/src/interfaces'\nimport { AddressId, setWalletAddressThunk } from '../addressInput/AddressSlice'\n\nconst onboardApiKey = 'f4b71bf0-fe50-4eeb-bc2b-b323527ed9e6'\nconst infuraApiKey = '7f230a5ca832426796454c28577d93f2'\n\nconst wallets: Partial<WalletInitOptions>[] = [\n    { walletName: 'metamask', preferred: true },\n    { walletName: 'coinbase', preferred: true },\n    {\n        walletName: 'walletConnect',\n        infuraKey: infuraApiKey,\n        preferred: true,\n    },\n    { walletName: 'trust', preferred: true },\n    { walletName: 'dapper', preferred: true },\n    { walletName: 'authereum', preferred: true },\n    { walletName: 'opera' },\n    { walletName: 'status' },\n    { walletName: 'operaTouch' },\n    { walletName: 'torus' },\n    { walletName: 'status' },\n    {\n        walletName: 'ledger',\n        rpcUrl: `mainnet.infura.io/v3/${infuraApiKey}`,\n    },\n    {\n        walletName: 'trezor',\n        appUrl: 'https://tac.dappstar.io',\n        email: 'michael@m-bauer.org',\n        rpcUrl: `mainnet.infura.io/v3/${infuraApiKey}`,\n    },\n]\n\n// Define contents of onboard state\ninterface OnboardState {\n    onboardAPI: API | null\n    web3?: Web3\n    networkId: number\n    requiredNetworkId: number\n    walletSelected: boolean\n    prevWalletAddressId: AddressId | undefined\n}\n\nconst initialState: OnboardState = {\n    networkId: 0,\n    requiredNetworkId: 1,\n    onboardAPI: null,\n    walletSelected: false,\n    prevWalletAddressId: undefined,\n}\n\nconst onboardSlice = createSlice({\n    name: 'onboard',\n    initialState: initialState,\n    reducers: {\n        setOnboardAPI(state, action: PayloadAction<API>) {\n            state.onboardAPI = action.payload\n        },\n        setWeb3Instance(state, action: PayloadAction<Web3>) {\n            state.web3 = action.payload\n        },\n        setNetworkId(state, action: PayloadAction<number>) {\n            state.networkId = action.payload\n        },\n        setPrevWalletAddressId(state, action: PayloadAction<string>) {\n            state.prevWalletAddressId = action.payload\n        },\n        setWalletSelected(state, action: PayloadAction<boolean>) {\n            state.walletSelected = action.payload\n        },\n        setRequiredNetworkId(state, action: PayloadAction<number>) {\n            state.requiredNetworkId = action.payload\n        },\n    },\n})\n\nexport const {\n    setOnboardAPI,\n    setNetworkId,\n    setWeb3Instance,\n    setWalletSelected,\n    setPrevWalletAddressId,\n    setRequiredNetworkId,\n} = onboardSlice.actions\n\nexport default onboardSlice.reducer\n\nexport const checkWallet = (): AppThunk => async (\n    dispatch: AppDispatch,\n    getState\n) => {\n    console.log(`checking wallet...`)\n    const onboardAPI = getState().onboard.onboardAPI\n    if (onboardAPI) {\n        const result = await onboardAPI.walletCheck()\n        console.log(`walletCheck result: ${result}`)\n    } else {\n        console.log(`dispatched checkWallet() without initialization...`)\n    }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const selectWallet = (history: any): AppThunk => async (\n    dispatch: AppDispatch,\n    getState\n) => {\n    console.log(`Selecting wallet...`)\n    const onboardAPI = getState().onboard.onboardAPI\n    if (onboardAPI) {\n        const result = await onboardAPI.walletSelect()\n        dispatch(setWalletSelected(result))\n        if (!result) {\n            // send user back to home page\n            history.push('/')\n        } else {\n            // to get access to account\n            dispatch(checkWallet())\n        }\n    } else {\n        console.log(`dispatched selectWallet() without initialization...`)\n    }\n}\n\nexport const setRequiredNetworkIdThunk = (networkId: number): AppThunk => (\n    dispatch: AppDispatch,\n    getState\n) => {\n    dispatch(setRequiredNetworkId(networkId))\n    const onboardAPI = getState().onboard.onboardAPI\n    if (onboardAPI) {\n        // update existing onboardAPI object\n        onboardAPI.config({ networkId: networkId })\n        // issue checkWallet to make sure user has selected expected network in e.g. Metamask\n        dispatch(checkWallet())\n    } else {\n        // onboardAPI not yet initialized\n    }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const initialize = (history: any): AppThunk => async (\n    dispatch: AppDispatch,\n    getState\n) => {\n    const requiredNetworkId = getState().onboard.requiredNetworkId\n    console.log(`Initializing OnBoard.js for networkId ${requiredNetworkId}...`)\n    const onboard = Onboard({\n        dappId: onboardApiKey,\n        networkId: requiredNetworkId,\n        subscriptions: {\n            wallet: wallet => {\n                dispatch(setWeb3Instance(new Web3(wallet.provider)))\n            },\n            address: address => {\n                console.log(`Wallet address changed to ${address}!`)\n                dispatch(setWalletAddressThunk(address))\n                const { prevWalletAddressId } = getState().onboard\n                //  Only trigger history push when user changed the wallet address\n                if (\n                    prevWalletAddressId &&\n                    prevWalletAddressId !== address.toLowerCase()\n                ) {\n                    console.log(\n                        `Pushing ${address}. Prev walletId: ${prevWalletAddressId}`\n                    )\n                    history.push(`/address/${address}`)\n                }\n                dispatch(setPrevWalletAddressId(address.toLowerCase()))\n            },\n            network: networkId => {\n                const prevNetworkId = getState().onboard.networkId\n                if (prevNetworkId !== 0 && prevNetworkId !== networkId) {\n                    console.log(\n                        `Switching network from ${prevNetworkId} to ${networkId}`\n                    )\n                    // trigger checkWallet to make sure user stays on required network\n                    // dispatch(checkWallet())\n                }\n                dispatch(setRequiredNetworkIdThunk(networkId))\n                dispatch(setNetworkId(networkId))\n            },\n            balance: () => {\n                /* do nothing*/\n            },\n        },\n        walletSelect: {\n            heading: '',\n            description: '',\n            // eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n            // @ts-ignore\n            wallets: wallets,\n        },\n    })\n    dispatch(setOnboardAPI(onboard))\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport namehash from 'eth-ens-namehash'\nimport { AppDispatch, AppThunk } from '../../app/store'\n\nexport enum ResolvingStates {\n    Initial,\n    Resolving,\n    Resolved,\n}\nexport type AddressId = string\n\n// the plain address data without internal info like ID or resolving state\nexport interface EthAddress {\n    address: string // the actual address\n    ensName?: string // ensName for this address\n    resolvingState: ResolvingStates\n    esContractName?: string\n}\n\nexport interface EthAddressPayload {\n    id: AddressId\n    ethAddress: EthAddress\n}\n\ninterface EtherscanContractNamePayload {\n    id: AddressId\n    esContractName: string\n}\n\ninterface ResolvingStatePayload {\n    id: AddressId\n    resolvingState: ResolvingStates\n}\n\ninterface ENSNamePayload {\n    id: AddressId\n    ensName: string\n}\n\n// The state contains all known EthAddressess, indexed by the address id\ninterface EthAddressesState {\n    addressesById: Record<AddressId, EthAddress>\n    checkAddressId: AddressId | undefined\n    walletAddressId: AddressId | undefined\n}\n\n// initial state: contains 3 test entries\nconst initialState: EthAddressesState = {\n    addressesById: {},\n    walletAddressId: undefined,\n    checkAddressId: undefined,\n}\n\nconst addressSlice = createSlice({\n    name: 'ethAddresses',\n    initialState: initialState,\n    reducers: {\n        addAddress: {\n            reducer(state, action: PayloadAction<EthAddressPayload>) {\n                const { id, ethAddress } = action.payload\n                state.addressesById[id] = ethAddress\n            },\n            prepare(address: string) {\n                return {\n                    payload: {\n                        id: address,\n                        ethAddress: {\n                            address: address,\n                            resolvingState: ResolvingStates.Initial,\n                        },\n                    },\n                }\n            },\n        },\n        setResolvingState(state, action: PayloadAction<ResolvingStatePayload>) {\n            const { id, resolvingState } = action.payload\n            state.addressesById[id].resolvingState = resolvingState\n        },\n        setENSName(state, action: PayloadAction<ENSNamePayload>) {\n            const { id, ensName } = action.payload\n            state.addressesById[id].ensName = ensName\n        },\n        setCheckAddressId(state, action: PayloadAction<AddressId>) {\n            state.checkAddressId = action.payload\n        },\n        clearCheckAddressId(state) {\n            state.checkAddressId = undefined\n        },\n        setWalletAddressId(state, action: PayloadAction<AddressId>) {\n            state.walletAddressId = action.payload\n        },\n        setEtherscanContractName(\n            state,\n            action: PayloadAction<EtherscanContractNamePayload>\n        ) {\n            const { id, esContractName } = action.payload\n            state.addressesById[id].esContractName = esContractName\n        },\n    },\n})\n\nexport const {\n    addAddress,\n    setResolvingState,\n    setENSName,\n    setCheckAddressId,\n    clearCheckAddressId,\n    setWalletAddressId,\n    setEtherscanContractName,\n} = addressSlice.actions\n\nexport default addressSlice.reducer\n\nexport const fetchEtherscanNameThunk = (\n    addressId: AddressId\n): AppThunk => async (dispatch: AppDispatch, getState) => {\n    const { networkId } = getState().onboard\n    const apiKey = 'THS8KWYM6KZ8WBP3DXKUDR7UKCRB8YIRGH'\n    let apiHost\n    switch (networkId) {\n        case 1:\n            // mainnet\n            apiHost = 'api.etherscan.io'\n            break\n        case 3:\n            // Ropsten\n            apiHost = 'api-ropsten.etherscan.io'\n            break\n        default:\n            throw Error(`Network ${networkId} not supported`)\n    }\n    const requestUrl = `https://${apiHost}/api?module=contract&action=getsourcecode&address=${addressId}&apikey=${apiKey}`\n    const response = await fetch(requestUrl)\n    const data = await response.json()\n    if (data.message === 'OK') {\n        const contractName: string = data?.result[0]?.ContractName\n        if (contractName?.length) {\n            dispatch(\n                setEtherscanContractName({\n                    id: addressId,\n                    esContractName: contractName,\n                })\n            )\n        }\n    } else {\n        console.log(\n            `Got message ${data.message} fetching contract data from Etherscan API.`\n        )\n    }\n}\n\nexport const addAddressThunk = (address: string): AppThunk => async (\n    dispatch: AppDispatch,\n    getState\n) => {\n    address = address.toLowerCase()\n    // prevent duplicates\n    if (Object.keys(getState().addresses.addressesById).includes(address)) {\n        return\n    }\n    const web3 = getState().onboard.web3\n    if (web3) {\n        // first add address\n        dispatch(addAddress(address))\n\n        // indicate starting resolving process\n        dispatch(\n            setResolvingState({\n                id: address,\n                resolvingState: ResolvingStates.Resolving,\n            })\n        )\n\n        // look for reverse ENS name\n        try {\n            const reverseENSLookupName = address.substr(2) + '.addr.reverse'\n            const ResolverContract = await web3.eth.ens.resolver(\n                reverseENSLookupName\n            )\n            const reverseENS = await ResolverContract.methods\n                .name(namehash.hash(reverseENSLookupName))\n                .call()\n            console.log(`Got reverseENS: ${reverseENS}`)\n            dispatch(\n                setENSName({\n                    id: address,\n                    ensName: reverseENS,\n                })\n            )\n        } catch (error) {\n            // console.log(`Error getting reverse ENS: ${error}`)\n        }\n\n        dispatch(\n            setResolvingState({\n                id: address,\n                resolvingState: ResolvingStates.Resolved,\n            })\n        )\n    } else {\n        console.log(`AddressSlice: Can not add ${address} - web3 still missing`)\n    }\n}\n\nexport const setCheckAddressThunk = (checkAddress: string): AppThunk => async (\n    dispatch: AppDispatch\n) => {\n    if (checkAddress.endsWith('.eth')) {\n        // TODO: handle ENS names\n        console.log(`ENS name not yet handled: ${checkAddress}`)\n        return\n    }\n    dispatch(addAddressThunk(checkAddress))\n    dispatch(setCheckAddressId(checkAddress))\n}\n\nexport const setWalletAddressThunk = (\n    walletAddress: string\n): AppThunk => async (dispatch: AppDispatch) => {\n    console.log(`Got new address from wallet: ${walletAddress}`)\n    dispatch(addAddressThunk(walletAddress))\n    dispatch(setWalletAddressId(walletAddress))\n}\n","interface ContractMetadata {\n    name: string\n    symbol: string\n}\ninterface ContractInfo {\n    [key: string]: ContractMetadata\n}\n\nexport interface WellKnownContracts {\n    [key: number]: ContractInfo\n}\n\nexport const wellKnownContracts: WellKnownContracts = {\n    // main network\n    1: {\n        '0x89d24a6b4ccb1b6faa2625fe562bdd9a23260359': {\n            name: 'Sai Stablecoin',\n            symbol: 'SAI',\n        },\n        '0x9f8f72aa9304c8b593d555f12ef6589cc3a579a2': {\n            name: 'Maker Token',\n            symbol: 'MKR',\n        },\n        '0xecf8f87f810ecf450940c9f60066b4a7a501d6a7': {\n            name: 'Old Wrapped Ether',\n            symbol: 'WETH',\n        },\n        '0xc66ea802717bfb9833400264dd12c2bceaa34a6d': {\n            name: 'Old Maker Token',\n            symbol: 'MKR',\n        },\n        '0xbb9bc244d798123fde783fcc1c72d3bb8c189413': {\n            name: 'TheDAO Token',\n            symbol: 'TheDAO',\n        },\n        '0x86fa049857e0209aa7d9e616f7eb3b3b78ecfdb0': {\n            name: 'EOS: Old Token',\n            symbol: 'EOS',\n        },\n    },\n    // Ropsten\n    3: {},\n}\n\nexport default wellKnownContracts\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { v4 as uuidv4 } from 'uuid'\nimport { AppThunk } from '../../app/store'\nimport wellKnownContracts from '../../utils/wellKnownContracts'\nimport { ERC20DetailedInstance } from '../../contracts'\nimport ERC20Detailed from 'contracts'\nimport { AddressId, addAddressThunk } from 'features/addressInput/AddressSlice'\nimport {\n    AllowanceId,\n    fetchAllowanceValueThunk,\n} from '../allowancesList/AllowancesListSlice'\nimport {\n    addTransaction,\n    TransactionStates,\n    updateTransaction,\n} from 'features/transactionTracker/TransactionTrackerSlice'\nimport BN from 'bn.js'\nimport { setNetworkId } from '../onboard/onboardSlice'\n\ninterface TokenContract {\n    addressId: AddressId\n    name: string\n    symbol: string\n    decimals: BN\n    totalSupply: BN\n    contractInstance: ERC20DetailedInstance\n}\ninterface TokenContractPayload {\n    id: AddressId\n    tokenContract: TokenContract\n}\n\ninterface TokenContractsState {\n    contractsById: Record<AddressId, TokenContract>\n}\n\nconst initialState: TokenContractsState = {\n    contractsById: {},\n}\n\nconst tokenContractSlice = createSlice({\n    name: 'tokenContracts',\n    initialState: initialState,\n    reducers: {\n        addContract: {\n            reducer(state, action: PayloadAction<TokenContractPayload>) {\n                const { id, tokenContract } = action.payload\n                state.contractsById[id] = tokenContract\n            },\n            prepare(\n                contractAddress: AddressId,\n                tokenName: string,\n                tokenSymbol: string,\n                decimals: BN,\n                totalSupply: BN,\n                contractInstance: ERC20Detailed.ERC20DetailedInstance\n            ) {\n                return {\n                    payload: {\n                        id: contractAddress,\n                        tokenContract: {\n                            addressId: contractAddress,\n                            name: tokenName,\n                            symbol: tokenSymbol,\n                            decimals,\n                            totalSupply,\n                            contractInstance,\n                        },\n                    },\n                }\n            },\n        },\n    },\n    extraReducers: {\n        [setNetworkId.type](state, action: PayloadAction<number>) {\n            const networkId = action.payload\n            console.log(\n                `Clearing token contracts due to network change to ${networkId}`\n            )\n            state.contractsById = {}\n        },\n    },\n})\n\nexport const { addContract } = tokenContractSlice.actions\n\nexport default tokenContractSlice.reducer\n\nexport const addContractThunk = (\n    contractInstance: ERC20Detailed.ERC20DetailedInstance\n): AppThunk => async (dispatch, getState) => {\n    const { networkId } = getState().onboard\n    const contractAddress = contractInstance.address.toLowerCase()\n    let tokenName = ''\n    let tokenSymbol = ''\n    // Some contracts like MKR and SAI do not implement the correct ERC20 name and symbol.\n    // Get their data from hardocded fallback\n    if (Object.keys(wellKnownContracts[networkId]).includes(contractAddress)) {\n        tokenName = wellKnownContracts[networkId][contractAddress].name\n        tokenSymbol = wellKnownContracts[networkId][contractAddress].symbol\n    } else {\n        try {\n            tokenName = await contractInstance.name()\n            tokenSymbol = await contractInstance.symbol()\n        } catch (error) {\n            // Most likely token contract does not implement the name() method. Ignore error.\n            console.log(`Failed to get name/symbol of contract at ${contractAddress}. Please raise\n                an issue to add this token at https://github.com/TripleSpeeder/token-allowance-checker/issues!`)\n        }\n    }\n    let decimals = new BN('0')\n    try {\n        decimals = await contractInstance.decimals()\n    } catch (error) {\n        console.log(\n            `Contract at ${contractAddress} does not provide decimals(). Assuming 0.`\n        )\n    }\n    let totalSupply\n    try {\n        totalSupply = await contractInstance.totalSupply()\n    } catch (error) {\n        console.log(\n            `Failed to call totalSupply() at ${contractAddress}. Ignoring contract.`\n        )\n        return\n    }\n    dispatch(addAddressThunk(contractAddress))\n    dispatch(\n        addContract(\n            contractAddress,\n            tokenName,\n            tokenSymbol,\n            decimals,\n            totalSupply,\n            contractInstance\n        )\n    )\n}\n\nexport const setAllowanceThunk = (\n    tokenContractId: AddressId,\n    spender: AddressId,\n    allowance: BN,\n    allowanceId: AllowanceId\n): AppThunk => async (dispatch, getState) => {\n    console.log(\n        `Setting new allowance ${allowance.toString()} for tokenContractId ${tokenContractId}`\n    )\n    const { contractInstance } = getState().tokenContracts.contractsById[\n        tokenContractId\n    ]\n    const { walletAddressId } = getState().addresses\n    const transactionId: string = uuidv4()\n    dispatch(\n        addTransaction({\n            transactionId,\n            allowanceId,\n            transactionState: TransactionStates.SUBMITTED,\n        })\n    )\n    try {\n        const result = await contractInstance.approve(\n            spender,\n            allowance.toString(),\n            {\n                from: walletAddressId,\n            }\n        )\n        console.log(`transaction confirmed: ${result.tx}. Reloading allowance.`)\n        dispatch(\n            updateTransaction({\n                transactionId,\n                transactionState: TransactionStates.CONFIRMED,\n                transactionHash: result.tx,\n            })\n        )\n        dispatch(fetchAllowanceValueThunk(allowanceId))\n    } catch (e) {\n        console.log(`Error while approving: ${e.message}`)\n        dispatch(\n            updateTransaction({\n                transactionId,\n                transactionState: TransactionStates.FAILED,\n                error: e.message,\n            })\n        )\n    }\n}\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 832;","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { AddressId } from 'features/addressInput/AddressSlice'\nimport { QueryStates } from '../allowancesList/AllowancesListSlice'\nimport BN from 'bn.js'\nimport { AppDispatch, AppThunk } from '../../app/store'\n\nexport type BalanceId = string\n\ninterface Balance {\n    id: BalanceId\n    addressId: AddressId\n    tokenContractId: AddressId\n    queryState: QueryStates\n    value: BN\n}\n\ninterface BalancePayload {\n    id: BalanceId\n    balance: Balance\n}\n\ninterface ValuePayload {\n    id: BalanceId\n    value: BN\n}\n\ninterface QueryStatePayload {\n    id: BalanceId\n    queryState: QueryStates\n}\n\ninterface BalancesState {\n    balancesById: Record<BalanceId, Balance>\n}\n\nconst initialState: BalancesState = {\n    balancesById: {},\n}\n\nconst balancesSlice = createSlice({\n    name: 'balances',\n    initialState: initialState,\n    reducers: {\n        addBalance: {\n            reducer(state, action: PayloadAction<BalancePayload>) {\n                const { id, balance } = action.payload\n                state.balancesById[id] = balance\n            },\n            prepare(\n                id: BalanceId,\n                addressId: AddressId,\n                tokenContractId: AddressId\n            ) {\n                return {\n                    payload: {\n                        id: id,\n                        balance: {\n                            id,\n                            addressId,\n                            tokenContractId,\n                            queryState: QueryStates.QUERY_STATE_INITIAL,\n                            value: new BN('-1'),\n                        },\n                    },\n                }\n            },\n        },\n        setBalanceValue(state, action: PayloadAction<ValuePayload>) {\n            const { id, value } = action.payload\n            state.balancesById[id].value = value\n        },\n        setBalanceQuerystate(state, action: PayloadAction<QueryStatePayload>) {\n            const { id, queryState } = action.payload\n            state.balancesById[id].queryState = queryState\n        },\n    },\n})\n\nexport const buildBalanceId = (\n    addressId: AddressId,\n    tokenContractId: AddressId\n) => {\n    return `${addressId}-${tokenContractId}`\n}\n\nexport const {\n    addBalance,\n    setBalanceValue,\n    setBalanceQuerystate,\n} = balancesSlice.actions\n\n/*\n Create a new balance entry and fetch balance\n */\nexport const addBalanceThunk = (\n    addressId: AddressId,\n    tokenContractId: AddressId\n): AppThunk => async (dispatch: AppDispatch, getState) => {\n    const balanceId = buildBalanceId(addressId, tokenContractId)\n    dispatch(addBalance(balanceId, addressId, tokenContractId))\n    dispatch(\n        setBalanceQuerystate({\n            id: balanceId,\n            queryState: QueryStates.QUERY_STATE_RUNNING,\n        })\n    )\n    const tokenContract = getState().tokenContracts.contractsById[\n        tokenContractId\n    ]\n    const address = getState().addresses.addressesById[addressId]\n    try {\n        const balance = await tokenContract.contractInstance.balanceOf(\n            address.address\n        )\n        dispatch(\n            setBalanceValue({\n                id: balanceId,\n                value: balance,\n            })\n        )\n        dispatch(\n            setBalanceQuerystate({\n                id: balanceId,\n                queryState: QueryStates.QUERY_STATE_COMPLETE,\n            })\n        )\n    } catch (error) {\n        console.log(`Error getting balance: ${error}`)\n        dispatch(\n            setBalanceQuerystate({\n                id: balanceId,\n                queryState: QueryStates.QUERY_STATE_ERROR,\n            })\n        )\n    }\n}\nexport default balancesSlice.reducer\n"],"sourceRoot":""}