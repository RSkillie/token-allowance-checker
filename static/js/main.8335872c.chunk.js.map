{"version":3,"sources":["features/editAllowance/EditAllowanceSlice.ts","components/AddressDisplay.tsx","features/allowancesList/TokenAllowanceItemActions.tsx","features/allowancesList/TokenAllowanceItem.tsx","features/allowancesList/TokenAllowancesItem.tsx","components/DisplayMessage.tsx","features/allowancesList/AllowancesListContainer.tsx","features/allowancesListFilter/AllowancesListFilter.tsx","features/editAllowance/EditAllowanceForm.tsx","features/editAllowance/EditAllowanceFormContainer.tsx","utils/erc20-decimals-conversion.ts","features/allowancesList/AllowanceLister.tsx","features/onboard/OnboardGate.tsx","features/addressInput/AddressInput.tsx","features/addressInput/AddressInputContainer.tsx","components/AddressExtractor.tsx","components/NetworkSelector.tsx","features/onboard/WalletConfigModal.tsx","features/onboard/walletSelector.tsx","features/onboard/WalletSelectorContainer.tsx","features/menu/MainMenu.tsx","app/ResponsiveApp.tsx","app/Footer.tsx","app/App.tsx","app/rootReducer.ts","app/store.ts","index.tsx","api/apikeys.ts","features/responsiveLayout/responsiveSlice.ts","features/allowancesList/AllowancesListSlice.ts","api/dfuse/dfuseio.ts","utils/contractVerifier.ts","utils/logEventVerifier.ts","features/addressInput/AddressSlice.ts","features/onboard/wallets/imToken.ts","features/onboard/onboardSlice.ts","features/transactionTracker/TransactionTrackerSlice.ts","icons/gitcoinIcon.png","../node_modules/web3-eth-accounts/src sync","utils/wellKnownContracts.ts","features/tokenContracts/tokenContractsSlice.ts","features/balances/BalancesSlice.tsx"],"names":["editAllowanceSlice","createSlice","name","initialState","showModal","editAllowanceId","reducers","openEditAllowanceModal","state","action","allowanceId","payload","closeEditAllowanceModal","actions","AddressDisplay","contractName","etherscanUrl","ethAddress","mobile","networkId","inline","address","ensName","esContractName","setClipboard","content","navigator","clipboard","writeText","then","console","log","popupTrigger","shortAddress","substr","contractNameString","ensNameString","popupContent","Item","Content","Header","Extra","Icon","link","circular","onClick","window","open","Popup","on","trigger","copyPopup","mouseEnterDelay","size","etherscanPopup","TokenAllowanceItemActions","transactionContent","actionContent","dispatch","useDispatch","allowance","useSelector","allowances","allowancesById","transaction","editTransactionId","transactions","transactionsById","undefined","walletAddressId","addresses","icon","msg","header","transactionState","TransactionStates","CONFIRMED","transactionHash","FAILED","color","error","SUBMITTED","loading","INITIAL","editEnabled","ownerId","Button","compact","primary","disabled","event","preventDefault","unlimitedAllowance","BN","pow","subn","TokenAllowanceItem","allowanceElement","criticalAllowance","positiveAllowance","allowanceValue","allowanceValuesById","tokenContract","tokenContracts","contractsById","tokenContractId","spenderAddress","addressesById","spenderId","respsonsive","onboard","useEffect","QueryStates","QUERY_STATE_INITIAL","fetchAllowanceValueThunk","QUERY_STATE_RUNNING","Loader","active","QUERY_STATE_COMPLETE","value","isZero","eq","gte","totalSupply","roundToDecimals","rounded","bnToDisplayString","decimals","QUERY_STATE_ERROR","allowanceCell","lastChangeCell","lastChangeString","Date","lastChangedTimestamp","toDateString","addressCell","Table","Cell","negative","positive","textAlign","Divider","fitted","collapsing","actionCell","Row","key","TokenAllowancesItem","tokenId","allowanceIds","tokenAddress","ownerBalance","balanceId","buildBalanceId","balances","balancesById","useState","collapsed","setCollapsed","contractInstance","addBalanceThunk","Segment","raised","Placeholder","Line","Paragraph","tokenDisplayString","queryState","bn2DisplayString","symbol","headline","rows","forEach","push","table","basic","celled","unstackable","HeaderCell","style","paddingBottom","Body","toggleButton","float","Subheader","selectable","DisplayMessage","info","warning","success","body","padded","withIcon","Message","AllowancesListContainer","message","showZeroAllowances","addressFilter","allowancesByTokenId","allowanceIdsByOwnerId","filter","filterString","toLowerCase","tokenContractAddress","addressId","includes","warn","map","groupedAllowances","_","groupBy","sortBy","allowanceArray","allowanceQueryStateByOwner","ownerAddress","items","tokenAllowances","id","currentPage","length","AllowancesListFilter","toggleShowZeroAllowances","addressFilterValue","handleAddressFilterChange","refresh","clearAddressFilter","Grid","verticalAlign","centered","columns","divided","Column","width","Checkbox","toggle","label","checked","onChange","title","Input","placeholder","fluid","stackable","EditAllowanceForm","inputElem","tokenName","handleChange","tokenSymbol","spender","currentAllowance","newAllowance","handleClose","handleSubmit","spenderAddressDisplay","type","tag","labelPosition","Modal","onClose","List","Form","onSubmit","Field","required","EditAllowanceFormContainer","editAllowance","setNewAllowance","convertAllowanceToDisplaystring","useCallback","e","target","parseFloat","newValue","base","substring","Error","toString","comps","split","whole","fraction","decimalsNumber","toNumber","wholeBN","fractionBN","wei","mul","add","neg","toBaseUnit","setAllowanceThunk","AllowanceLister","checkAddressId","showEditAllowanceModal","setShowZeroAllowances","setAddressFilter","document","fetchAllowancesThunk","handleRefreshClick","loadAllowances","Fragment","OnboardGate","children","history","useHistory","onboardAPI","wallet","selectWallet","initialize","AddressInput","handleInput","addressInputStates","AddressInputContainer","web3","checkAddress","addressInputState","setAddressInputState","input","setInput","setAddressId","setEnsName","validInput","addAddressThunk","a","validAddress","test","eth","ens","getAddress","resolvedAddress","widths","Group","AddressExtractor","addressFromParams","useParams","checkAddressState","prevAddressFromParams","setPrevAddressFromParams","setAddressFromParamsThunk","redirectToAddress","CheckAddressStates","Invalid","Resolving","NetworkSelector","options","text","requiredNetworkId","networkEntry","find","Dropdown","as","data","setRequiredNetworkIdThunk","parseInt","WalletConfigModal","handleChangeWallet","handleChangeAddress","walletAddress","currentWallet","walletMsgIcon","currentAddress","msgs","Actions","WalletSelector","walletName","handleClick","gotWallet","buttonLabel","WalletSelectorContainer","showWalletConfig","setShowWalletConfig","walletAccount","accountSelect","MainMenu","Menu","fixed","inverted","Container","Link","to","padding","Image","src","height","position","href","rel","ResponsiveApp","prevMobile","setPrevMobile","showSidebar","setShowSidebar","DesktopHeading","vertical","marginTop","marginBottom","fontSize","Sidebar","Pushable","animation","onHide","visible","Pusher","Responsive","Router","fireOnMount","onUpdate","isMobile","onlyMobile","maxWidth","setMobile","Footer","horizontal","avatar","GitcoinIcon","pkg","version","App","startButton","path","container","rootReducer","combineReducers","onboardReducer","addressesReducer","tokenContractReducer","allowancesReducer","balancesReducer","editAllowanceReducer","transactionTrackerReducer","responsiveLayoutReducer","customizedMiddleware","getDefaultMiddleware","serializableCheck","ignoredActions","setOnboardAPI","setWeb3Instance","setWallet","addContract","setAllowanceValue","addBalance","setBalanceValue","ignoredPaths","immutableCheck","warnAfter","store","configureStore","reducer","middleware","require","default","ReactDOM","render","getElementById","apiKeys","dfuse","1","endpoint","apikey","3","etherscan","infura","responsiveSlice","getDfuseClient","credentials","createDfuseClient","apiKey","network","createAndVerifyERC20","erc20Contract","contractAddress","at","balanceOf","topicHashApprove","eventABI","indexed","internalType","checkLogTopic","logEntry","topics","decodeLog","decoded","abi","slice","checkDecodedData","owner","expectedOwner","contract","defaultQueryStateByOwner","allowancesSlice","addAllowance","Object","keys","prepare","timestamp","buildAllowanceId","setQueryState","extraReducers","addAddress","addTransaction","transactionId","setNetworkId","getState","ERC20Data","setProvider","currentProvider","client","cursor","numPageResults","badContracts","knownContracts","knownSpenders","graphql","variables","limit","query","response","errors","edges","searchTransactions","edgeIndex","node","block","index","matchingLogs","addContractThunk","fetchEtherscanNameThunk","pageInfo","endCursor","JSON","stringify","ResolvingStates","zeroAddress","prevWalletAddressId","Initial","addressSlice","resolvingState","setResolvingState","setENSName","setCheckAddressId","setCheckAddressState","setWalletAddressId","setEtherscanContractName","apiHost","requestUrl","fetch","json","result","ContractName","resolveAndAddENSName","Promise","resolve","reject","resolveAndAddAddress","ResolvingReverse","reverseENSLookupName","resolver","ResolverContract","methods","namehash","hash","call","reverseENS","Resolved","replace","func","endsWith","known","values","addressEntry","Valid","setWalletAddressThunk","imToken","svg","helpers","createModernProviderInterface","windowAny","provider","ethereum","correctWallet","isImToken","interface","desktop","infuraCredentials","onboardCredentials","wallets","preferred","infuraKey","rpcUrl","appUrl","email","onboardSlice","setRequiredNetworkId","checkWallet","walletCheck","walletSelect","config","Onboard","dappId","subscriptions","Web3","prevNetworkId","balance","heading","description","TransactionTrackerSlice","editAllowanceTransaction","updateTransaction","module","exports","webpackEmptyContext","req","code","wellKnownContracts","tokenContractSlice","uuidv4","approve","from","tx","balancesSlice","setBalanceQuerystate"],"mappings":"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","file":"static/js/main.8335872c.chunk.js","sourcesContent":["import { AllowanceId } from 'features/allowancesList/AllowancesListSlice'\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit'\n\ninterface EditAllowanceState {\n    showModal: boolean\n    editAllowanceId: AllowanceId\n}\n\nconst initialState: EditAllowanceState = {\n    showModal: false,\n    editAllowanceId: '',\n}\n\nconst editAllowanceSlice = createSlice({\n    name: 'editAllowance',\n    initialState: initialState,\n    reducers: {\n        openEditAllowanceModal(state, action: PayloadAction<AllowanceId>) {\n            const allowanceId = action.payload\n            state.showModal = true\n            state.editAllowanceId = allowanceId\n        },\n        closeEditAllowanceModal(state) {\n            state.showModal = false\n        },\n    },\n})\nexport const {\n    openEditAllowanceModal,\n    closeEditAllowanceModal,\n} = editAllowanceSlice.actions\nexport default editAllowanceSlice.reducer\n","import React from 'react'\nimport { Icon, Popup, Item } from 'semantic-ui-react'\nimport { EthAddress } from 'features/addressInput/AddressSlice'\n\ninterface AddressDisplayProps {\n    ethAddress: EthAddress\n    mobile: boolean\n    networkId: number\n    inline?: boolean\n}\n\nconst AddressDisplay = ({\n    ethAddress,\n    mobile,\n    networkId,\n    inline,\n}: AddressDisplayProps) => {\n    const { address, ensName, esContractName } = ethAddress\n    const setClipboard = (content: string) => {\n        navigator.clipboard.writeText(content).then(\n            function() {\n                /* clipboard successfully set */\n            },\n            function() {\n                console.log(`failed to set clipboard`)\n            }\n        )\n    }\n\n    let contractName\n    if (ensName) {\n        contractName = `${ensName}`\n    } else if (esContractName) {\n        contractName = `${esContractName}`\n    }\n\n    let etherscanUrl: string\n    switch (networkId) {\n        case 3: // Ropsten\n            etherscanUrl = `https://ropsten.etherscan.io/address/${address}`\n            break\n        case 1:\n            etherscanUrl = `https://etherscan.io/address/${address}`\n            break\n        default:\n            etherscanUrl = `https://etherscan.io/address/${address}`\n    }\n\n    if (mobile) {\n        const shortAddress =\n            address.substr(0, 6) + '...' + address.substr(-6, 6)\n        const contractNameString = esContractName && (\n            <div>\n                Contract name: <strong>{esContractName}</strong>\n            </div>\n        )\n        const ensNameString = ensName && (\n            <div>\n                ENS name: <strong>{ensName}</strong>\n            </div>\n        )\n        const popupContent = (\n            <Item>\n                <Item.Content>\n                    <Item.Header>{address}</Item.Header>\n                    <Item.Content>\n                        {contractNameString}\n                        {ensNameString}\n                    </Item.Content>\n                    <Item.Extra>\n                        <Icon\n                            link\n                            circular\n                            name={'copy outline'}\n                            onClick={() => {\n                                setClipboard(address)\n                            }}\n                        />\n                        <Icon\n                            link\n                            circular\n                            name={'external square'}\n                            onClick={() => {\n                                window.open(etherscanUrl, '_blank')\n                            }}\n                        />\n                    </Item.Extra>\n                </Item.Content>\n            </Item>\n        )\n        let popupTrigger\n        if (inline) {\n            popupTrigger = <strong>{contractName ?? shortAddress}</strong>\n        } else {\n            popupTrigger = (\n                <div>\n                    <strong>{contractName ?? shortAddress}</strong>\n                </div>\n            )\n        }\n        return (\n            <Popup on={'click'} content={popupContent} trigger={popupTrigger} />\n        )\n    } else {\n        const copyPopup = (\n            <Popup\n                mouseEnterDelay={500}\n                content={'Copy to clipboard'}\n                trigger={\n                    <Icon\n                        circular\n                        name={'copy outline'}\n                        size={'small'}\n                        onClick={() => {\n                            setClipboard(address)\n                        }}\n                    />\n                }\n            />\n        )\n        const etherscanPopup = (\n            <Popup\n                mouseEnterDelay={500}\n                content={'View on Etherscan'}\n                trigger={\n                    <Icon\n                        circular\n                        name={'external square'}\n                        size={'small'}\n                        onClick={() => {\n                            window.open(etherscanUrl, '_blank')\n                        }}\n                    />\n                }\n            />\n        )\n\n        if (contractName) {\n            if (inline) {\n                return (\n                    <>\n                        <strong>{contractName}</strong> (\n                        <small>\n                            {address}&nbsp;\n                            {copyPopup}\n                            {etherscanPopup}\n                        </small>\n                        )\n                    </>\n                )\n            } else {\n                return (\n                    <>\n                        <div>\n                            <strong>{contractName}</strong>\n                        </div>\n                        <div>\n                            <small>\n                                {address}&nbsp;\n                                {copyPopup}\n                                {etherscanPopup}\n                            </small>\n                        </div>\n                    </>\n                )\n            }\n        } else {\n            if (inline) {\n                return (\n                    <span>\n                        {address}&nbsp;\n                        {copyPopup}\n                        {etherscanPopup}\n                    </span>\n                )\n            } else {\n                return (\n                    <div>\n                        {address}&nbsp;\n                        {copyPopup}\n                        {etherscanPopup}\n                    </div>\n                )\n            }\n        }\n    }\n}\n\nexport default AddressDisplay\n","import { AllowanceId } from './AllowancesListSlice'\nimport React from 'react'\nimport { Button, Icon, Popup } from 'semantic-ui-react'\nimport { openEditAllowanceModal } from '../editAllowance/EditAllowanceSlice'\nimport { TransactionStates } from '../transactionTracker/TransactionTrackerSlice'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { RootState } from '../../app/rootReducer'\n\ninterface TokenAllowanceItemActionsProps {\n    allowanceId: AllowanceId\n}\nconst TokenAllowanceItemActions = ({\n    allowanceId,\n}: TokenAllowanceItemActionsProps) => {\n    const dispatch = useDispatch()\n    const allowance = useSelector(\n        (state: RootState) => state.allowances.allowancesById[allowanceId]\n    )\n    const transaction = useSelector((state: RootState) =>\n        allowance.editTransactionId\n            ? state.transactions.transactionsById[allowance.editTransactionId]\n            : undefined\n    )\n    const walletAddressId = useSelector(\n        (state: RootState) => state.addresses.walletAddressId\n    )\n\n    const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n        event.preventDefault()\n        dispatch(openEditAllowanceModal(allowanceId))\n    }\n\n    let transactionContent\n    if (transaction) {\n        let icon\n        let msg\n        let header\n        switch (transaction.transactionState) {\n            case TransactionStates.CONFIRMED:\n                icon = <Icon name={'check'} size={'large'} />\n                header = 'Transaction confirmed'\n                msg = `Transaction hash: ${transaction.transactionHash}`\n                break\n            case TransactionStates.FAILED:\n                icon = (\n                    <Icon\n                        name={'exclamation triangle'}\n                        color={'red'}\n                        size={'large'}\n                    />\n                )\n                header = 'Transaction failed'\n                msg = `${transaction.error}`\n                break\n            case TransactionStates.SUBMITTED:\n                icon = <Icon name={'spinner'} loading size={'large'} />\n                header = 'Transaction created'\n                msg = `Waiting for confirmation...`\n                break\n            case TransactionStates.INITIAL:\n            default:\n                icon = <Icon name={'question'} size={'large'} />\n                header = 'Transaction unknown'\n                msg = 'Tx state INITIAL'\n        }\n        transactionContent = (\n            <Popup header={header} content={msg} trigger={icon} />\n        )\n    }\n    let actionContent\n    if (transaction?.transactionState !== TransactionStates.SUBMITTED) {\n        const editEnabled = allowance.ownerId === walletAddressId\n        actionContent = (\n            <Popup\n                content={\n                    editEnabled\n                        ? 'edit allowance'\n                        : 'Only address owner can edit allowance'\n                }\n                trigger={\n                    <span>\n                        <Button\n                            icon={'edit'}\n                            size={'small'}\n                            compact\n                            primary\n                            disabled={!editEnabled}\n                            onClick={handleClick}\n                        />\n                    </span>\n                }\n            />\n        )\n    }\n\n    return (\n        <>\n            {actionContent}&nbsp;{transactionContent}\n        </>\n    )\n}\n\nexport default TokenAllowanceItemActions\n","import React, { useEffect } from 'react'\nimport {\n    AllowanceId,\n    fetchAllowanceValueThunk,\n    QueryStates,\n} from './AllowancesListSlice'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { RootState } from 'app/rootReducer'\nimport { Divider, Loader, Table } from 'semantic-ui-react'\nimport AddressDisplay from 'components/AddressDisplay'\nimport bnToDisplayString from '@triplespeeder/bn2string'\nimport BN from 'bn.js'\nimport TokenAllowanceItemActions from './TokenAllowanceItemActions'\n\ninterface TokenAllowanceItemProps {\n    allowanceId: AllowanceId\n}\n\nconst unlimitedAllowance = new BN(2).pow(new BN(256)).subn(1)\n\nconst TokenAllowanceItem = ({ allowanceId }: TokenAllowanceItemProps) => {\n    const dispatch = useDispatch()\n    const allowance = useSelector(\n        (state: RootState) => state.allowances.allowancesById[allowanceId]\n    )\n    const allowanceValue = useSelector(\n        (state: RootState) => state.allowances.allowanceValuesById[allowanceId]\n    )\n    const tokenContract = useSelector(\n        (state: RootState) =>\n            state.tokenContracts.contractsById[allowance.tokenContractId]\n    )\n    const spenderAddress = useSelector(\n        (state: RootState) => state.addresses.addressesById[allowance.spenderId]\n    )\n    const { mobile } = useSelector((state: RootState) => state.respsonsive)\n    const { networkId } = useSelector((state: RootState) => state.onboard)\n\n    // lazy-load allowance value\n    useEffect(() => {\n        if (allowanceValue.state === QueryStates.QUERY_STATE_INITIAL) {\n            dispatch(fetchAllowanceValueThunk(allowanceId))\n        }\n    }, [allowanceValue, allowanceId, dispatch])\n\n    let allowanceElement, criticalAllowance, positiveAllowance\n    switch (allowanceValue.state) {\n        case QueryStates.QUERY_STATE_RUNNING:\n            allowanceElement = <Loader active inline size={'mini'} />\n            break\n        case QueryStates.QUERY_STATE_COMPLETE:\n            positiveAllowance = allowanceValue.value.isZero()\n            criticalAllowance =\n                allowanceValue.value.eq(unlimitedAllowance) ||\n                allowanceValue.value.gte(tokenContract.totalSupply)\n            if (criticalAllowance) {\n                allowanceElement = <em>unlimited</em>\n            } else {\n                const roundToDecimals = new BN('2')\n                const { /*precise,*/ rounded } = bnToDisplayString({\n                    value: allowanceValue.value,\n                    decimals: tokenContract.decimals,\n                    roundToDecimals,\n                })\n                allowanceElement = <span>{rounded}</span>\n            }\n            break\n        case QueryStates.QUERY_STATE_ERROR:\n            allowanceElement = <span>error</span>\n            break\n        case QueryStates.QUERY_STATE_INITIAL:\n        default:\n            allowanceElement = ''\n    }\n\n    const lastChangeString = new Date(\n        allowance.lastChangedTimestamp\n    ).toDateString()\n\n    const addressCell = (\n        <Table.Cell>\n            <AddressDisplay\n                ethAddress={spenderAddress}\n                networkId={networkId}\n                mobile={mobile}\n            />\n        </Table.Cell>\n    )\n\n    let allowanceCell\n    let lastChangeCell\n    if (mobile) {\n        allowanceCell = (\n            <Table.Cell\n                negative={criticalAllowance}\n                positive={positiveAllowance}\n                textAlign={'right'}\n            >\n                {allowanceElement}\n                <Divider fitted />\n                <small>{lastChangeString}</small>\n            </Table.Cell>\n        )\n        lastChangeCell = null\n    } else {\n        allowanceCell = (\n            <Table.Cell\n                negative={criticalAllowance}\n                positive={positiveAllowance}\n                textAlign={'right'}\n            >\n                {allowanceElement}\n            </Table.Cell>\n        )\n        lastChangeCell = <Table.Cell collapsing>{lastChangeString}</Table.Cell>\n    }\n\n    const actionCell = (\n        <Table.Cell collapsing>\n            <TokenAllowanceItemActions allowanceId={allowanceId} />\n        </Table.Cell>\n    )\n\n    return (\n        <Table.Row key={`${allowanceId}`}>\n            {addressCell}\n            {allowanceCell}\n            {lastChangeCell}\n            {actionCell}\n        </Table.Row>\n    )\n}\n\nexport default TokenAllowanceItem\n","import React, { useEffect, useState } from 'react'\nimport {\n    Header,\n    Segment,\n    Table,\n    Placeholder,\n    Icon,\n    Divider,\n} from 'semantic-ui-react'\nimport AddressDisplay from '../../components/AddressDisplay'\nimport BN from 'bn.js'\nimport { AddressId } from '../addressInput/AddressSlice'\nimport { AllowanceId, QueryStates } from './AllowancesListSlice'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { RootState } from 'app/rootReducer'\nimport TokenAllowanceItem from './TokenAllowanceItem'\nimport { addBalanceThunk, buildBalanceId } from '../balances/BalancesSlice'\nimport bn2DisplayString from '@triplespeeder/bn2string'\n\ninterface TokenAllowanceItemProps {\n    tokenId: AddressId\n    ownerId: AddressId\n    allowanceIds: Array<AllowanceId>\n}\n\nconst TokenAllowancesItem = ({\n    tokenId,\n    ownerId,\n    allowanceIds,\n}: TokenAllowanceItemProps) => {\n    const dispatch = useDispatch()\n    const { mobile } = useSelector((state: RootState) => state.respsonsive)\n    const { networkId } = useSelector((state: RootState) => state.onboard)\n    const tokenContract = useSelector(\n        (state: RootState) => state.tokenContracts.contractsById[tokenId]\n    )\n    const tokenAddress = useSelector(\n        (state: RootState) => state.addresses.addressesById[tokenId]\n    )\n    const ownerBalance = useSelector((state: RootState) => {\n        const balanceId = buildBalanceId(ownerId, tokenId)\n        return state.balances.balancesById[balanceId]\n    })\n    const [collapsed, setCollapsed] = useState(true)\n\n    // lazy-load owner balance when contract instance is available\n    useEffect(() => {\n        if (!ownerBalance && tokenContract?.contractInstance) {\n            dispatch(addBalanceThunk(ownerId, tokenId))\n        }\n    }, [ownerBalance, ownerId, tokenId, tokenContract, dispatch])\n\n    const toggleCollapse = () => {\n        setCollapsed(!collapsed)\n    }\n\n    // return placeholder if contract is not yet loaded\n    if (!tokenContract) {\n        return (\n            <Segment raised>\n                <Placeholder>\n                    <Placeholder.Header>\n                        <Placeholder.Line />\n                    </Placeholder.Header>\n                    <Placeholder.Paragraph>\n                        <Placeholder.Line />\n                        <Placeholder.Line />\n                    </Placeholder.Paragraph>\n                </Placeholder>\n            </Segment>\n        )\n    }\n\n    let tokenDisplayString = tokenContract.name\n    if (tokenDisplayString === '') {\n        tokenDisplayString = `Unnamed ERC20`\n    }\n    const roundToDecimals = new BN(2)\n    if (\n        !ownerBalance ||\n        ownerBalance.queryState === QueryStates.QUERY_STATE_RUNNING\n    ) {\n        tokenDisplayString += ` (loading...)`\n    } else {\n        const { rounded } = bn2DisplayString({\n            value: ownerBalance.value,\n            decimals: tokenContract.decimals,\n            roundToDecimals,\n        })\n        tokenDisplayString += ` (${rounded} ${tokenContract.symbol})`\n    }\n    const headline = <div>{tokenDisplayString}</div>\n\n    // populate rows with one entry per allowance from allowanceIds\n    const rows: Array<React.ReactNode> = []\n    allowanceIds.forEach((allowanceId) => {\n        rows.push(\n            <TokenAllowanceItem key={allowanceId} allowanceId={allowanceId} />\n        )\n    })\n\n    if (mobile) {\n        let table\n        if (!collapsed) {\n            table = (\n                <Table basic={'very'} celled unstackable compact size={'small'}>\n                    <Table.Header>\n                        <Table.Row>\n                            <Table.HeaderCell>Spender</Table.HeaderCell>\n                            <Table.HeaderCell\n                                textAlign={'center'}\n                                style={{ paddingBottom: 0 }}\n                            >\n                                Allowance\n                                <Divider fitted />\n                                <small>Last modified</small>\n                            </Table.HeaderCell>\n                            <Table.HeaderCell>Action</Table.HeaderCell>\n                        </Table.Row>\n                    </Table.Header>\n                    <Table.Body>{rows}</Table.Body>\n                </Table>\n            )\n        }\n        const toggleButton = (\n            <Icon\n                style={{ float: 'right' }}\n                name={collapsed ? 'chevron down' : 'chevron up'}\n                size={'mini'}\n                onClick={toggleCollapse}\n            />\n        )\n        return (\n            <Segment raised>\n                <Header size={'small'}>\n                    {toggleButton}\n                    {headline}\n                    <Header.Subheader>\n                        <AddressDisplay\n                            ethAddress={tokenAddress}\n                            mobile={mobile}\n                            networkId={networkId}\n                        />\n                    </Header.Subheader>\n                </Header>\n                {table}\n            </Segment>\n        )\n    } else {\n        return (\n            <Segment raised>\n                <Header size={'medium'}>\n                    {headline}\n                    <Header.Subheader>\n                        <AddressDisplay\n                            ethAddress={tokenAddress}\n                            mobile={mobile}\n                            networkId={networkId}\n                        />\n                    </Header.Subheader>\n                </Header>\n                <Table basic={'very'} celled selectable>\n                    <Table.Header>\n                        <Table.Row textAlign={'center'}>\n                            <Table.HeaderCell>Spender</Table.HeaderCell>\n                            <Table.HeaderCell textAlign={'center'}>\n                                Allowance\n                            </Table.HeaderCell>\n                            <Table.HeaderCell textAlign={'center'}>\n                                Last Change\n                            </Table.HeaderCell>\n                            <Table.HeaderCell>Action</Table.HeaderCell>\n                        </Table.Row>\n                    </Table.Header>\n                    <Table.Body>{rows}</Table.Body>\n                </Table>\n            </Segment>\n        )\n    }\n}\n\nexport default TokenAllowancesItem\n","import React from 'react'\nimport { Message, Segment } from 'semantic-ui-react'\n\ninterface DisplayMessageProps {\n    mobile: boolean\n    info?: boolean\n    warning?: boolean\n    error?: boolean\n    success?: boolean\n    icon?: React.ReactNode\n    header?: string\n    body: React.ReactNode | string\n}\n\nconst DisplayMessage = ({\n    mobile,\n    info,\n    warning,\n    error,\n    success,\n    icon,\n    header,\n    body,\n}: DisplayMessageProps) => {\n    const desktop = !mobile\n    const padded = desktop && 'very'\n    const withIcon = icon ? true : false\n    const size = mobile ? 'small' : 'huge'\n    const textAlign = mobile ? 'left' : 'center'\n\n    return (\n        <Segment basic padded={padded} textAlign={textAlign}>\n            <Message\n                warning={warning}\n                info={info}\n                error={error}\n                success={success}\n                icon={withIcon}\n                size={size}\n            >\n                {withIcon && icon}\n                <Message.Content>\n                    <Message.Header>{header}</Message.Header>\n                    {body}\n                </Message.Content>\n            </Message>\n        </Segment>\n    )\n}\n\nexport default DisplayMessage\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport _ from 'lodash'\nimport { RootState } from '../../app/rootReducer'\nimport TokenAllowancesItem from './TokenAllowancesItem'\nimport { QueryStates } from './AllowancesListSlice'\nimport { Icon } from 'semantic-ui-react'\nimport { AddressId } from '../addressInput/AddressSlice'\nimport DisplayMessage from '../../components/DisplayMessage'\nimport AddressDisplay from '../../components/AddressDisplay'\n\ninterface AllowancesListContainerProps {\n    ownerId: AddressId\n    showZeroAllowances: boolean\n    addressFilter: string\n}\n\nconst AllowancesListContainer = ({\n    ownerId,\n    showZeroAllowances,\n    addressFilter,\n}: AllowancesListContainerProps) => {\n    const allowancesByTokenId = useSelector((state: RootState) => {\n        let allowanceIds\n        if (showZeroAllowances && addressFilter === '') {\n            // no filter required, just return all IDs.\n            allowanceIds = state.allowances.allowanceIdsByOwnerId[ownerId]\n        } else {\n            // apply filter\n            allowanceIds = state.allowances.allowanceIdsByOwnerId[\n                ownerId\n            ].filter((allowanceId) => {\n                const allowance = state.allowances.allowancesById[allowanceId]\n                if (!showZeroAllowances) {\n                    const allowanceValue =\n                        state.allowances.allowanceValuesById[allowanceId]\n                    const isZeroAllowance =\n                        allowanceValue.state ===\n                            QueryStates.QUERY_STATE_COMPLETE &&\n                        allowanceValue.value.isZero()\n                    if (isZeroAllowance) {\n                        return false\n                    }\n                }\n                if (addressFilter) {\n                    const filterString = addressFilter.toLowerCase()\n                    const tokenContract =\n                        state.tokenContracts.contractsById[\n                            allowance.tokenContractId\n                        ]\n                    if (tokenContract) {\n                        const tokenContractAddress =\n                            state.addresses.addressesById[\n                                tokenContract.addressId\n                            ]\n                        const matchedFilter =\n                            tokenContract.name\n                                .toLowerCase()\n                                .includes(filterString) ||\n                            tokenContract.symbol\n                                .toLowerCase()\n                                .includes(filterString) ||\n                            tokenContractAddress.address\n                                .toLowerCase()\n                                .includes(filterString) ||\n                            tokenContractAddress.ensName\n                                ?.toLowerCase()\n                                .includes(filterString)\n                        if (!matchedFilter) {\n                            return false\n                        }\n                    } else {\n                        console.warn(\n                            `No tokencontract for ${allowance.tokenContractId}`\n                        )\n                    }\n                }\n                return true\n            })\n        }\n\n        // get allowances by their Id\n        const allowances = allowanceIds?.map(\n            (allowanceId) => state.allowances.allowancesById[allowanceId]\n        )\n\n        // group allowances by tokenID\n        const groupedAllowances = _.groupBy(allowances, 'tokenContractId')\n\n        // sort grouped allowances by token name\n        // Result: An array of an Array of Allowances\n        return _.sortBy(groupedAllowances, [\n            function (allowanceArray) {\n                const tokenContract =\n                    state.tokenContracts.contractsById[\n                        allowanceArray[0].tokenContractId\n                    ]\n                return tokenContract?.name ?? 'Z' // return 'Z' so tokens which name is still unknown appear at end\n            },\n        ])\n    })\n    const queryState = useSelector(\n        (state: RootState) =>\n            state.allowances.allowanceQueryStateByOwner[ownerId]\n    )\n    const ownerAddress = useSelector(\n        (state: RootState) => state.addresses.addressesById[ownerId]\n    )\n    const mobile = useSelector((state: RootState) => state.respsonsive.mobile)\n    const networkId = useSelector((state: RootState) => state.onboard.networkId)\n\n    if (!queryState) {\n        console.log(`No querystate available for ${ownerId}`)\n        return null\n    }\n\n    let message\n    const items: Array<React.ReactNode> = []\n    for (const tokenAllowances of allowancesByTokenId) {\n        const tokenId = tokenAllowances[0].tokenContractId\n        const allowanceIds = tokenAllowances.map((allowance) => allowance.id)\n        items.push(\n            <TokenAllowancesItem\n                key={tokenId}\n                tokenId={tokenId}\n                ownerId={ownerId}\n                allowanceIds={allowanceIds}\n            />\n        )\n    }\n\n    switch (queryState.state) {\n        case QueryStates.QUERY_STATE_RUNNING:\n            message = (\n                <DisplayMessage\n                    mobile={mobile}\n                    header={'Loading events'}\n                    body={`Querying dfuse API for ERC20 Approvals, getting page ${\n                        queryState.currentPage + 1\n                    }...`}\n                    warning={true}\n                    icon={<Icon name='circle notched' loading />}\n                />\n            )\n            break\n        case QueryStates.QUERY_STATE_ERROR:\n            message = (\n                <DisplayMessage\n                    mobile={mobile}\n                    error={true}\n                    header={'Error'}\n                    icon={<Icon name='exclamation triangle' />}\n                    body={queryState.error}\n                />\n            )\n            break\n        case QueryStates.QUERY_STATE_COMPLETE:\n            if (items.length === 0) {\n                const body = (\n                    <>\n                        <AddressDisplay\n                            ethAddress={ownerAddress}\n                            mobile={mobile}\n                            networkId={networkId}\n                            inline={true}\n                        />{' '}\n                        has no approvals.\n                    </>\n                )\n                message = (\n                    <DisplayMessage\n                        mobile={mobile}\n                        success={true}\n                        icon={<Icon name='info' />}\n                        header={'No Approvals'}\n                        body={body}\n                    />\n                )\n            }\n            break\n        case QueryStates.QUERY_STATE_INITIAL:\n        default:\n            return <div>Unhandled state!</div>\n    }\n\n    return (\n        <>\n            {message}\n            {items}\n        </>\n    )\n}\n\nexport default AllowancesListContainer\n","import React from 'react'\nimport {\n    Checkbox,\n    Grid,\n    Icon,\n    Input,\n    Button,\n    ButtonProps,\n} from 'semantic-ui-react'\nimport { InputOnChangeData } from 'semantic-ui-react/dist/commonjs/elements/Input/Input'\nimport { CheckboxProps } from 'semantic-ui-react/dist/commonjs/modules/Checkbox/Checkbox'\n\ninterface AllowancesListFilterProps {\n    addressFilterValue: string\n    showZeroAllowances: boolean\n    mobile: boolean\n    toggleShowZeroAllowances: (\n        event: React.FormEvent<HTMLInputElement>,\n        data: CheckboxProps\n    ) => void\n    handleAddressFilterChange: (\n        event: React.ChangeEvent<HTMLInputElement>,\n        data: InputOnChangeData\n    ) => void\n    clearAddressFilter: (input: void) => void\n    refresh: (event: React.MouseEvent, data: ButtonProps) => void\n}\n\nconst AllowancesListFilter = ({\n    showZeroAllowances,\n    toggleShowZeroAllowances,\n    addressFilterValue,\n    handleAddressFilterChange,\n    refresh,\n    clearAddressFilter,\n    mobile,\n}: AllowancesListFilterProps) => {\n    if (mobile) {\n        return (\n            <Grid\n                verticalAlign='middle'\n                centered\n                textAlign={'center'}\n                columns={2}\n                divided\n            >\n                <Grid.Row>\n                    <Grid.Column width={13}>\n                        <Checkbox\n                            toggle\n                            label='Include zero allowances'\n                            checked={showZeroAllowances}\n                            onChange={toggleShowZeroAllowances}\n                        />\n                    </Grid.Column>\n                    <Grid.Column width={3}>\n                        <Button\n                            circular\n                            icon={'refresh'}\n                            onClick={refresh}\n                            title={'Refresh allowances'}\n                            size={'small'}\n                            compact\n                        />\n                    </Grid.Column>\n                </Grid.Row>\n                <Grid.Row>\n                    <Grid.Column width={16}>\n                        <Input\n                            name='filter'\n                            placeholder='Filter by name, symbol or address'\n                            onChange={handleAddressFilterChange}\n                            value={addressFilterValue}\n                            icon={\n                                <Icon\n                                    name='eraser'\n                                    circular\n                                    link\n                                    onClick={clearAddressFilter}\n                                />\n                            }\n                            fluid\n                        />\n                    </Grid.Column>\n                </Grid.Row>\n            </Grid>\n        )\n    } else {\n        return (\n            <Grid\n                verticalAlign='middle'\n                centered\n                textAlign={'center'}\n                columns={3}\n                divided\n                stackable\n            >\n                <Grid.Row>\n                    <Grid.Column width={9}>\n                        <Input\n                            label='Tokenfilter'\n                            name='filter'\n                            placeholder='Enter name, symbol or contract address'\n                            onChange={handleAddressFilterChange}\n                            value={addressFilterValue}\n                            icon={\n                                <Icon\n                                    name='eraser'\n                                    circular\n                                    link\n                                    onClick={clearAddressFilter}\n                                />\n                            }\n                            fluid\n                        />\n                    </Grid.Column>\n                    <Grid.Column width={6}>\n                        <Checkbox\n                            toggle\n                            label='Include zero allowances'\n                            checked={showZeroAllowances}\n                            onChange={toggleShowZeroAllowances}\n                        />\n                    </Grid.Column>\n                    <Grid.Column width={1}>\n                        <Button\n                            circular\n                            icon={'refresh'}\n                            onClick={refresh}\n                            title={'Refresh allowances'}\n                            size={'small'}\n                            compact\n                        />\n                    </Grid.Column>\n                </Grid.Row>\n            </Grid>\n        )\n    }\n}\n\nexport default AllowancesListFilter\n","import React from 'react'\nimport { Form, Grid, Header, Input, Message, Modal } from 'semantic-ui-react'\nimport AddressDisplay from '../../components/AddressDisplay'\nimport { EthAddress } from '../addressInput/AddressSlice'\n\ninterface EditAllowanceFormProps {\n    mobile: boolean\n    tokenName: string\n    tokenSymbol: string\n    tokenAddress: string\n    spender: EthAddress\n    currentAllowance: string\n    newAllowance: string\n    handleChange: (e: React.FormEvent<EventTarget>) => void\n    handleClose: () => void\n    handleSubmit: () => void\n}\n\nconst EditAllowanceForm = ({\n    mobile,\n    tokenName,\n    handleChange,\n    tokenSymbol,\n    spender,\n    currentAllowance,\n    newAllowance,\n    handleClose,\n    handleSubmit,\n}: EditAllowanceFormProps) => {\n    const size = mobile ? 'small' : 'huge'\n    const spenderAddressDisplay = (\n        <AddressDisplay\n            ethAddress={spender}\n            mobile={mobile}\n            networkId={1}\n            inline={true}\n        />\n    )\n    let inputElem\n    if (mobile) {\n        inputElem = (\n            <>\n                <label>New Allowance</label>\n                <Input\n                    placeholder='Enter amount'\n                    type={'number'}\n                    name={'newAllowance'}\n                    onChange={handleChange}\n                    value={newAllowance}\n                    fluid={true}\n                />\n            </>\n        )\n    } else {\n        inputElem = (\n            <Input\n                label={{\n                    tag: true,\n                    content: 'Enter new allowance',\n                }}\n                labelPosition='right'\n                placeholder='Enter amount'\n                type={'number'}\n                name={'newAllowance'}\n                onChange={handleChange}\n                value={newAllowance}\n            />\n        )\n    }\n    return (\n        <Modal open={true} size={'small'} onClose={handleClose}>\n            <Header>Edit Allowance</Header>\n            <Modal.Content>\n                <Message size={size}>\n                    <Message.List>\n                        <Message.Item>\n                            Token: <strong>{tokenName}</strong>\n                        </Message.Item>\n                        <Message.Item>\n                            Spender: {spenderAddressDisplay}\n                        </Message.Item>\n                        <Message.Item>\n                            Current allowance:{' '}\n                            <strong>\n                                {currentAllowance} {tokenSymbol}\n                            </strong>\n                        </Message.Item>\n                    </Message.List>\n                </Message>\n                <Form size={'size'} onSubmit={handleSubmit}>\n                    <Form.Field required>{inputElem}</Form.Field>\n                    <Grid columns={2}>\n                        <Grid.Row>\n                            <Grid.Column>\n                                <Form.Button\n                                    type={'button'}\n                                    fluid\n                                    size={size}\n                                    negative\n                                    onClick={handleClose}\n                                >\n                                    Cancel\n                                </Form.Button>\n                            </Grid.Column>\n                            <Grid.Column>\n                                <Form.Button\n                                    type={'submit'}\n                                    fluid\n                                    size={size}\n                                    positive\n                                >\n                                    Set allowance\n                                </Form.Button>\n                            </Grid.Column>\n                        </Grid.Row>\n                    </Grid>\n                </Form>\n            </Modal.Content>\n        </Modal>\n    )\n}\n\nexport default EditAllowanceForm\n","import React, { useCallback, useState } from 'react'\nimport bnToDisplayString from '@triplespeeder/bn2string'\nimport { toBaseUnit } from '../../utils/erc20-decimals-conversion'\nimport EditAllowanceForm from './EditAllowanceForm'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { RootState } from 'app/rootReducer'\nimport BN from 'bn.js'\nimport { closeEditAllowanceModal } from './EditAllowanceSlice'\nimport { setAllowanceThunk } from '../tokenContracts/tokenContractsSlice'\n\nconst EditAllowanceFormContainer = () => {\n    const dispatch = useDispatch()\n    const allowance = useSelector(\n        (state: RootState) =>\n            state.allowances.allowancesById[state.editAllowance.editAllowanceId]\n    )\n    const allowanceValue = useSelector(\n        (state: RootState) =>\n            state.allowances.allowanceValuesById[\n                state.editAllowance.editAllowanceId\n            ]\n    )\n    const tokenContract = useSelector(\n        (state: RootState) =>\n            state.tokenContracts.contractsById[allowance.tokenContractId]\n    )\n    const spender = useSelector(\n        (state: RootState) => state.addresses.addressesById[allowance.spenderId]\n    )\n    const mobile = useSelector((state: RootState) => state.respsonsive.mobile)\n    const [newAllowance, setNewAllowance] = useState('0')\n\n    const convertAllowanceToDisplaystring = useCallback(() => {\n        if (allowanceValue.value.gte(tokenContract.totalSupply)) {\n            return 'unlimited'\n        } else {\n            const allowanceDisplay = bnToDisplayString({\n                value: allowanceValue.value,\n                decimals: tokenContract.decimals,\n                roundToDecimals: new BN(2),\n            })\n            return allowanceDisplay.rounded\n        }\n    }, [\n        allowanceValue.value,\n        tokenContract.totalSupply,\n        tokenContract.decimals,\n    ])\n\n    const handleAllowanceInputChange = (e: React.FormEvent<EventTarget>) => {\n        let { value } = e.target as HTMLInputElement\n        // console.log(`handleChange: ${value}`)\n        if (parseFloat(value) < 0) {\n            value = '0'\n        }\n        setNewAllowance(value)\n    }\n\n    const handleClose = () => {\n        dispatch(closeEditAllowanceModal())\n    }\n\n    const handleSubmit = () => {\n        console.log(`Submitted new allowance: ${newAllowance}`)\n        // convert 'newAllowance' number to token baseunit\n        const newValue = toBaseUnit(newAllowance, tokenContract.decimals)\n        dispatch(closeEditAllowanceModal())\n        dispatch(\n            setAllowanceThunk(\n                tokenContract.addressId,\n                spender.address,\n                newValue,\n                allowance.id\n            )\n        )\n    }\n\n    const tokenName =\n        tokenContract.name !== '' ? tokenContract.name : 'Unnamed ERC20'\n\n    return (\n        <EditAllowanceForm\n            mobile={mobile}\n            newAllowance={newAllowance}\n            currentAllowance={convertAllowanceToDisplaystring()}\n            tokenAddress={tokenContract.addressId}\n            handleClose={handleClose}\n            spender={spender}\n            tokenName={tokenName}\n            handleChange={handleAllowanceInputChange}\n            handleSubmit={handleSubmit}\n            tokenSymbol={tokenContract.symbol}\n        />\n    )\n}\n\nexport default EditAllowanceFormContainer\n","import BN from 'bn.js'\n\nexport function toBaseUnit(value: string, decimals: BN) {\n    const ten = new BN(10)\n    const base = ten.pow(decimals)\n\n    // Is it negative?\n    const negative = value.substring(0, 1) === '-'\n    if (negative) {\n        value = value.substring(1)\n    }\n\n    if (value === '.') {\n        throw new Error(\n            `Invalid value ${value} cannot be converted to` +\n                ` base unit with ${decimals.toString()} decimals.`\n        )\n    }\n\n    // Split it into a whole and fractional part\n    const comps = value.split('.')\n    if (comps.length > 2) {\n        throw new Error('Too many decimal points')\n    }\n    let whole = comps[0]\n    let fraction = comps[1]\n\n    if (!whole) {\n        whole = '0'\n    }\n    if (!fraction) {\n        fraction = '0'\n    }\n    const decimalsNumber = decimals.toNumber()\n    if (fraction.length > decimalsNumber) {\n        throw new Error('Too many decimal places')\n    }\n\n    while (fraction.length < decimalsNumber) {\n        fraction += '0'\n    }\n\n    const wholeBN = new BN(whole)\n    const fractionBN = new BN(fraction)\n    let wei = wholeBN.mul(base).add(fractionBN)\n\n    if (negative) {\n        wei = wei.neg()\n    }\n\n    return new BN(wei.toString(10), 10)\n}\n","import React, { useEffect, useState } from 'react'\nimport 'semantic-ui-css/semantic.min.css'\nimport { Divider, Segment } from 'semantic-ui-react'\nimport AllowancesListContainer from './AllowancesListContainer'\nimport AllowancesListFilter from '../allowancesListFilter/AllowancesListFilter'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { RootState } from '../../app/rootReducer'\nimport { fetchAllowancesThunk, QueryStates } from './AllowancesListSlice'\nimport EditAllowanceFormContainer from '../editAllowance/EditAllowanceFormContainer'\n\nconst AllowanceLister = () => {\n    const dispatch = useDispatch()\n    const { mobile } = useSelector((state: RootState) => state.respsonsive)\n    const address = useSelector((state: RootState) => {\n        if (state.addresses.checkAddressId) {\n            return state.addresses.addressesById[state.addresses.checkAddressId]\n        } else {\n            return undefined\n        }\n    })\n    const queryState = useSelector((state: RootState) => {\n        if (address)\n            return state.allowances.allowanceQueryStateByOwner[address.address]\n        else return undefined\n    })\n    const showEditAllowanceModal = useSelector(\n        (state: RootState) => state.editAllowance.showModal\n    )\n\n    const [showZeroAllowances, setShowZeroAllowances] = useState(true)\n    const [addressFilter, setAddressFilter] = useState('')\n\n    const toggleShowZeroAllowances = () => {\n        setShowZeroAllowances(!showZeroAllowances)\n    }\n\n    const clearAddressFilter = () => {\n        setAddressFilter('')\n    }\n\n    const handleAddressFilterChange = (e: React.FormEvent<EventTarget>) => {\n        const { value } = e.target as HTMLInputElement\n        setAddressFilter(value)\n    }\n\n    useEffect(() => {\n        document.title = `TAC - ${address?.ensName ?? address?.address ?? ''}`\n    }, [address])\n\n    useEffect(() => {\n        if (\n            queryState &&\n            queryState.state === QueryStates.QUERY_STATE_INITIAL\n        ) {\n            if (address) dispatch(fetchAllowancesThunk(address.address))\n        }\n    }, [queryState, dispatch, address])\n\n    const loadAllowances = () => {\n        if (address) {\n            console.log(\n                `Starting query for \"${address?.ensName ?? address?.address}\"`\n            )\n            dispatch(fetchAllowancesThunk(address.address))\n        }\n    }\n\n    const handleRefreshClick = () => {\n        loadAllowances()\n    }\n\n    if (!address) {\n        return <div>No address set</div>\n    }\n\n    if (mobile) {\n        return (\n            <>\n                <Divider />\n                <AllowancesListFilter\n                    showZeroAllowances={showZeroAllowances}\n                    toggleShowZeroAllowances={toggleShowZeroAllowances}\n                    addressFilterValue={addressFilter}\n                    handleAddressFilterChange={handleAddressFilterChange}\n                    clearAddressFilter={clearAddressFilter}\n                    refresh={handleRefreshClick}\n                    mobile={mobile}\n                />\n                <Divider />\n                <AllowancesListContainer\n                    ownerId={address.address}\n                    showZeroAllowances={showZeroAllowances}\n                    addressFilter={addressFilter}\n                />\n                {showEditAllowanceModal && <EditAllowanceFormContainer />}\n            </>\n        )\n    } else {\n        return (\n            <React.Fragment>\n                <Segment basic>\n                    <h2>\n                        Allowances of {address?.ensName ?? address?.address}:\n                    </h2>\n                </Segment>\n                <AllowancesListFilter\n                    showZeroAllowances={showZeroAllowances}\n                    toggleShowZeroAllowances={toggleShowZeroAllowances}\n                    addressFilterValue={addressFilter}\n                    handleAddressFilterChange={handleAddressFilterChange}\n                    clearAddressFilter={clearAddressFilter}\n                    refresh={handleRefreshClick}\n                    mobile={mobile}\n                />\n                <AllowancesListContainer\n                    ownerId={address.address}\n                    showZeroAllowances={showZeroAllowances}\n                    addressFilter={addressFilter}\n                />\n                {showEditAllowanceModal && <EditAllowanceFormContainer />}\n            </React.Fragment>\n        )\n    }\n}\n\nexport default AllowanceLister\n","import React, { useEffect } from 'react'\nimport { Icon } from 'semantic-ui-react'\nimport { useHistory } from 'react-router-dom'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { RootState } from '../../app/rootReducer'\nimport { initialize, selectWallet } from './onboardSlice'\nimport DisplayMessage from '../../components/DisplayMessage'\n\ninterface OnboardGateProps {\n    children?: React.ReactNode\n}\nconst OnboardGate = ({ children }: OnboardGateProps) => {\n    const history = useHistory()\n    const dispatch = useDispatch()\n    const { onboardAPI, wallet } = useSelector(\n        (state: RootState) => state.onboard\n    )\n    const mobile = useSelector((state: RootState) => state.respsonsive.mobile)\n\n    useEffect(() => {\n        if (!onboardAPI) {\n            console.log(`OnboardGate: Dispatching initialize()`)\n            dispatch(initialize(history))\n        } else if (!wallet) {\n            console.log(`OnboardGate: Dispatching selectWallet`)\n            dispatch(selectWallet(history))\n        }\n    }, [onboardAPI, wallet, dispatch, history])\n\n    if (wallet) {\n        return <React.Fragment>{children}</React.Fragment>\n    } else {\n        return (\n            <DisplayMessage\n                mobile={mobile}\n                header={'Waiting for wallet'}\n                body={'Please complete wallet selection'}\n                icon={<Icon name='spinner' loading />}\n                info={true}\n            />\n        )\n    }\n}\n\nexport default OnboardGate\n","import React from 'react'\nimport { Form, Input } from 'semantic-ui-react'\n\ninterface AddressInputProps {\n    value: string\n    loading: boolean\n    error: boolean\n    success: boolean\n    handleInput: (input: string) => void\n    mobile: boolean\n}\n\nconst AddressInput = ({\n    handleInput,\n    loading,\n    error,\n    value,\n    success,\n    mobile,\n}: AddressInputProps) => {\n    const handleChange = (e: React.FormEvent<EventTarget>) => {\n        const { value } = e.target as HTMLInputElement\n        handleInput(value)\n    }\n\n    if (mobile) {\n        return (\n            <Form.Field error={error}>\n                <label>Enter address/ENS name or change wallet address</label>\n                <input\n                    onChange={handleChange}\n                    placeholder='Eth address or ENS name'\n                    value={value}\n                />\n            </Form.Field>\n        )\n    } else {\n        return (\n            <Form.Field inline width={14}>\n                <Input\n                    placeholder='Address or ENS Name'\n                    error={error}\n                    loading={loading}\n                    onChange={handleChange}\n                    value={value}\n                    type={'text'}\n                    action={{\n                        type: 'Submit',\n                        disabled: !success,\n                        content: 'Go!',\n                        positive: true,\n                    }}\n                    label={'Enter address/ENS name or select in wallet'}\n                />\n            </Form.Field>\n        )\n    }\n}\n\nexport default AddressInput\n","import React, { useEffect, useState } from 'react'\nimport AddressInput from './AddressInput'\nimport { useHistory } from 'react-router-dom'\nimport { Form, Grid } from 'semantic-ui-react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { RootState } from '../../app/rootReducer'\nimport { addAddressThunk } from './AddressSlice'\n\nexport const addressInputStates = {\n    ADDRESS_INITIAL: 'address_initial', // no user interaction\n    ADDRESS_RESOLVING: 'address_resolving', // valid ENS name entered, waiting for resolving\n    ADDRESS_VALID: 'address_valid', // got a valid address\n    ADDRESS_INVALID: 'address_invalid',\n}\n\nconst AddressInputContainer = () => {\n    const dispatch = useDispatch()\n    const history = useHistory()\n    const { web3 } = useSelector((state: RootState) => state.onboard)\n    const { mobile } = useSelector((state: RootState) => state.respsonsive)\n    const checkAddress = useSelector((state: RootState) => {\n        if (state.addresses.checkAddressId)\n            return state.addresses.addressesById[state.addresses.checkAddressId]\n        else return undefined\n    })\n    const [addressInputState, setAddressInputState] = useState(\n        addressInputStates.ADDRESS_INITIAL\n    )\n    const [input, setInput] = useState('')\n    const [addressId, setAddressId] = useState('')\n    const [ensName, setEnsName] = useState<string | undefined>(undefined)\n\n    // keep address input field in sync with address from url params\n    useEffect(() => {\n        if (checkAddress) {\n            console.log(\n                `CheckAddress: ${checkAddress.ensName ?? checkAddress.address}`\n            )\n            setInput(checkAddress.ensName ?? checkAddress.address)\n        } else {\n            console.log(`CheckAddress undefined`)\n        }\n    }, [checkAddress, setInput])\n\n    const error = addressInputState === addressInputStates.ADDRESS_INVALID\n    const loading = addressInputState === addressInputStates.ADDRESS_RESOLVING\n    const validInput = addressInputState === addressInputStates.ADDRESS_VALID\n\n    const handleSubmit = () => {\n        if (validInput) {\n            if (ensName) {\n                dispatch(addAddressThunk(ensName, history))\n            } else {\n                dispatch(addAddressThunk(addressId, history))\n            }\n            setInput('')\n            setEnsName(undefined)\n        }\n    }\n\n    const handleInput = async (input: string) => {\n        setInput(input)\n        setEnsName(undefined)\n        if (input.length === 0) {\n            setAddressInputState(addressInputStates.ADDRESS_INITIAL)\n        } else {\n            // check for valid input (raw address and ENS name)\n            const validAddress = /^(0x)?[0-9a-f]{40}$/i.test(input)\n            const validENSName = /.*\\.eth$/i.test(input)\n            if (validENSName && web3) {\n                // resolve entered ENS name\n                setAddressInputState(addressInputStates.ADDRESS_RESOLVING)\n                try {\n                    const resolvedAddress = await web3.eth.ens.getAddress(input)\n                    console.log(`Resolved ${input} to ${resolvedAddress}`)\n                    setAddressInputState(addressInputStates.ADDRESS_VALID)\n                    setAddressId(resolvedAddress)\n                    setEnsName(input)\n                    if (mobile) {\n                        dispatch(addAddressThunk(input, history))\n                    }\n                } catch (e) {\n                    console.log('Could not resolve ' + input)\n                    setAddressInputState(addressInputStates.ADDRESS_INVALID)\n                }\n            } else if (validAddress) {\n                // use entered ethereum address\n                const addressId = input.toLowerCase()\n                setAddressId(addressId)\n                setAddressInputState(addressInputStates.ADDRESS_VALID)\n                if (mobile) {\n                    dispatch(addAddressThunk(addressId, history))\n                }\n            } else {\n                setAddressInputState(addressInputStates.ADDRESS_INVALID)\n            }\n        }\n    }\n\n    if (mobile) {\n        return (\n            <Form\n                onSubmit={handleSubmit}\n                error={error}\n                success={validInput}\n                loading={loading}\n            >\n                <AddressInput\n                    handleInput={handleInput}\n                    value={input}\n                    error={error}\n                    success={validInput}\n                    loading={loading}\n                    mobile={mobile}\n                />\n            </Form>\n        )\n    }\n\n    return (\n        <Grid textAlign={'center'} centered columns={1}>\n            <Grid.Row>\n                <Grid.Column width={14}>\n                    <Form\n                        size={'huge'}\n                        onSubmit={handleSubmit}\n                        error={error}\n                        success={validInput}\n                        widths={'equal'}\n                    >\n                        <Form.Group>\n                            <AddressInput\n                                handleInput={handleInput}\n                                value={input}\n                                error={error}\n                                success={validInput}\n                                loading={loading}\n                                mobile={mobile}\n                            />\n                        </Form.Group>\n                    </Form>\n                </Grid.Column>\n            </Grid.Row>\n        </Grid>\n    )\n}\n\nexport default AddressInputContainer\n","import React, { FunctionComponent, useEffect, useState } from 'react'\nimport { useParams } from 'react-router-dom'\nimport {\n    CheckAddressStates,\n    redirectToAddress,\n    setAddressFromParamsThunk,\n} from '../features/addressInput/AddressSlice'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { RootState } from '../app/rootReducer'\nimport { Icon } from 'semantic-ui-react'\nimport { useHistory } from 'react-router'\nimport DisplayMessage from './DisplayMessage'\n\ninterface AddressExtractorProps {\n    children?: React.ReactNode\n}\n\nconst AddressExtractor: FunctionComponent = ({\n    children,\n}: AddressExtractorProps) => {\n    const dispatch = useDispatch()\n    const history = useHistory()\n    const { address: addressFromParams } = useParams()\n    const { checkAddressState } = useSelector(\n        (state: RootState) => state.addresses\n    )\n    const walletAddressId = useSelector(\n        (state: RootState) => state.addresses.walletAddressId\n    )\n    const mobile = useSelector((state: RootState) => state.respsonsive.mobile)\n    const [prevAddressFromParams, setPrevAddressFromParams] = useState('')\n\n    // watch url params address change\n    useEffect(() => {\n        if (addressFromParams) {\n            if (prevAddressFromParams !== addressFromParams) {\n                console.log(\n                    `AddressExtractor: Setting new address ${addressFromParams}`\n                )\n                dispatch(setAddressFromParamsThunk(addressFromParams))\n                setPrevAddressFromParams(addressFromParams)\n            } else {\n                console.log(\n                    `AddressExtractor: ${addressFromParams} already dispatched.`\n                )\n            }\n        } else if (walletAddressId) {\n            console.log(`No address in params. Trying fallback to wallet.`)\n            // no address provided via url. Fall back to wallet address.\n            dispatch(redirectToAddress(walletAddressId, history, true))\n        }\n    }, [\n        addressFromParams,\n        prevAddressFromParams,\n        walletAddressId,\n        history,\n        dispatch,\n    ])\n\n    if (checkAddressState === CheckAddressStates.Invalid) {\n        return (\n            <DisplayMessage\n                mobile={mobile}\n                header={'Invalid address'}\n                body={`Address ${addressFromParams} is invalid`}\n                icon={<Icon name='exclamation triangle' />}\n                error={true}\n            />\n        )\n    }\n\n    if (checkAddressState === CheckAddressStates.Resolving) {\n        return (\n            <DisplayMessage\n                mobile={mobile}\n                header={'Checking address'}\n                body={`Checking address ${addressFromParams}`}\n                icon={<Icon name='circle notched' loading />}\n                warning={true}\n            />\n        )\n    }\n\n    return <React.Fragment>{children}</React.Fragment>\n}\n\nexport default AddressExtractor\n","import React, { SyntheticEvent } from 'react'\nimport { Button, Dropdown, DropdownProps } from 'semantic-ui-react'\nimport { RootState } from '../app/rootReducer'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { setRequiredNetworkIdThunk } from 'features/onboard/onboardSlice'\n\nconst NetworkSelector = () => {\n    const options = [\n        { key: 1, text: 'Mainnet', value: 1 },\n        { key: 2, text: 'Ropsten', value: 3 },\n    ]\n\n    const dispatch = useDispatch()\n    const { requiredNetworkId, wallet } = useSelector(\n        (state: RootState) => state.onboard\n    )\n\n    const handleChange = (\n        event: SyntheticEvent<HTMLElement, Event>,\n        data: DropdownProps\n    ) => {\n        const { value } = data\n        console.log(`Selected value: ${value}`)\n        dispatch(setRequiredNetworkIdThunk(parseInt(`${value}`)))\n    }\n\n    const networkEntry = options.find(\n        (value) => value.value === requiredNetworkId\n    )\n    const text = 'Network: ' + networkEntry?.text ?? 'select'\n\n    return (\n        <Dropdown\n            as={Button}\n            disabled={!wallet}\n            text={text}\n            options={options}\n            onChange={handleChange}\n            value={requiredNetworkId}\n            fluid\n        />\n    )\n}\n\nexport default NetworkSelector\n","import React from 'react'\nimport { Button, Message, Modal, Icon } from 'semantic-ui-react'\nimport AddressDisplay from '../../components/AddressDisplay'\nimport { Wallet } from 'bnc-onboard/dist/src/interfaces'\nimport { EthAddress } from '../addressInput/AddressSlice'\n\ninterface WalletConfigModalProps {\n    handleChangeWallet: () => void\n    handleChangeAddress: () => void\n    handleClose: () => void\n    wallet?: Wallet\n    walletAddress?: EthAddress\n    mobile: boolean\n    networkId: number\n}\n\nconst WalletConfigModal = ({\n    handleChangeWallet,\n    handleChangeAddress,\n    handleClose,\n    mobile,\n    networkId,\n    wallet,\n    walletAddress,\n}: WalletConfigModalProps) => {\n    const currentWallet = wallet?.name ? (\n        <p>\n            Connected to <strong>{wallet.name}</strong>.\n        </p>\n    ) : (\n        <p>No wallet connected.</p>\n    )\n\n    const walletMsgIcon = wallet?.name ? 'linkify' : 'unlinkify'\n\n    const currentAddress = walletAddress ? (\n        <AddressDisplay\n            ethAddress={walletAddress}\n            mobile={mobile}\n            networkId={networkId}\n        />\n    ) : (\n        'None'\n    )\n\n    const size = mobile ? 'small' : 'large'\n\n    const msgs = []\n    msgs.push(\n        <Message icon info size={size} key={1}>\n            <Icon name={walletMsgIcon} />\n            <Message.Content>\n                <Message.Header>Wallet</Message.Header>\n                {currentWallet}\n                <Button primary size={'small'} onClick={handleChangeWallet}>\n                    Change Wallet\n                </Button>\n            </Message.Content>\n        </Message>\n    )\n    if (wallet?.type === 'hardware') {\n        msgs.push(\n            <Message icon info size={size} key={2}>\n                <Icon name='id card outline' />\n                <Message.Content>\n                    <Message.Header>Wallet address</Message.Header>\n                    <p>{wallet?.name} wallet supports multiple addresses.</p>\n                    <p>Current address: {currentAddress}</p>\n                    <Button\n                        primary\n                        size={'small'}\n                        onClick={handleChangeAddress}\n                    >\n                        Change Address\n                    </Button>\n                </Message.Content>\n            </Message>\n        )\n    }\n\n    const modal = (\n        <Modal open={true} size={size} onClose={handleClose}>\n            <Modal.Header>Wallet configuration</Modal.Header>\n            <Modal.Content>{msgs}</Modal.Content>\n            <Modal.Actions>\n                <Button size={'small'} onClick={handleClose}>\n                    Close\n                </Button>\n            </Modal.Actions>\n        </Modal>\n    )\n\n    return modal\n}\n\nexport default WalletConfigModal\n","import { Button } from 'semantic-ui-react'\nimport React from 'react'\nimport { EthAddress } from '../addressInput/AddressSlice'\n\ninterface WalletSelectorProps {\n    walletName?: string\n    walletAccount?: EthAddress\n    handleClick: () => void\n}\n\nconst WalletSelector = ({ walletName, handleClick }: WalletSelectorProps) => {\n    const gotWallet = !!walletName\n    const buttonLabel = walletName ? `Wallet: ${walletName}` : 'Connect wallet'\n\n    return (\n        <Button fluid positive={gotWallet} onClick={handleClick}>\n            {buttonLabel}\n        </Button>\n    )\n}\n\nexport default WalletSelector\n","import React, { useState } from 'react'\nimport WalletConfigModal from './WalletConfigModal'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { RootState } from '../../app/rootReducer'\nimport { selectWallet } from './onboardSlice'\nimport { useHistory } from 'react-router-dom'\nimport WalletSelector from './walletSelector'\n\nconst WalletSelectorContainer = () => {\n    const [showWalletConfig, setShowWalletConfig] = useState(false)\n    const dispatch = useDispatch()\n    const history = useHistory()\n    const { wallet, onboardAPI, networkId } = useSelector(\n        (state: RootState) => state.onboard\n    )\n    const walletAddress = useSelector((state: RootState) => {\n        if (state.addresses.walletAddressId) {\n            return state.addresses.addressesById[\n                state.addresses.walletAddressId\n            ]\n        } else {\n            return undefined\n        }\n    })\n    const { mobile } = useSelector((state: RootState) => state.respsonsive)\n    const handleWalletConfig = () => {\n        setShowWalletConfig(true)\n    }\n\n    const handleCloseWalletConfig = () => {\n        setShowWalletConfig(false)\n    }\n\n    const handleSelectWallet = () => {\n        setShowWalletConfig(false)\n        dispatch(selectWallet(history))\n    }\n\n    const handleSelectAddress = () => {\n        setShowWalletConfig(false)\n        onboardAPI?.accountSelect()\n    }\n\n    return (\n        <>\n            <WalletSelector\n                handleClick={handleWalletConfig}\n                walletName={wallet?.name}\n                walletAccount={walletAddress}\n            />\n            {showWalletConfig && (\n                <WalletConfigModal\n                    handleClose={handleCloseWalletConfig}\n                    handleChangeWallet={handleSelectWallet}\n                    handleChangeAddress={handleSelectAddress}\n                    mobile={mobile}\n                    networkId={networkId}\n                    wallet={wallet}\n                    walletAddress={walletAddress}\n                />\n            )}\n        </>\n    )\n}\n\nexport default WalletSelectorContainer\n","import React from 'react'\nimport { Container, Icon, Image, Menu } from 'semantic-ui-react'\nimport { Link } from 'react-router-dom'\nimport NetworkSelector from '../../components/NetworkSelector'\nimport WalletSelectorContainer from '../onboard/WalletSelectorContainer'\n\nconst MainMenu: React.FC = () => {\n    return (\n        <Menu fixed='top' inverted size='huge'>\n            <Container>\n                <Menu.Item\n                    header\n                    as={Link}\n                    to='/'\n                    title={'Home'}\n                    style={{ padding: '0px' }}\n                >\n                    <Image src={'/logo192.png'} width={60} height={60} />\n                </Menu.Item>\n                <Menu.Item as={Link} to='/address/' title={'Check Allowances'}>\n                    <Icon name='search' size={'large'} /> Check Allowances\n                </Menu.Item>\n                <Menu.Menu position='right'>\n                    <Menu.Item>\n                        <WalletSelectorContainer />\n                    </Menu.Item>\n                    <Menu.Item>\n                        <NetworkSelector />\n                    </Menu.Item>\n                    <Menu.Item>\n                        <a\n                            href='https://github.com/TripleSpeeder/token-allowance-checker'\n                            title='github.com/TripleSpeeder/token-allowance-checker'\n                            target='_blank'\n                            rel='noopener noreferrer'\n                        >\n                            <Icon name='github' size='big' />\n                        </a>\n                    </Menu.Item>\n                </Menu.Menu>\n            </Container>\n        </Menu>\n    )\n}\n\nexport default MainMenu\n","import React, { useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { RootState } from './rootReducer'\nimport { ResponsiveOnUpdateData } from 'semantic-ui-react/dist/commonjs/addons/Responsive/Responsive'\nimport {\n    Container,\n    Header,\n    Icon,\n    Image,\n    Menu,\n    Responsive,\n    Segment,\n    Sidebar,\n    Button,\n} from 'semantic-ui-react'\nimport { setMobile } from '../features/responsiveLayout/responsiveSlice'\nimport { HashRouter as Router, Link, useHistory } from 'react-router-dom'\nimport MainMenu from '../features/menu/MainMenu'\nimport WalletSelectorContainer from '../features/onboard/WalletSelectorContainer'\nimport NetworkSelector from '../components/NetworkSelector'\nimport { initialize } from '../features/onboard/onboardSlice'\n\ninterface ResponsiveAppProps {\n    children?: React.ReactNode\n}\nconst ResponsiveApp = ({ children }: ResponsiveAppProps) => {\n    const [prevMobile, setPrevMobile] = useState<boolean | undefined>(undefined)\n    const [showSidebar, setShowSidebar] = useState(false)\n    const { mobile } = useSelector((state: RootState) => state.respsonsive)\n    const dispatch = useDispatch()\n    const history = useHistory()\n\n    // initialize onboard.js\n    useEffect(() => {\n        dispatch(initialize(history))\n    }, [dispatch, history])\n\n    const onResponsiveUpdate = (\n        event: React.SyntheticEvent<HTMLElement>,\n        data: ResponsiveOnUpdateData\n    ) => {\n        // eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n        // @ts-ignore\n        const isMobile = data.width <= Responsive.onlyMobile.maxWidth\n        if (isMobile !== prevMobile) {\n            dispatch(setMobile(isMobile))\n            setPrevMobile(isMobile)\n        }\n    }\n\n    const DesktopHeading = (\n        <Segment textAlign='center' vertical basic>\n            <MainMenu />\n            <Container\n                text\n                style={{\n                    marginTop: '4em',\n                    marginBottom: '2em',\n                }}\n            >\n                <Header\n                    as='h1'\n                    inverted={false}\n                    style={{\n                        fontSize: '3em',\n                        marginTop: '0.5em',\n                    }}\n                >\n                    Token Allowance Checker\n                    <Header.Subheader>\n                        Control your token approvals\n                    </Header.Subheader>\n                </Header>\n            </Container>\n        </Segment>\n    )\n\n    let content\n    if (mobile) {\n        // No extra page header, use sidebar for menu\n        content = (\n            <Sidebar.Pushable>\n                <Menu fixed='top' inverted size='small'>\n                    <Menu.Item onClick={() => setShowSidebar(true)}>\n                        <Icon name={'bars'} />\n                    </Menu.Item>\n                    <Menu.Item style={{ padding: '0' }}>\n                        <Link to={'/'}>\n                            <Image\n                                src={'/logo192.png'}\n                                width={40}\n                                height={40}\n                            />\n                        </Link>\n                    </Menu.Item>\n                    <Menu.Item>Token Allowance Checker</Menu.Item>\n                </Menu>\n                <Sidebar\n                    as={Menu}\n                    animation={'overlay'}\n                    inverted\n                    onHide={() => setShowSidebar(false)}\n                    vertical\n                    visible={showSidebar}\n                >\n                    <Menu.Item>\n                        <WalletSelectorContainer />\n                    </Menu.Item>\n                    <Menu.Item>\n                        <NetworkSelector />\n                    </Menu.Item>\n                    <Menu.Item>\n                        <Button\n                            icon\n                            fluid\n                            as={'a'}\n                            href='https://github.com/TripleSpeeder/token-allowance-checker'\n                            title='github.com/TripleSpeeder/token-allowance-checker'\n                            target='_blank'\n                            rel='noopener noreferrer'\n                        >\n                            <Icon name='github' /> TAC on Github\n                        </Button>\n                    </Menu.Item>\n                </Sidebar>\n\n                <Sidebar.Pusher style={{ marginTop: '3em' }}>\n                    {children}\n                </Sidebar.Pusher>\n            </Sidebar.Pushable>\n        )\n    } else {\n        // use page header with classic menu\n        content = (\n            <>\n                {DesktopHeading}\n                {children}\n            </>\n        )\n    }\n\n    return (\n        <Responsive\n            as={Router}\n            fireOnMount={true}\n            onUpdate={onResponsiveUpdate}\n        >\n            {content}\n        </Responsive>\n    )\n}\n\nexport default ResponsiveApp\n","import {\n    Container,\n    Divider,\n    Header,\n    Icon,\n    Image,\n    List,\n    Popup,\n    Segment,\n} from 'semantic-ui-react'\nimport GitcoinIcon from '../icons/gitcoinIcon.png'\nimport pkg from '../../package.json'\nimport React from 'react'\n\nconst Footer = () => {\n    return (\n        <Container textAlign='center'>\n            <Divider />\n            <Segment basic>\n                <List horizontal size={'small'} verticalAlign={'top'}>\n                    <List.Item\n                        as='a'\n                        href='https://twitter.com/TripleSpeeder'\n                        target='_blank'\n                        rel='noopener noreferrer'\n                    >\n                        <Popup\n                            content='@triplespeeder'\n                            trigger={<Icon size='big' name='twitter' />}\n                        />\n                    </List.Item>\n                    <List.Item\n                        as='a'\n                        href='https://t.me/triplespeeder'\n                        target='_blank'\n                        rel='noopener noreferrer'\n                    >\n                        <Popup\n                            content='@triplespeeder'\n                            trigger={<Icon size='big' name='telegram' />}\n                        />\n                    </List.Item>\n                    <List.Item as='a' href='mailto:michael@m-bauer.org'>\n                        <Popup\n                            content='michael@m-bauer.org'\n                            trigger={<Icon size='big' name='mail outline' />}\n                        />\n                    </List.Item>\n                    <List.Item\n                        as='a'\n                        href='https://github.com/TripleSpeeder/token-allowance-checker'\n                        title='github.com/TripleSpeeder/token-allowance-checker'\n                        target='_blank'\n                        rel='noopener noreferrer'\n                    >\n                        <Popup\n                            content='github.com/TripleSpeeder/token-allowance-checker'\n                            trigger={<Icon size='big' name='github' />}\n                        />\n                    </List.Item>\n                    <List.Item\n                        as='a'\n                        href='https://www.reddit.com/u/TripleSpeeder'\n                        target='_blank'\n                        rel='noopener noreferrer'\n                    >\n                        <Popup\n                            content='u/TripleSpeeder'\n                            trigger={<Icon size='big' name='reddit' />}\n                        />\n                    </List.Item>\n                    <List.Item\n                        as='a'\n                        target='_blank'\n                        rel='noopener noreferrer'\n                        href={\n                            'https://gitcoin.co/grants/480/token-allowance-checker?tab=description'\n                        }\n                    >\n                        <Popup\n                            content='Gitcoin grant page'\n                            trigger={<Image avatar src={GitcoinIcon} />}\n                        />\n                    </List.Item>\n                    <List.Item>\n                        <Popup\n                            content='Donate to tac.dappstar.eth'\n                            trigger={<Icon size='big' name={'ethereum'} />}\n                        />\n                    </List.Item>\n                </List>\n                <Header size={'small'}>\n                    powered by{' '}\n                    <a\n                        href='https://www.dfuse.io/'\n                        rel='noopener noreferrer'\n                        target='_blank'\n                    >\n                        dfuse\n                    </a>{' '}\n                    technology\n                </Header>\n                <Header size={'tiny'}>\n                    (c) Michael Bauer\n                    <Header.Subheader>v{pkg.version}</Header.Subheader>\n                </Header>\n            </Segment>\n        </Container>\n    )\n}\n\nexport default Footer\n","import React from 'react'\nimport './App.css'\nimport { HashRouter as Router, Link, Route, Switch } from 'react-router-dom'\nimport {\n    Button,\n    Container,\n    Grid,\n    Header,\n    Icon,\n    Segment,\n} from 'semantic-ui-react'\nimport AllowanceLister from '../features/allowancesList/AllowanceLister'\nimport OnboardGate from '../features/onboard/OnboardGate'\nimport AddressInputContainer from '../features/addressInput/AddressInputContainer'\nimport AddressExtractor from '../components/AddressExtractor'\nimport { useSelector } from 'react-redux'\nimport { RootState } from './rootReducer'\nimport ResponsiveApp from './ResponsiveApp'\nimport Footer from './Footer'\n\nconst App: React.FC = () => {\n    const { mobile } = useSelector((state: RootState) => state.respsonsive)\n\n    const size = mobile ? 'small' : 'huge'\n\n    const startButton = (\n        <Segment basic textAlign='center'>\n            <Button primary as={Link} to='/address/' size='massive'>\n                Check Allowances\n                <Icon name='arrow right' />\n            </Button>\n        </Segment>\n    )\n\n    return (\n        <Router>\n            <ResponsiveApp>\n                <Switch>\n                    <Route path={['/address/:address', '/address']}>\n                        <Container>\n                            <OnboardGate>\n                                <AddressExtractor>\n                                    <AddressInputContainer />\n                                    <AllowanceLister />\n                                </AddressExtractor>\n                            </OnboardGate>\n                        </Container>\n                    </Route>\n                    <Route path='/'>\n                        {startButton}\n                        <Segment basic vertical size={size}>\n                            <Grid container stackable verticalAlign='top'>\n                                <Grid.Row>\n                                    <Grid.Column width={8}>\n                                        <Header>Control your approvals</Header>\n                                        <p>\n                                            <em>Token Allowance Checker</em>{' '}\n                                            shows all approvals for your\n                                            ERC20-compliant tokens, and the\n                                            option to change the approved amount\n                                            - or completely zero it.\n                                        </p>\n                                    </Grid.Column>\n                                    <Grid.Column width={8}>\n                                        <Header>\n                                            The unlimited approval problem\n                                        </Header>\n                                        <p>\n                                            Many DApps have the habit of\n                                            requiring you to approve effectively\n                                            unlimited amount of tokens. This\n                                            helps improving the user experience,\n                                            as you only have to sign off an\n                                            approval once and it will be enough\n                                            for all future transactions.\n                                        </p>\n                                        <p>\n                                            However this also means that the\n                                            DApp (or the person/entity\n                                            controlling it) can at any time\n                                            transfer <em>all of your tokens</em>\n                                            , without requiring any further\n                                            approval.\n                                        </p>\n                                        <p>\n                                            In addition, there is no concept of\n                                            expiring approvals. Once approved,\n                                            the approval will remain forever. If\n                                            you do not trust a DApp or its\n                                            operators anymore, there is usually\n                                            no easy way to remove the approval.\n                                        </p>\n                                    </Grid.Column>\n                                </Grid.Row>\n                            </Grid>\n                        </Segment>\n                    </Route>\n                </Switch>\n                <Footer />\n            </ResponsiveApp>\n        </Router>\n    )\n}\n\nexport default App\n","import { combineReducers } from '@reduxjs/toolkit'\nimport onboardReducer from 'features/onboard/onboardSlice'\nimport addressesReducer from 'features/addressInput/AddressSlice'\nimport tokenContractReducer from 'features/tokenContracts/tokenContractsSlice'\nimport allowancesReducer from 'features/allowancesList/AllowancesListSlice'\nimport balancesReducer from 'features/balances/BalancesSlice'\nimport editAllowanceReducer from 'features/editAllowance/EditAllowanceSlice'\nimport transactionTrackerReducer from 'features/transactionTracker/TransactionTrackerSlice'\nimport responsiveLayoutReducer from 'features/responsiveLayout/responsiveSlice'\n\nconst rootReducer = combineReducers({\n    onboard: onboardReducer,\n    addresses: addressesReducer,\n    tokenContracts: tokenContractReducer,\n    allowances: allowancesReducer,\n    balances: balancesReducer,\n    editAllowance: editAllowanceReducer,\n    transactions: transactionTrackerReducer,\n    respsonsive: responsiveLayoutReducer,\n})\n\nexport type RootState = ReturnType<typeof rootReducer>\n\nexport default rootReducer\n","import { configureStore, Action, getDefaultMiddleware } from '@reduxjs/toolkit'\nimport { ThunkAction } from 'redux-thunk'\nimport rootReducer, { RootState } from './rootReducer'\nimport {\n    setOnboardAPI,\n    setWeb3Instance,\n    setWallet,\n} from '../features/onboard/onboardSlice'\nimport { addContract } from 'features/tokenContracts/tokenContractsSlice'\nimport { setAllowanceValue } from 'features/allowancesList/AllowancesListSlice'\nimport { setBalanceValue, addBalance } from 'features/balances/BalancesSlice'\n\nconst customizedMiddleware = getDefaultMiddleware({\n    serializableCheck: {\n        ignoredActions: [\n            setOnboardAPI.type,\n            setWeb3Instance.type,\n            setWallet.type,\n            addContract.type,\n            setAllowanceValue.type,\n            addBalance.type,\n            setBalanceValue.type,\n        ],\n        ignoredPaths: [\n            'onboard.web3',\n            'onboard.wallet',\n            'onboard.onboardAPI',\n            'tokenContracts.contractsById',\n            'allowances.allowanceValuesById',\n            'balances.balancesById',\n        ],\n    },\n    immutableCheck: {\n        ignoredPaths: [\n            'onboard.web3',\n            'onboard.wallet',\n            'onboard.onboardAPI',\n            'tokenContracts.contractsById',\n        ],\n        warnAfter: 100, // ms\n    },\n})\n\nconst store = configureStore({\n    reducer: rootReducer,\n    middleware: customizedMiddleware,\n})\n\nif (process.env.NODE_ENV === 'development' && module.hot) {\n    module.hot.accept('./rootReducer', () => {\n        const newRootReducer = require('./rootReducer').default\n        store.replaceReducer(newRootReducer)\n    })\n}\n\nexport type AppDispatch = typeof store.dispatch\nexport type AppThunk = ThunkAction<void, RootState, unknown, Action<string>>\n\nexport default store\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport store from './app/store'\nimport './index.css'\n\nconst render = () => {\n    const App = require('./app/App').default\n    ReactDOM.render(\n        <Provider store={store}>\n            <App />\n        </Provider>,\n        document.getElementById('root')\n    )\n}\n\nrender()\n\nif (process.env.NODE_ENV === 'development' && module.hot) {\n    module.hot.accept('./app/App', render)\n}\n","interface Credentials {\n    endpoint: string\n    apikey: string\n}\n\ntype NetworkKeys = {\n    [key: number]: Credentials\n}\n\ntype Site = 'dfuse' | 'etherscan' | 'infura' | 'onboard'\ntype SiteCredentials = {\n    [key in Site]: NetworkKeys\n}\n\nconst apiKeys: SiteCredentials = {\n    dfuse: {\n        1: {\n            endpoint: 'mainnet.eth.dfuse.io',\n            apikey: 'web_085aeaac9c520204b1a9dcaa357e5460',\n        },\n        3: {\n            endpoint: 'ropsten.eth.dfuse.io',\n            apikey: 'web_085aeaac9c520204b1a9dcaa357e5460',\n        },\n    },\n    etherscan: {\n        1: {\n            apikey: 'THS8KWYM6KZ8WBP3DXKUDR7UKCRB8YIRGH',\n            endpoint: 'api.etherscan.io',\n        },\n        3: {\n            apikey: 'THS8KWYM6KZ8WBP3DXKUDR7UKCRB8YIRGH',\n            endpoint: 'api-ropsten.etherscan.io',\n        },\n    },\n    infura: {\n        1: {\n            apikey: '7f230a5ca832426796454c28577d93f2',\n            endpoint: 'mainnet.infura.io/v3/',\n        },\n        3: {\n            apikey: '7f230a5ca832426796454c28577d93f2',\n            endpoint: 'ropsten.infura.io/v3/',\n        },\n    },\n    onboard: {\n        1: {\n            apikey: 'f4b71bf0-fe50-4eeb-bc2b-b323527ed9e6',\n            endpoint: '',\n        },\n        3: {\n            apikey: 'f4b71bf0-fe50-4eeb-bc2b-b323527ed9e6',\n            endpoint: '',\n        },\n    },\n}\n\nexport default apiKeys\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\n\ninterface ResponsiveState {\n    mobile: boolean\n}\n\nconst initialState: ResponsiveState = {\n    mobile: false,\n}\n\nconst responsiveSlice = createSlice({\n    name: 'responsive',\n    initialState: initialState,\n    reducers: {\n        setMobile(state, action: PayloadAction<boolean>) {\n            state.mobile = action.payload\n        },\n    },\n})\n\nexport const { setMobile } = responsiveSlice.actions\n\nexport default responsiveSlice.reducer\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { AppDispatch, AppThunk } from '../../app/store'\nimport { addContractThunk } from 'features/tokenContracts/tokenContractsSlice'\nimport {\n    addAddressThunk,\n    AddressId,\n    EthAddressPayload,\n    addAddress,\n    fetchEtherscanNameThunk,\n} from '../addressInput/AddressSlice'\nimport BN from 'bn.js'\nimport {\n    TransactionId,\n    addTransaction,\n    EditAllowanceTransaction,\n} from '../transactionTracker/TransactionTrackerSlice'\nimport ERC20Data from '@openzeppelin/contracts/build/contracts/ERC20Detailed.json'\nimport { setNetworkId } from '../onboard/onboardSlice'\nimport { getDfuseClient } from '../../api/dfuse/dfuseio'\nimport createAndVerifyERC20 from '../../utils/contractVerifier'\nimport {\n    checkLogTopic,\n    topicHashApprove,\n    decodeLog,\n    checkDecodedData,\n} from 'utils/logEventVerifier'\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst contract = require('@truffle/contract')\n\nconst searchTransactions = `query ($query: String! $limit: Int64! $cursor: String) {\n      searchTransactions(\n        indexName: LOGS, \n        query: $query, \n        limit: $limit, \n        sort: DESC,\n        cursor: $cursor,\n      ) {\n        pageInfo {\n          endCursor\n        }\n        edges {\n          node {\n            hash\n            block {\n              number\n              header {\n                timestamp\n              }\n            }\n            matchingLogs {\n              data\n              topics\n              address\n            }\n          }\n        }\n      }\n    }`\n\nexport type AllowanceId = string\n\nexport interface Allowance {\n    id: AllowanceId\n    tokenContractId: AddressId\n    ownerId: AddressId\n    spenderId: AddressId\n    editTransactionId?: TransactionId\n    lastChangedTimestamp: number\n}\n\nexport interface AllowanceValue {\n    allowanceId: AllowanceId\n    value: BN\n    state: QueryStates\n}\n\nexport enum QueryStates {\n    QUERY_STATE_INITIAL,\n    QUERY_STATE_RUNNING,\n    QUERY_STATE_ERROR,\n    QUERY_STATE_COMPLETE,\n}\n\nexport interface QueryState {\n    state: QueryStates\n    currentPage: number\n    error?: string\n}\n\ninterface AllowancesState {\n    allowancesById: Record<AllowanceId, Allowance>\n    allowanceValuesById: Record<AllowanceId, AllowanceValue>\n    allowanceIdsByOwnerId: Record<AddressId, AllowanceId[]>\n    allowanceQueryStateByOwner: Record<AddressId, QueryState>\n}\n\ninterface AllowancePayload {\n    id: AllowanceId\n    allowance: Allowance\n}\n\ninterface QueryStatePayload {\n    ownerId: AddressId\n    queryState: QueryState\n}\n\n// initial state\nconst initialState: AllowancesState = {\n    allowancesById: {},\n    allowanceValuesById: {},\n    allowanceIdsByOwnerId: {},\n    allowanceQueryStateByOwner: {},\n}\n\nconst defaultQueryStateByOwner: QueryState = {\n    currentPage: 0,\n    state: QueryStates.QUERY_STATE_INITIAL,\n}\n\nexport const buildAllowanceId = (\n    tokenContractId: AddressId,\n    ownerId: AddressId,\n    spenderId: AddressId\n) => {\n    return `${ownerId}-${tokenContractId}-${spenderId}`\n}\n\nconst allowancesSlice = createSlice({\n    name: 'Allowances',\n    initialState: initialState,\n    reducers: {\n        addAllowance: {\n            reducer(state, action: PayloadAction<AllowancePayload>) {\n                const { id, allowance } = action.payload\n                if (Object.keys(state.allowancesById).includes(id)) {\n                    // already known.\n                    return\n                }\n                state.allowancesById[id] = allowance\n                state.allowanceIdsByOwnerId[allowance.ownerId].push(\n                    allowance.id\n                )\n                state.allowanceValuesById[id] = {\n                    allowanceId: id,\n                    state: QueryStates.QUERY_STATE_INITIAL,\n                    value: new BN('-1'),\n                }\n            },\n            prepare(\n                tokenContractId: AddressId,\n                ownerId: AddressId,\n                spenderId: AddressId,\n                timestamp: number\n            ) {\n                const id = buildAllowanceId(tokenContractId, ownerId, spenderId)\n                return {\n                    payload: {\n                        id,\n                        allowance: {\n                            id,\n                            tokenContractId,\n                            ownerId,\n                            spenderId,\n                            lastChangedTimestamp: timestamp,\n                        },\n                    },\n                }\n            },\n        },\n        setQueryState(state, action: PayloadAction<QueryStatePayload>) {\n            const { ownerId, queryState } = action.payload\n            state.allowanceQueryStateByOwner[ownerId] = queryState\n        },\n        setAllowanceValue(state, action: PayloadAction<AllowanceValue>) {\n            const allowanceValue = action.payload\n            state.allowanceValuesById[\n                allowanceValue.allowanceId\n            ] = allowanceValue\n        },\n    },\n    extraReducers: {\n        [addAddress.type](state, action: PayloadAction<EthAddressPayload>) {\n            const { id: ownerId } = action.payload\n            if (Object.keys(state.allowanceIdsByOwnerId).includes(ownerId)) {\n                // owner already known.\n                return\n            }\n            state.allowanceIdsByOwnerId[ownerId] = []\n            state.allowanceQueryStateByOwner[ownerId] = defaultQueryStateByOwner\n        },\n        [addTransaction.type](\n            state,\n            action: PayloadAction<EditAllowanceTransaction>\n        ) {\n            const { allowanceId, transactionId } = action.payload\n            state.allowancesById[allowanceId].editTransactionId = transactionId\n        },\n        [setNetworkId.type](state, action: PayloadAction<number>) {\n            const networkId = action.payload\n            console.log(\n                `Resetting allowances due to network change to ${networkId}`\n            )\n            Object.keys(state.allowanceQueryStateByOwner).forEach((ownerId) => {\n                state.allowanceQueryStateByOwner[\n                    ownerId\n                ] = defaultQueryStateByOwner\n            })\n            Object.keys(state.allowanceIdsByOwnerId).forEach((ownerId) => {\n                state.allowanceIdsByOwnerId[ownerId] = []\n            })\n            state.allowanceValuesById = {}\n            state.allowancesById = {}\n        },\n    },\n})\n\nexport const {\n    addAllowance,\n    setQueryState,\n    setAllowanceValue,\n} = allowancesSlice.actions\n\nexport default allowancesSlice.reducer\n\nexport const fetchAllowanceValueThunk = (\n    allowanceId: AllowanceId\n): AppThunk => async (dispatch: AppDispatch, getState) => {\n    // indicate start of loading\n    dispatch(\n        setAllowanceValue({\n            allowanceId,\n            value: new BN('-1'),\n            state: QueryStates.QUERY_STATE_RUNNING,\n        })\n    )\n\n    const allowance = getState().allowances.allowancesById[allowanceId]\n    const owner = getState().addresses.addressesById[allowance.ownerId]\n    const spender = getState().addresses.addressesById[allowance.spenderId]\n    const tokenContract = getState().tokenContracts.contractsById[\n        allowance.tokenContractId\n    ]\n\n    try {\n        const value = await tokenContract.contractInstance.allowance(\n            owner.address,\n            spender.address\n        )\n        dispatch(\n            setAllowanceValue({\n                allowanceId,\n                value,\n                state: QueryStates.QUERY_STATE_COMPLETE,\n            })\n        )\n    } catch (error) {\n        console.log(\n            `Failed to get allowance from token ${tokenContract.addressId}`\n        )\n        dispatch(\n            setAllowanceValue({\n                allowanceId,\n                value: new BN('-1'),\n                state: QueryStates.QUERY_STATE_ERROR,\n            })\n        )\n    }\n}\n\nexport const fetchAllowancesThunk = (ownerId: AddressId): AppThunk => async (\n    dispatch,\n    getState\n) => {\n    const web3 = getState().onboard.web3\n    if (!web3) {\n        console.log(`Missing web3!`)\n        return\n    }\n    const owner = getState().addresses.addressesById[ownerId]\n    const { networkId } = getState().onboard\n\n    let currentPage = 0\n    // update query state to indicate start of loading\n    dispatch(\n        setQueryState({\n            ownerId,\n            queryState: {\n                state: QueryStates.QUERY_STATE_RUNNING,\n                currentPage,\n            },\n        })\n    )\n\n    // prepare ERC20 contract\n    const erc20Contract = contract(ERC20Data)\n    erc20Contract.setProvider(web3.currentProvider)\n\n    // query dfuse API\n    try {\n        const client = getDfuseClient({ networkId })\n        // search page by page until no more results are found\n        let cursor = ''\n        let numPageResults = 0\n        const badContracts: Array<string> = []\n        const knownContracts: Array<string> = []\n        const knownSpenders: Array<string> = []\n\n        do {\n            console.log(\n                `Getting page ${currentPage}. Last page result: ${numPageResults}.`\n            )\n            const response = await client.graphql(searchTransactions, {\n                variables: {\n                    limit: '50',\n                    query: `topic.0:${topicHashApprove} topic.1:${owner.address}`,\n                    cursor: cursor,\n                },\n            })\n            // abort if any errors reported\n            if (response.errors) {\n                throw response.errors\n            }\n\n            // get actual results\n            const edges = response.data.searchTransactions.edges || []\n            for (let edgeIndex = 0; edgeIndex < edges.length; edgeIndex++) {\n                const { node } = edges[edgeIndex]\n                const timestamp = parseInt(node.block.header.timestamp)\n                for (let index = 0; index < node.matchingLogs.length; index++) {\n                    const logEntry = node.matchingLogs[index]\n                    const tokenContractAddress = logEntry.address.toLowerCase()\n\n                    if (badContracts.includes(tokenContractAddress)) {\n                        // skip logEvents created by already-known bad contracts\n                        continue\n                    }\n\n                    if (!checkLogTopic(logEntry)) {\n                        // issues with topic indicate a problem on dfuse side. Ignore this\n                        // logEvent, but do not blacklist contract.\n                        continue\n                    }\n\n                    const decoded = decodeLog(logEntry, web3)\n                    if (!decoded) {\n                        // If decoding fails, blacklist contract\n                        badContracts.push(tokenContractAddress)\n                        continue\n                    }\n\n                    if (\n                        !checkDecodedData(\n                            decoded.spender,\n                            decoded.owner,\n                            owner.address\n                        )\n                    ) {\n                        // ignore logEvents with inplausible data, but do not blacklist contract\n                        continue\n                    }\n\n                    // pre-checks passed. Now check contract\n                    if (!knownContracts.includes(tokenContractAddress)) {\n                        const contractInstance = await createAndVerifyERC20({\n                            erc20Contract,\n                            contractAddress: tokenContractAddress,\n                        })\n                        if (contractInstance) {\n                            knownContracts.push(tokenContractAddress)\n                            // console.log(`Adding tokenContract ${tokenContractAddress}`)\n                            dispatch(addContractThunk(contractInstance))\n                        } else {\n                            // contract failed verification\n                            badContracts.push(tokenContractAddress)\n                            continue\n                        }\n                    }\n\n                    // All checks passed. Now add spender address\n                    const spenderAddress = decoded.spender.toLowerCase()\n                    if (!knownSpenders.includes(spenderAddress)) {\n                        knownSpenders.push(spenderAddress)\n                        // console.log(`Adding Spender ${spenderAddress} for ${tokenContractAddress}`)\n                        dispatch(addAddressThunk(spenderAddress))\n                        // look for spender contract name on Etherscan\n                        dispatch(fetchEtherscanNameThunk(spenderAddress))\n                    }\n\n                    // Finally add allowance entry\n                    dispatch(\n                        addAllowance(\n                            tokenContractAddress,\n                            ownerId,\n                            spenderAddress,\n                            timestamp\n                        )\n                    )\n                }\n            }\n            numPageResults = edges.length\n            currentPage++\n            // get start cursor for next page\n            cursor = response.data.searchTransactions.pageInfo.endCursor\n            dispatch(\n                setQueryState({\n                    ownerId,\n                    queryState: {\n                        state: QueryStates.QUERY_STATE_RUNNING,\n                        currentPage,\n                    },\n                })\n            )\n        } while (numPageResults > 0)\n\n        dispatch(\n            setQueryState({\n                ownerId,\n                queryState: {\n                    state: QueryStates.QUERY_STATE_COMPLETE,\n                    currentPage,\n                },\n            })\n        )\n    } catch (errors) {\n        console.log(errors)\n        dispatch(\n            setQueryState({\n                ownerId,\n                queryState: {\n                    state: QueryStates.QUERY_STATE_ERROR,\n                    currentPage,\n                    error: JSON.stringify(errors),\n                },\n            })\n        )\n    }\n}\n","import { createDfuseClient } from '@dfuse/client'\nimport apiKeys from '../apikeys'\n\ninterface CreateClientParams {\n    networkId: number\n}\n\nconst getDfuseClient = ({ networkId }: CreateClientParams) => {\n    const credentials = apiKeys.dfuse[networkId]\n    if (!credentials) {\n        throw Error(`Network ${networkId} not supported by dfuse.io`)\n    }\n\n    return createDfuseClient({\n        apiKey: credentials.apikey,\n        network: credentials.endpoint,\n    })\n}\n\nexport { getDfuseClient }\n","import { ERC20DetailedContract, ERC20DetailedInstance } from '../contracts'\n\ninterface VerifierParams {\n    erc20Contract: ERC20DetailedContract\n    contractAddress: string\n}\n\nconst createAndVerifyERC20 = async ({\n    erc20Contract,\n    contractAddress,\n}: VerifierParams) => {\n    let contractInstance: ERC20DetailedInstance\n\n    // instantiate contract\n    try {\n        contractInstance = await erc20Contract.at(contractAddress)\n    } catch (error) {\n        console.log(\n            `Error instantiating contract at ${contractAddress}: ${error}`\n        )\n        return false\n    }\n\n    // check required methods by calling them\n    try {\n        await contractInstance.totalSupply()\n        await contractInstance.balanceOf(contractAddress)\n        await contractInstance.allowance(contractAddress, contractAddress)\n        // TODO: Check if approve() method is available!\n    } catch (error) {\n        console.log(\n            `Contract at ${contractAddress} does not implement required ERC20 methods.`\n        )\n        return false\n    }\n\n    return contractInstance\n}\n\nexport default createAndVerifyERC20\n","export const topicHashApprove =\n    '0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925'\n\nexport const eventABI = [\n    {\n        indexed: true,\n        internalType: 'address',\n        name: 'owner',\n        type: 'address',\n    },\n    {\n        indexed: true,\n        internalType: 'address',\n        name: 'spender',\n        type: 'address',\n    },\n    {\n        indexed: false,\n        internalType: 'uint256',\n        name: 'value',\n        type: 'uint256',\n    },\n]\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const checkLogTopic = (logEntry: any) => {\n    // Apparently dfuse query results based on topic sometimes return wrong topics. Double-check that the\n    // logEntry actually is of the expected topic.\n    if (logEntry.topics[0] !== topicHashApprove) {\n        console.log(\n            `Skipping log event. Topic is wrong, expected ${topicHashApprove}, got ${logEntry.topics[0]}.`\n        )\n        return false\n    }\n    return true\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const decodeLog = (logEntry: any, web3: Web3) => {\n    if (logEntry.data === '0x') {\n        console.log(\n            `Detected bad contract at ${logEntry.address}: LogEntry.data is missing.`\n        )\n        return false\n    }\n    let decoded\n    try {\n        decoded = web3.eth.abi.decodeLog(\n            eventABI,\n            logEntry.data,\n            logEntry.topics.slice(1)\n        )\n    } catch (e) {\n        console.log(\n            `Detected bad contract at ${logEntry.address}: Can not decode logEntry:`\n        )\n        console.log(logEntry)\n        return false\n    }\n    return decoded\n}\n\nexport const checkDecodedData = (\n    spender: string,\n    owner: string,\n    expectedOwner: string\n) => {\n    // check if spender is not zero. Some contracts emit logs with spender 0x0...\n    if (!parseInt(spender)) {\n        console.log(`Skipping log event: Invalid spender ${spender}`)\n        return false\n    }\n\n    if (owner.toLowerCase() !== expectedOwner.toLowerCase()) {\n        console.log(\n            `Skipping log event due to owner mismatch. Expected ${expectedOwner}, got ${owner}`\n        )\n        return false\n    }\n\n    return true\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport namehash from 'eth-ens-namehash'\nimport { AppDispatch, AppThunk } from '../../app/store'\nimport * as H from 'history'\n\nexport const zeroAddress = '0x0000000000000000000000000000000000000000'\n\nexport enum ResolvingStates {\n    Initial,\n    ResolvingForward,\n    ResolvingReverse,\n    Resolved,\n}\n\nexport enum CheckAddressStates {\n    Initial,\n    Resolving,\n    Valid,\n    Invalid,\n}\n\nexport type AddressId = string\n\n// the plain address data without internal info like ID or resolving state\nexport interface EthAddress {\n    address: string // the actual address\n    ensName?: string // ensName for this address\n    resolvingState: ResolvingStates\n    esContractName?: string\n}\n\nexport interface EthAddressPayload {\n    id: AddressId\n    ethAddress: EthAddress\n}\n\ninterface EtherscanContractNamePayload {\n    id: AddressId\n    esContractName: string\n}\n\ninterface ResolvingStatePayload {\n    id: AddressId\n    resolvingState: ResolvingStates\n}\n\ninterface ENSNamePayload {\n    id: AddressId\n    ensName: string\n}\n\n// The state contains all known EthAddressess, indexed by the address id\ninterface EthAddressesState {\n    addressesById: Record<AddressId, EthAddress>\n    checkAddressId: AddressId | undefined\n    checkAddressState: CheckAddressStates\n    walletAddressId: AddressId | undefined\n    prevWalletAddressId: AddressId | undefined\n}\n\n// initial state\nconst initialState: EthAddressesState = {\n    addressesById: {},\n    walletAddressId: undefined,\n    prevWalletAddressId: undefined,\n    checkAddressId: undefined,\n    checkAddressState: CheckAddressStates.Initial,\n}\n\nconst addressSlice = createSlice({\n    name: 'ethAddresses',\n    initialState: initialState,\n    reducers: {\n        addAddress: {\n            reducer(state, action: PayloadAction<EthAddressPayload>) {\n                const { id, ethAddress } = action.payload\n                state.addressesById[id] = ethAddress\n            },\n            prepare(address: string, ensName?: string) {\n                address = address.toLowerCase()\n                return {\n                    payload: {\n                        id: address,\n                        ethAddress: {\n                            address: address,\n                            resolvingState: ResolvingStates.Initial,\n                            ensName,\n                        },\n                    },\n                }\n            },\n        },\n        setResolvingState(state, action: PayloadAction<ResolvingStatePayload>) {\n            const { id, resolvingState } = action.payload\n            state.addressesById[id].resolvingState = resolvingState\n        },\n        setENSName(state, action: PayloadAction<ENSNamePayload>) {\n            const { id, ensName } = action.payload\n            state.addressesById[id].ensName = ensName\n        },\n        setCheckAddressId(state, action: PayloadAction<AddressId>) {\n            state.checkAddressId = action.payload\n        },\n        setCheckAddressState(state, action: PayloadAction<CheckAddressStates>) {\n            state.checkAddressState = action.payload\n        },\n        setWalletAddressId(state, action: PayloadAction<AddressId>) {\n            state.prevWalletAddressId = state.walletAddressId\n            state.walletAddressId = action.payload\n        },\n        setEtherscanContractName(\n            state,\n            action: PayloadAction<EtherscanContractNamePayload>\n        ) {\n            const { id, esContractName } = action.payload\n            state.addressesById[id].esContractName = esContractName\n        },\n    },\n})\n\nexport const {\n    addAddress,\n    setResolvingState,\n    setENSName,\n    setCheckAddressId,\n    setCheckAddressState,\n    setWalletAddressId,\n    setEtherscanContractName,\n} = addressSlice.actions\n\nexport default addressSlice.reducer\n\nexport const fetchEtherscanNameThunk = (\n    addressId: AddressId\n): AppThunk => async (dispatch: AppDispatch, getState) => {\n    const { networkId } = getState().onboard\n    const apiKey = 'THS8KWYM6KZ8WBP3DXKUDR7UKCRB8YIRGH'\n    let apiHost\n    switch (networkId) {\n        case 1:\n            // mainnet\n            apiHost = 'api.etherscan.io'\n            break\n        case 3:\n            // Ropsten\n            apiHost = 'api-ropsten.etherscan.io'\n            break\n        default:\n            throw Error(`Network ${networkId} not supported`)\n    }\n    const requestUrl = `https://${apiHost}/api?module=contract&action=getsourcecode&address=${addressId}&apikey=${apiKey}`\n    const response = await fetch(requestUrl)\n    const data = await response.json()\n    if (data.message === 'OK') {\n        const contractName: string = data?.result[0]?.ContractName\n        if (contractName?.length) {\n            dispatch(\n                setEtherscanContractName({\n                    id: addressId,\n                    esContractName: contractName,\n                })\n            )\n        }\n    } else {\n        console.log(\n            `Got message ${data.message} fetching contract data from Etherscan API.`\n        )\n    }\n}\n\n/*\n *  Lookup ENS name and add resolved address if successfull\n */\nconst resolveAndAddENSName = (\n    ensName: string,\n    dispatch: AppDispatch,\n    web3: Web3\n) => {\n    return new Promise<AddressId>(async (resolve, reject) => {\n        console.log(`Start resolveAndAddENSName for ${ensName}`)\n        let resolvedAddress\n        try {\n            resolvedAddress = (\n                await web3.eth.ens.getAddress(ensName)\n            ).toLowerCase()\n            console.log(`Resolved ${ensName} to ${resolvedAddress}`)\n            dispatch(addAddress(resolvedAddress, ensName))\n        } catch (e) {\n            console.log('Could not resolve ' + ensName)\n            reject('Could not resolve ' + ensName)\n        }\n        console.log(`End resolveAndAddENSName for ${ensName}`)\n        resolve(resolvedAddress)\n    })\n}\n\n/*\n * Add address and do reverse ENS lookup in background\n */\nconst resolveAndAddAddress = (\n    address: string,\n    dispatch: AppDispatch,\n    web3: Web3\n) => {\n    return new Promise<AddressId>(async resolve => {\n        // first add plain address\n        dispatch(addAddress(address))\n\n        // look for reverse ENS name\n        dispatch(\n            setResolvingState({\n                id: address,\n                resolvingState: ResolvingStates.ResolvingReverse,\n            })\n        )\n        try {\n            const reverseENSLookupName = address.substr(2) + '.addr.reverse'\n            const ResolverContract = await web3.eth.ens.resolver(\n                reverseENSLookupName\n            )\n            const reverseENS = await ResolverContract.methods\n                .name(namehash.hash(reverseENSLookupName))\n                .call()\n            console.log(`Got reverseENS: ${reverseENS}`)\n            // add ENS name to plain address\n            dispatch(\n                setENSName({\n                    id: address,\n                    ensName: reverseENS,\n                })\n            )\n        } catch (error) {\n            // console.log(`Error getting reverse ENS: ${error}`)\n        }\n        dispatch(\n            setResolvingState({\n                id: address,\n                resolvingState: ResolvingStates.Resolved,\n            })\n        )\n        resolve(address)\n    })\n}\n\nexport const redirectToAddress = (\n    addressId: AddressId,\n    history: H.History,\n    replace = false\n): AppThunk => (dispatch: AppDispatch, getState) => {\n    addressId = addressId.toLowerCase()\n    const checkAddress = getState().addresses.addressesById[addressId]\n    // history.push(`/address/${checkAddress.ensName ?? checkAddress.address}`)\n    const func = replace ? history.replace : history.push\n    if (checkAddress.ensName) {\n        console.log(`Routing to /address/${checkAddress.ensName}`)\n        func(`/address/${checkAddress.ensName}`)\n    } else {\n        console.log(`Routing to /address/${checkAddress.address}`)\n        func(`/address/${checkAddress.address}`)\n    }\n}\n\nexport const addAddressThunk = (\n    address: string,\n    history: H.History | undefined = undefined\n): AppThunk => async (dispatch: AppDispatch, getState) => {\n    const web3 = getState().onboard.web3\n    address = address.toLowerCase()\n    let addressId\n    if (address.endsWith('.eth')) {\n        // is ENS name already known?\n        const known = Object.values(getState().addresses.addressesById).filter(\n            addressEntry => addressEntry?.ensName?.toLowerCase() === address\n        )\n        addressId = known.length ? known[0].address : undefined\n        if (!addressId) {\n            // not known, try to resolve it\n            try {\n                addressId = await resolveAndAddENSName(address, dispatch, web3)\n            } catch (e) {\n                // provided name can not be resolved\n                return\n            }\n        }\n    } else {\n        // address is plain eth address\n        addressId = address\n        // is address already known?\n        if (\n            !Object.keys(getState().addresses.addressesById).includes(address)\n        ) {\n            // add address and look for reverse ENS in background\n            addressId = await resolveAndAddAddress(address, dispatch, web3)\n        }\n    }\n    // redirect to address if requested\n    history && dispatch(redirectToAddress(addressId, history))\n}\n\nexport const setAddressFromParamsThunk = (\n    checkAddress: string\n): AppThunk => async (dispatch: AppDispatch, getState) => {\n    const web3 = getState().onboard.web3\n    if (!web3) {\n        console.log(`Cant set address ${checkAddress} - web3 missing!`)\n        return\n    }\n\n    if (checkAddress.endsWith('.eth')) {\n        // checkAddress is ENS name\n        // TODO: dispatch(setCheckAddressENSName(checkAddress)\n        dispatch(setCheckAddressState(CheckAddressStates.Resolving))\n        try {\n            const addressId = await resolveAndAddENSName(\n                checkAddress,\n                dispatch,\n                web3\n            )\n            if (addressId === zeroAddress) {\n                throw Error(`${checkAddress} resolved to ${zeroAddress}`)\n            } else {\n                dispatch(setCheckAddressId(addressId))\n                dispatch(setCheckAddressState(CheckAddressStates.Valid))\n            }\n        } catch (e) {\n            dispatch(setCheckAddressState(CheckAddressStates.Invalid))\n        }\n    } else {\n        // checkAddress is plain eth address.\n        checkAddress = checkAddress.toLowerCase()\n        const validAddress = /^(0x)?[0-9a-f]{40}$/i.test(checkAddress)\n        if (validAddress) {\n            resolveAndAddAddress(checkAddress, dispatch, web3)\n            dispatch(setCheckAddressState(CheckAddressStates.Valid))\n            dispatch(setCheckAddressId(checkAddress))\n        } else {\n            dispatch(setCheckAddressState(CheckAddressStates.Invalid))\n        }\n    }\n}\n\nexport const setWalletAddressThunk = (\n    walletAddressId: string,\n    history: H.History\n): AppThunk => async (dispatch: AppDispatch, getState) => {\n    if (\n        !Object.keys(getState().addresses.addressesById).includes(\n            walletAddressId\n        )\n    ) {\n        console.log(`Got new address from wallet: ${walletAddressId}`)\n        const web3 = getState().onboard.web3\n        await resolveAndAddAddress(walletAddressId, dispatch, web3)\n    } else {\n        console.log(`Got known address from wallet: ${walletAddressId}`)\n    }\n    dispatch(setWalletAddressId(walletAddressId))\n\n    // When user changes the wallet address, assume that he wants to check the selected address\n    const prevWalletAddressId = getState().addresses.prevWalletAddressId\n    if (prevWalletAddressId && prevWalletAddressId !== walletAddressId) {\n        console.log(\n            `setWalletAddressThunk: redirecting to new wallet address ${walletAddressId}`\n        )\n        dispatch(redirectToAddress(walletAddressId, history))\n    }\n}\n","import { Helpers } from 'bnc-onboard/dist/src/interfaces'\n\nconst Logo = `\n<svg\n        xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n        xmlns:cc=\"http://creativecommons.org/ns#\"\n        xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n        xmlns:svg=\"http://www.w3.org/2000/svg\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"\n        xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n        version=\"1.1\"\n        id=\"图层_1\"\n        x=\"0px\"\n        y=\"0px\"\n        viewBox=\"0 0 769.56256 772.01001\"\n        xml:space=\"preserve\"\n        sodipodi:docname=\"imToken-onlyLogo_noMargin.svg\"\n        width=\"769.56256\"\n        height=\"772.01001\"\n        inkscape:version=\"0.92.4 5da689c313, 2019-01-14\"><metadata\n   id=\"metadata18\"><rdf:RDF><cc:Work\n       rdf:about=\"\"><dc:format>image/svg+xml</dc:format><dc:type\n        rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" /><dc:title></dc:title></cc:Work></rdf:RDF></metadata><defs\n        id=\"defs16\" /><sodipodi:namedview\n        pagecolor=\"#ffffff\"\n        bordercolor=\"#666666\"\n        borderopacity=\"1\"\n        objecttolerance=\"10\"\n        gridtolerance=\"10\"\n        guidetolerance=\"10\"\n        inkscape:pageopacity=\"0\"\n        inkscape:pageshadow=\"2\"\n        inkscape:window-width=\"1839\"\n        inkscape:window-height=\"1125\"\n        id=\"namedview14\"\n        showgrid=\"false\"\n        inkscape:zoom=\"0.30729167\"\n        inkscape:cx=\"445.85836\"\n        inkscape:cy=\"390.87393\"\n        inkscape:window-x=\"1872\"\n        inkscape:window-y=\"467\"\n        inkscape:window-maximized=\"0\"\n        inkscape:current-layer=\"图层_1\" />\n    <style\n            type=\"text/css\"\n            id=\"style2\">\n\t.st0{fill:url(#path-1-copy-7_1_);}\n\t.st1{fill:#FFFFFF;}\n</style>\n    <g\n            id=\"Group\"\n            transform=\"matrix(4.0738988,0,0,4.0738988,-1436.4536,-1166.3541)\">\n\t<g\n            id=\"icon_imTokenLogo\">\n\n\t\t\t<linearGradient\n                    id=\"path-1-copy-7_1_\"\n                    gradientUnits=\"userSpaceOnUse\"\n                    x1=\"-229.26199\"\n                    y1=\"763.88239\"\n                    x2=\"-230.62849\"\n                    y2=\"762.52502\"\n                    gradientTransform=\"matrix(134.3987,0,0,-134.8504,31348.697,103302.03)\">\n\t\t\t<stop\n                    offset=\"0\"\n                    style=\"stop-color:#11C4D1\"\n                    id=\"stop4\" />\n                <stop\n                        offset=\"1\"\n                        style=\"stop-color:#0062AD\"\n                        id=\"stop6\" />\n\t\t</linearGradient>\n        <path\n                id=\"path-1-copy-7\"\n                class=\"st0\"\n                d=\"m 541.5,416.1 c 0,0 0,19.8 -2.1,28.3 -2.1,8.6 -6.1,14.5 -10.4,18.9 -4.4,4.4 -10.2,8.4 -19,10.5 -8.9,2.1 -28.1,2 -28.1,2 h -69.8 c 0,0 -19.7,0 -28.2,-2.1 -8.5,-2.2 -14.5,-6.1 -18.9,-10.5 -4.4,-4.4 -8.4,-10.2 -10.4,-19.1 -2.1,-8.9 -2,-28.1 -2,-28.1 v -70 c 0,0 0,-19.8 2.1,-28.3 2.1,-8.6 6.1,-14.5 10.4,-18.9 4.4,-4.4 10.2,-8.4 19,-10.5 8.9,-2.1 28.1,-2 28.1,-2 H 482 c 0,0 19.7,0 28.2,2.1 8.5,2.2 14.5,6.1 18.9,10.5 4.4,4.4 8.4,10.2 10.4,19.1 2,8.9 2,28.1 2,28.1 z\"\n                style=\"fill:url(#path-1-copy-7_1_)\"\n                inkscape:connector-curvature=\"0\" />\n        <path\n                id=\"Combined-Shape\"\n                class=\"st1\"\n                d=\"m 511.9,344.2 c 3.9,53.9 -31.9,79.5 -64,82.3 -29.8,2.6 -57.8,-15 -60.2,-42.3 -2,-22.5 12.4,-32.2 23.7,-33.1 11.6,-1 21.3,6.7 22.2,16.1 0.8,9 -5,13.2 -9.1,13.5 -3.2,0.3 -7.2,-1.6 -7.6,-5.6 -0.3,-3.5 1.1,-3.9 0.7,-7.6 -0.6,-6.6 -6.5,-7.3 -9.7,-7 -3.9,0.3 -11,4.8 -10.1,15.8 1,11.1 12,19.9 26.4,18.6 15.6,-1.4 26.5,-13.1 27.3,-29.6 0,-0.9 0.2,-1.7 0.6,-2.5 0,0 0,0 0,0 0.2,-0.3 0.3,-0.6 0.6,-0.9 0,0 0,0 0,0 0.4,-0.6 0.8,-1.1 1.3,-1.6 0,0 0,0 0,0 0.4,-0.4 0.9,-0.9 1.4,-1.4 6.8,-6.2 31.4,-21 54.5,-16.4 0.2,0 0.4,0.1 0.5,0.2 0.9,0 1.4,0.7 1.5,1.5\"\n                inkscape:connector-curvature=\"0\"\n                style=\"fill:#ffffff\" />\n\t</g>\n</g>\n</svg>\n`\n\nconst imToken = {\n    name: 'imToken',\n    svg: Logo,\n    wallet: async (helpers: Helpers) => {\n        const { createModernProviderInterface } = helpers\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const windowAny = window as any\n        const provider = windowAny.ethereum\n        const correctWallet = windowAny.web3?.currentProvider?.isImToken\n        return {\n            provider,\n            interface: correctWallet\n                ? createModernProviderInterface(provider)\n                : null,\n        }\n    },\n    link: 'https://token.im/',\n    mobile: true,\n    desktop: true,\n}\n\nexport default imToken\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport Onboard from 'bnc-onboard'\nimport Web3 from 'web3'\nimport * as H from 'history'\nimport { AppDispatch, AppThunk } from '../../app/store'\nimport { API, Wallet, WalletInitOptions } from 'bnc-onboard/dist/src/interfaces'\nimport { setWalletAddressThunk } from '../addressInput/AddressSlice'\nimport imToken from './wallets/imToken'\nimport apiKeys from '../../api/apikeys'\n\nconst infuraCredentials = apiKeys.infura[1]\nconst onboardCredentials = apiKeys.onboard[1]\n\nconst wallets: Partial<WalletInitOptions>[] = [\n    { walletName: 'metamask', preferred: true },\n    { walletName: 'coinbase', preferred: true },\n    {\n        walletName: 'walletConnect',\n        infuraKey: infuraCredentials.apikey,\n        preferred: true,\n    },\n    { walletName: 'trust' },\n    { walletName: 'dapper' },\n    { walletName: 'authereum', preferred: true },\n    { walletName: 'opera', preferred: true },\n    { walletName: 'operaTouch' },\n    { walletName: 'torus' },\n    { walletName: 'unilogin', preferred: true },\n    { walletName: 'status' },\n    {\n        walletName: 'ledger',\n        rpcUrl: `${infuraCredentials.endpoint}${infuraCredentials.apikey}`,\n        preferred: true,\n    },\n    {\n        walletName: 'trezor',\n        appUrl: 'https://tac.dappstar.io',\n        email: 'michael@m-bauer.org',\n        rpcUrl: `${infuraCredentials.endpoint}${infuraCredentials.apikey}`,\n        preferred: true,\n    },\n    imToken,\n]\n\n// Define contents of onboard state\ninterface OnboardState {\n    onboardAPI: API | null\n    web3?: Web3\n    wallet?: Wallet\n    networkId: number\n    requiredNetworkId: number\n}\n\nconst initialState: OnboardState = {\n    networkId: 0,\n    requiredNetworkId: 1,\n    onboardAPI: null,\n    wallet: undefined,\n}\n\nconst onboardSlice = createSlice({\n    name: 'onboard',\n    initialState: initialState,\n    reducers: {\n        setOnboardAPI(state, action: PayloadAction<API>) {\n            state.onboardAPI = action.payload\n        },\n        setWallet(state, action: PayloadAction<Wallet>) {\n            state.wallet = action.payload\n        },\n        setWeb3Instance(state, action: PayloadAction<Web3>) {\n            state.web3 = action.payload\n        },\n        setNetworkId(state, action: PayloadAction<number>) {\n            state.networkId = action.payload\n        },\n        setRequiredNetworkId(state, action: PayloadAction<number>) {\n            state.requiredNetworkId = action.payload\n        },\n    },\n})\n\nexport const {\n    setOnboardAPI,\n    setNetworkId,\n    setWeb3Instance,\n    setWallet,\n    setRequiredNetworkId,\n} = onboardSlice.actions\n\nexport default onboardSlice.reducer\n\nexport const checkWallet = (): AppThunk => async (\n    dispatch: AppDispatch,\n    getState\n) => {\n    console.log(`checking wallet...`)\n    const onboardAPI = getState().onboard.onboardAPI\n    if (onboardAPI) {\n        const result = await onboardAPI.walletCheck()\n        console.log(`walletCheck result: ${result}`)\n    } else {\n        console.log(`dispatched checkWallet() without initialization...`)\n    }\n}\n\nexport const selectWallet = (history: H.History): AppThunk => async (\n    dispatch: AppDispatch,\n    getState\n) => {\n    console.log(`Selecting wallet...`)\n    const onboardAPI = getState().onboard.onboardAPI\n    if (onboardAPI) {\n        const result = await onboardAPI.walletSelect()\n        if (!result) {\n            // user closed modal without selecting a wallet. If there was a\n            // wallet selected previously just keep using it. Otherwise, send\n            // her back to home page.\n            // Should actually just check for getState().wallet below, but unfortunately the wallet object is\n            // existing in onboardAPI.getState(), but all members are 'null'. This is not expected\n            // according to typescript defintions.\n            if (!onboardAPI.getState().wallet?.name) {\n                console.log(`No wallet selected.`)\n                history.push('/')\n            }\n        } else {\n            // to get access to account\n            dispatch(checkWallet())\n        }\n    } else {\n        console.log(`dispatched selectWallet() without initialization...`)\n    }\n}\n\nexport const setRequiredNetworkIdThunk = (networkId: number): AppThunk => (\n    dispatch: AppDispatch,\n    getState\n) => {\n    dispatch(setRequiredNetworkId(networkId))\n    const onboardAPI = getState().onboard.onboardAPI\n    if (onboardAPI) {\n        // update existing onboardAPI object\n        onboardAPI.config({ networkId: networkId })\n        // issue checkWallet to make sure user has selected expected network in e.g. Metamask\n        dispatch(checkWallet())\n    } else {\n        // onboardAPI not yet initialized\n    }\n}\n\nexport const initialize = (history: H.History): AppThunk => async (\n    dispatch: AppDispatch,\n    getState\n) => {\n    const requiredNetworkId = getState().onboard.requiredNetworkId\n    console.log(`Initializing OnBoard.js for networkId ${requiredNetworkId}...`)\n    const onboard = Onboard({\n        dappId: onboardCredentials.apikey,\n        networkId: requiredNetworkId,\n        subscriptions: {\n            wallet: (wallet) => {\n                // store selected wallet\n                dispatch(setWallet(wallet))\n                dispatch(setWeb3Instance(new Web3(wallet.provider)))\n            },\n            address: (addressId) => {\n                if (addressId) {\n                    console.log(`Wallet address changed to ${addressId}!`)\n                    dispatch(\n                        setWalletAddressThunk(addressId.toLowerCase(), history)\n                    )\n                } else {\n                    console.log(`No access to wallet address`)\n                }\n            },\n            network: (networkId) => {\n                const prevNetworkId = getState().onboard.networkId\n                if (prevNetworkId !== 0 && prevNetworkId !== networkId) {\n                    console.log(\n                        `Switching network from ${prevNetworkId} to ${networkId}`\n                    )\n                }\n                dispatch(setRequiredNetworkIdThunk(networkId))\n                dispatch(setNetworkId(networkId))\n            },\n            balance: () => {\n                /* do nothing*/\n            },\n        },\n        walletSelect: {\n            heading: '',\n            description: '',\n            // eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n            // @ts-ignore\n            wallets: wallets,\n        },\n    })\n    dispatch(setOnboardAPI(onboard))\n}\n","import { AllowanceId } from '../allowancesList/AllowancesListSlice'\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit'\n\nexport enum TransactionStates {\n    INITIAL,\n    SUBMITTED,\n    CONFIRMED,\n    FAILED,\n}\n\nexport type TransactionId = string\nexport interface EditAllowanceTransaction {\n    transactionId: TransactionId\n    allowanceId: AllowanceId\n    transactionState: TransactionStates\n    transactionHash?: string\n    error?: string\n}\n\ninterface TransactionTrackerState {\n    transactionsById: Record<TransactionId, EditAllowanceTransaction>\n}\n\ninterface UpdateTransactionPayload {\n    transactionId: TransactionId\n    transactionState?: TransactionStates\n    transactionHash?: string\n    error?: string\n}\n\nconst initialState: TransactionTrackerState = {\n    transactionsById: {},\n}\n\nconst TransactionTrackerSlice = createSlice({\n    name: 'transactionTracker',\n    initialState: initialState,\n    reducers: {\n        addTransaction(state, action: PayloadAction<EditAllowanceTransaction>) {\n            const editAllowanceTransaction = action.payload\n            state.transactionsById[\n                editAllowanceTransaction.transactionId\n            ] = editAllowanceTransaction\n        },\n        updateTransaction(\n            state,\n            action: PayloadAction<UpdateTransactionPayload>\n        ) {\n            const {\n                transactionId,\n                transactionState,\n                error,\n                transactionHash,\n            } = action.payload\n            transactionState &&\n                (state.transactionsById[\n                    transactionId\n                ].transactionState = transactionState)\n            error && (state.transactionsById[transactionId].error = error)\n            transactionHash &&\n                (state.transactionsById[\n                    transactionId\n                ].transactionHash = transactionHash)\n        },\n    },\n})\n\nexport const {\n    addTransaction,\n    updateTransaction,\n} = TransactionTrackerSlice.actions\nexport default TransactionTrackerSlice.reducer\n","module.exports = __webpack_public_path__ + \"static/media/gitcoinIcon.2c2a98ad.png\";","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 873;","interface ContractMetadata {\n    name: string\n    symbol: string\n}\ninterface ContractInfo {\n    [key: string]: ContractMetadata\n}\n\nexport interface WellKnownContracts {\n    [key: number]: ContractInfo\n}\n\nexport const wellKnownContracts: WellKnownContracts = {\n    // main network\n    1: {\n        '0x89d24a6b4ccb1b6faa2625fe562bdd9a23260359': {\n            name: 'Sai Stablecoin',\n            symbol: 'SAI',\n        },\n        '0x9f8f72aa9304c8b593d555f12ef6589cc3a579a2': {\n            name: 'Maker Token',\n            symbol: 'MKR',\n        },\n        '0xecf8f87f810ecf450940c9f60066b4a7a501d6a7': {\n            name: 'Old Wrapped Ether',\n            symbol: 'WETH',\n        },\n        '0xc66ea802717bfb9833400264dd12c2bceaa34a6d': {\n            name: 'Old Maker Token',\n            symbol: 'MKR',\n        },\n        '0xbb9bc244d798123fde783fcc1c72d3bb8c189413': {\n            name: 'TheDAO Token',\n            symbol: 'TheDAO',\n        },\n        '0x86fa049857e0209aa7d9e616f7eb3b3b78ecfdb0': {\n            name: 'EOS: Old Token',\n            symbol: 'EOS',\n        },\n    },\n    // Ropsten\n    3: {},\n}\n\nexport default wellKnownContracts\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { v4 as uuidv4 } from 'uuid'\nimport { AppThunk } from '../../app/store'\nimport wellKnownContracts from '../../utils/wellKnownContracts'\nimport { ERC20DetailedInstance } from '../../contracts'\nimport ERC20Detailed from 'contracts'\nimport { AddressId, addAddressThunk } from 'features/addressInput/AddressSlice'\nimport {\n    AllowanceId,\n    fetchAllowanceValueThunk,\n} from '../allowancesList/AllowancesListSlice'\nimport {\n    addTransaction,\n    TransactionStates,\n    updateTransaction,\n} from 'features/transactionTracker/TransactionTrackerSlice'\nimport BN from 'bn.js'\nimport { setNetworkId } from '../onboard/onboardSlice'\n\ninterface TokenContract {\n    addressId: AddressId\n    name: string\n    symbol: string\n    decimals: BN\n    totalSupply: BN\n    contractInstance: ERC20DetailedInstance\n}\ninterface TokenContractPayload {\n    id: AddressId\n    tokenContract: TokenContract\n}\n\ninterface TokenContractsState {\n    contractsById: Record<AddressId, TokenContract>\n}\n\nconst initialState: TokenContractsState = {\n    contractsById: {},\n}\n\nconst tokenContractSlice = createSlice({\n    name: 'tokenContracts',\n    initialState: initialState,\n    reducers: {\n        addContract: {\n            reducer(state, action: PayloadAction<TokenContractPayload>) {\n                const { id, tokenContract } = action.payload\n                state.contractsById[id] = tokenContract\n            },\n            prepare(\n                contractAddress: AddressId,\n                tokenName: string,\n                tokenSymbol: string,\n                decimals: BN,\n                totalSupply: BN,\n                contractInstance: ERC20Detailed.ERC20DetailedInstance\n            ) {\n                return {\n                    payload: {\n                        id: contractAddress,\n                        tokenContract: {\n                            addressId: contractAddress,\n                            name: tokenName,\n                            symbol: tokenSymbol,\n                            decimals,\n                            totalSupply,\n                            contractInstance,\n                        },\n                    },\n                }\n            },\n        },\n    },\n    extraReducers: {\n        [setNetworkId.type](state, action: PayloadAction<number>) {\n            const networkId = action.payload\n            console.log(\n                `Clearing token contracts due to network change to ${networkId}`\n            )\n            state.contractsById = {}\n        },\n    },\n})\n\nexport const { addContract } = tokenContractSlice.actions\n\nexport default tokenContractSlice.reducer\n\nexport const addContractThunk = (\n    contractInstance: ERC20Detailed.ERC20DetailedInstance\n): AppThunk => async (dispatch, getState) => {\n    const { networkId } = getState().onboard\n    const contractAddress = contractInstance.address.toLowerCase()\n    let tokenName = ''\n    let tokenSymbol = ''\n    // Some contracts like MKR and SAI do not implement the correct ERC20 name and symbol.\n    // Get their data from hardocded fallback\n    if (Object.keys(wellKnownContracts[networkId]).includes(contractAddress)) {\n        tokenName = wellKnownContracts[networkId][contractAddress].name\n        tokenSymbol = wellKnownContracts[networkId][contractAddress].symbol\n    } else {\n        try {\n            tokenName = await contractInstance.name()\n            tokenSymbol = await contractInstance.symbol()\n        } catch (error) {\n            // Most likely token contract does not implement the name() method. Ignore error.\n            console.log(`Failed to get name/symbol of contract at ${contractAddress}. Please raise\n                an issue to add this token at https://github.com/TripleSpeeder/token-allowance-checker/issues!`)\n        }\n    }\n    let decimals = new BN('0')\n    try {\n        decimals = await contractInstance.decimals()\n    } catch (error) {\n        console.log(\n            `Contract at ${contractAddress} does not provide decimals(). Assuming 0.`\n        )\n    }\n    let totalSupply\n    try {\n        totalSupply = await contractInstance.totalSupply()\n    } catch (error) {\n        console.log(\n            `Failed to call totalSupply() at ${contractAddress}. Ignoring contract.`\n        )\n        return\n    }\n    dispatch(addAddressThunk(contractAddress))\n    dispatch(\n        addContract(\n            contractAddress,\n            tokenName,\n            tokenSymbol,\n            decimals,\n            totalSupply,\n            contractInstance\n        )\n    )\n}\n\nexport const setAllowanceThunk = (\n    tokenContractId: AddressId,\n    spender: AddressId,\n    allowance: BN,\n    allowanceId: AllowanceId\n): AppThunk => async (dispatch, getState) => {\n    console.log(\n        `Setting new allowance ${allowance.toString()} for tokenContractId ${tokenContractId}`\n    )\n    const { contractInstance } = getState().tokenContracts.contractsById[\n        tokenContractId\n    ]\n    const { walletAddressId } = getState().addresses\n    const transactionId: string = uuidv4()\n    dispatch(\n        addTransaction({\n            transactionId,\n            allowanceId,\n            transactionState: TransactionStates.SUBMITTED,\n        })\n    )\n    try {\n        const result = await contractInstance.approve(\n            spender,\n            allowance.toString(),\n            {\n                from: walletAddressId,\n            }\n        )\n        console.log(`transaction confirmed: ${result.tx}. Reloading allowance.`)\n        dispatch(\n            updateTransaction({\n                transactionId,\n                transactionState: TransactionStates.CONFIRMED,\n                transactionHash: result.tx,\n            })\n        )\n        dispatch(fetchAllowanceValueThunk(allowanceId))\n    } catch (e) {\n        console.log(`Error while approving: ${e.message}`)\n        dispatch(\n            updateTransaction({\n                transactionId,\n                transactionState: TransactionStates.FAILED,\n                error: e.message,\n            })\n        )\n    }\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { AddressId } from 'features/addressInput/AddressSlice'\nimport { QueryStates } from '../allowancesList/AllowancesListSlice'\nimport BN from 'bn.js'\nimport { AppDispatch, AppThunk } from '../../app/store'\n\nexport type BalanceId = string\n\ninterface Balance {\n    id: BalanceId\n    addressId: AddressId\n    tokenContractId: AddressId\n    queryState: QueryStates\n    value: BN\n}\n\ninterface BalancePayload {\n    id: BalanceId\n    balance: Balance\n}\n\ninterface ValuePayload {\n    id: BalanceId\n    value: BN\n}\n\ninterface QueryStatePayload {\n    id: BalanceId\n    queryState: QueryStates\n}\n\ninterface BalancesState {\n    balancesById: Record<BalanceId, Balance>\n}\n\nconst initialState: BalancesState = {\n    balancesById: {},\n}\n\nconst balancesSlice = createSlice({\n    name: 'balances',\n    initialState: initialState,\n    reducers: {\n        addBalance: {\n            reducer(state, action: PayloadAction<BalancePayload>) {\n                const { id, balance } = action.payload\n                state.balancesById[id] = balance\n            },\n            prepare(\n                id: BalanceId,\n                addressId: AddressId,\n                tokenContractId: AddressId\n            ) {\n                return {\n                    payload: {\n                        id: id,\n                        balance: {\n                            id,\n                            addressId,\n                            tokenContractId,\n                            queryState: QueryStates.QUERY_STATE_INITIAL,\n                            value: new BN('-1'),\n                        },\n                    },\n                }\n            },\n        },\n        setBalanceValue(state, action: PayloadAction<ValuePayload>) {\n            const { id, value } = action.payload\n            state.balancesById[id].value = value\n        },\n        setBalanceQuerystate(state, action: PayloadAction<QueryStatePayload>) {\n            const { id, queryState } = action.payload\n            state.balancesById[id].queryState = queryState\n        },\n    },\n})\n\nexport const buildBalanceId = (\n    addressId: AddressId,\n    tokenContractId: AddressId\n) => {\n    return `${addressId}-${tokenContractId}`\n}\n\nexport const {\n    addBalance,\n    setBalanceValue,\n    setBalanceQuerystate,\n} = balancesSlice.actions\n\n/*\n Create a new balance entry and fetch balance\n */\nexport const addBalanceThunk = (\n    addressId: AddressId,\n    tokenContractId: AddressId\n): AppThunk => async (dispatch: AppDispatch, getState) => {\n    const balanceId = buildBalanceId(addressId, tokenContractId)\n    dispatch(addBalance(balanceId, addressId, tokenContractId))\n    dispatch(\n        setBalanceQuerystate({\n            id: balanceId,\n            queryState: QueryStates.QUERY_STATE_RUNNING,\n        })\n    )\n    const tokenContract = getState().tokenContracts.contractsById[\n        tokenContractId\n    ]\n    const address = getState().addresses.addressesById[addressId]\n    try {\n        const balance = await tokenContract.contractInstance.balanceOf(\n            address.address\n        )\n        dispatch(\n            setBalanceValue({\n                id: balanceId,\n                value: balance,\n            })\n        )\n        dispatch(\n            setBalanceQuerystate({\n                id: balanceId,\n                queryState: QueryStates.QUERY_STATE_COMPLETE,\n            })\n        )\n    } catch (error) {\n        console.log(`Error getting balance: ${error}`)\n        dispatch(\n            setBalanceQuerystate({\n                id: balanceId,\n                queryState: QueryStates.QUERY_STATE_ERROR,\n            })\n        )\n    }\n}\nexport default balancesSlice.reducer\n"],"sourceRoot":""}