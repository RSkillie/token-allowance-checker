{"version":3,"sources":["../node_modules/@ledgerhq/errors/dist/index.js","../../src/Eth.js","../../src/utils.js","../node_modules/@ledgerhq/hw-app-eth/node_modules/bignumber.js/bignumber.js","../../src/index.ts","../node_modules/@ledgerhq/hw-app-eth/node_modules/bn.js/lib/bn.js"],"names":["errorClasses","deserializers","addCustomErrorDeserializer","name","deserializer","createCustomErrorClass","C","message","fields","Object","assign","this","stack","Error","prototype","EthAppPleaseEnableContractData","TransportRaceCondition","TransportError","id","e","StatusCodes","PIN_REMAINING_ATTEMPTS","INCORRECT_LENGTH","MISSING_CRITICAL_PARAMETER","COMMAND_INCOMPATIBLE_FILE_STRUCTURE","SECURITY_STATUS_NOT_SATISFIED","CONDITIONS_OF_USE_NOT_SATISFIED","INCORRECT_DATA","NOT_ENOUGH_MEMORY_SPACE","REFERENCED_DATA_NOT_FOUND","FILE_ALREADY_EXISTS","INCORRECT_P1_P2","INS_NOT_SUPPORTED","CLA_NOT_SUPPORTED","TECHNICAL_PROBLEM","OK","MEMORY_PROBLEM","NO_EF_SELECTED","INVALID_OFFSET","FILE_NOT_FOUND","INCONSISTENT_FILE","ALGORITHM_NOT_SUPPORTED","INVALID_KCV","CODE_NOT_INITIALIZED","ACCESS_CONDITION_NOT_FULFILLED","CONTRADICTION_SECRET_CODE_STATUS","CONTRADICTION_INVALIDATION","CODE_BLOCKED","MAX_VALUE_REACHED","GP_AUTH_FAILED","LICENSING","HALTED","TransportStatusError","statusCode","statusText","keys","find","k","smsg","code","getAltStatusMessage","statusCodeStr","toString","starkQuantizationTypeMap","eth","erc20","erc721","erc20mintable","erc721mintable","hexBuffer","str","Buffer","maybeHexBuffer","constructor","scrambleKey","transport","paths","splitPath","buffer","boolDisplay","boolChaincode","response","result","publicKeyLength","addressLength","data","send","then","offset","rawTx","toSend","rlpTx","decode","rlpOffset","chainIdPrefix","rlpVrs","encode","chainIdSrc","chainIdBuf","maxChunkSize","chunkSize","i","apduResponse","v","r","s","remapTransactionRelatedErrors","domainSeparator","hashStruct","sourceTokenAddressHex","destinationTokenAddressHex","sourceQuantization","destinationQuantization","amountSell","amountBuy","sourceQuantizationType","destinationQuantizationType","sourceMintableBlobOrTokenId","destinationMintableBlobOrTokenId","transferTokenAddressHex","targetPublicKeyHex","transferQuantization","amountTransfer","conditionalTransferAddressHex","transferQuantizationType","transferMintableBlobOrTokenId","conditionalTransferFact","operationContractHex","operationQuantization","operationQuantizationType","operationMintableBlobOrTokenId","hashHex","path","components","element","number","parseInt","isNaN","foreach","Promise","index","array","callback","res","iterate","arr","globalObject","BigNumber","isNumeric","mathceil","Math","ceil","mathfloor","floor","bignumberError","tooManyDigits","BASE","POWS_TEN","MAX","bitFloor","n","coeffToString","a","z","j","length","charCodeAt","slice","compare","x","y","b","xc","c","yc","l","intCheck","min","max","String","isOdd","toExponential","charAt","toFixedPoint","len","zs","clone","configObject","div","convertBase","parseNumeric","P","valueOf","ONE","DECIMAL_PLACES","ROUNDING_MODE","TO_EXP_NEG","TO_EXP_POS","MIN_EXP","MAX_EXP","CRYPTO","MODULO_MODE","POW_PRECISION","FORMAT","prefix","groupSize","secondaryGroupSize","groupSeparator","decimalSeparator","fractionGroupSize","fractionGroupSeparator","suffix","ALPHABET","alphabet","caseChanged","isNum","_isBigNumber","test","indexOf","replace","search","substring","round","DEBUG","toUpperCase","toLowerCase","push","format","rm","c0","ne","maxOrMin","args","method","m","call","normalise","pop","sd","d","ni","rd","pows10","out","ROUND_UP","ROUND_DOWN","ROUND_CEIL","ROUND_FLOOR","ROUND_HALF_UP","ROUND_HALF_DOWN","ROUND_HALF_EVEN","ROUND_HALF_CEIL","ROUND_HALF_FLOOR","EUCLID","config","set","obj","p","hasOwnProperty","crypto","getRandomValues","randomBytes","EXPONENTIAL_AT","RANGE","isBigNumber","maximum","arguments","lt","minimum","gt","random","random53bitInt","dp","rand","Uint32Array","copy","splice","sum","plus","toBaseOut","baseIn","baseOut","arrL","reverse","sign","callerIsToString","pow","concat","multiply","base","temp","xlo","xhi","carry","klo","khi","aL","bL","cmp","subtract","more","prod","prodL","q","qc","rem","remL","rem0","xi","xL","yc0","yL","yz","NaN","basePrefix","dotAfter","dotBefore","isInfinityOrNaN","whitespaceOrPlus","p1","p2","absoluteValue","abs","comparedTo","decimalPlaces","dividedBy","dividedToIntegerBy","idiv","exponentiatedBy","half","isModExp","nIsBig","nIsNeg","nIsOdd","isInteger","mod","times","integerValue","isEqualTo","eq","isFinite","isGreaterThan","isGreaterThanOrEqualTo","gte","isLessThan","isLessThanOrEqualTo","lte","isNegative","isPositive","isZero","minus","t","xLTy","xe","ye","modulo","multipliedBy","xcL","ycL","ylo","yhi","zc","negated","precision","shiftedBy","squareRoot","sqrt","rep","toFixed","toFormat","split","g1","g2","intPart","fractionPart","isNeg","intDigits","substr","RegExp","toFraction","md","d0","d1","d2","exp","n0","n1","toNumber","toPrecision","toJSON","define","module","exports","assert","val","msg","inherits","ctor","superCtor","super_","TempCtor","BN","endian","isBN","negative","words","red","_init","wordSize","window","require","parseHex4Bits","string","parseHexByte","lowerBound","parseBase","start","end","mul","num","Array","isArray","left","right","_initNumber","_initArray","_parseHex","_parseBase","toArray","w","off","strip","limbLen","limbPow","total","word","imuln","_iaddn","dest","_expand","size","_normSign","inspect","zeros","groupSizes","groupBases","smallMulTo","self","lo","ncarry","rword","maxJ","padding","groupBase","modn","idivn","ret","toBuffer","toArrayLike","ArrayType","byteLength","reqLength","littleEndian","andln","iushrn","clz32","_countBits","_zeroBits","bitLength","hi","zeroBits","toTwos","width","inotn","iaddn","fromTwos","testn","notn","ineg","neg","iuor","ior","or","uor","iuand","iand","and","uand","iuxor","ixor","xor","uxor","bytesNeeded","bitsLeft","setn","bit","wbit","iadd","isub","add","sub","comb10MulTo","mid","o","a0","al0","ah0","a1","al1","ah1","a2","al2","ah2","a3","al3","ah3","a4","al4","ah4","a5","al5","ah5","a6","al6","ah6","a7","al7","ah7","a8","al8","ah8","a9","al9","ah9","b0","bl0","bh0","b1","bl1","bh1","b2","bl2","bh2","b3","bl3","bh3","b4","bl4","bh4","b5","bl5","bh5","b6","bl6","bh6","b7","bl7","bh7","b8","bl8","bh8","b9","bl9","bh9","w0","imul","w1","w2","w3","w4","w5","w6","w7","w8","w9","w10","w11","w12","w13","w14","w15","w16","w17","w18","jumboMulTo","FFTM","mulp","mulTo","hncarry","bigMulTo","makeRBT","N","revBin","rb","permute","rbt","rws","iws","rtws","itws","transform","rtwdf","cos","PI","itwdf","sin","rtwdf_","itwdf_","re","ie","ro","io","rx","guessLen13b","odd","conjugate","normalize13b","ws","convert13b","stub","ph","_","rwst","iwst","nrws","nrwst","niwst","rmws","mulf","muln","sqr","isqr","toBitArray","iushln","bits","carryMask","newCarry","ishln","hint","extended","h","mask","maskedWords","ishrn","shln","ushln","shrn","ushrn","imaskn","maskn","isubn","addn","subn","iabs","_ishlnsubmul","shift","_wordDiv","mode","bhi","diff","qj","divmod","positive","divn","umod","divRound","dm","r2","acc","egcd","A","B","D","g","isEven","yp","xp","im","jm","gcd","_invmp","x1","x2","delta","cmpn","invm","bincn","ucmp","gtn","gten","ltn","lten","eqn","Red","toRed","ctx","convertTo","_forceRed","fromRed","convertFrom","forceRed","redAdd","redIAdd","redSub","redISub","redShl","shl","redMul","_verify2","redIMul","redSqr","_verify1","redISqr","redSqrt","redInvm","redNeg","redPow","primes","k256","p224","p192","p25519","MPrime","tmp","_tmp","K256","P224","P192","P25519","prime","_prime","Mont","imod","rinv","minv","ireduce","rlen","imulK","undefined","_strip","input","output","outLen","prev","next","mod3","one","nOne","lpow","inv","wnd","current","currentLen","mont","u"],"mappings":"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","file":"static/js/19.f5ffa05d.chunk.js","sourcesContent":["/* eslint-disable no-continue */\r\n/* eslint-disable no-unused-vars */\r\n/* eslint-disable no-param-reassign */\r\n/* eslint-disable no-prototype-builtins */\r\nvar errorClasses = {};\r\nvar deserializers = {};\r\nvar addCustomErrorDeserializer = function (name, deserializer) {\r\n    deserializers[name] = deserializer;\r\n};\r\nvar createCustomErrorClass = function (name) {\r\n    var C = function CustomError(message, fields) {\r\n        Object.assign(this, fields);\r\n        this.name = name;\r\n        this.message = message || name;\r\n        this.stack = new Error().stack;\r\n    };\r\n    C.prototype = new Error();\r\n    errorClasses[name] = C;\r\n    return C;\r\n};\r\n// inspired from https://github.com/programble/errio/blob/master/index.js\r\nvar deserializeError = function (object) {\r\n    if (typeof object === \"object\" && object) {\r\n        try {\r\n            // $FlowFixMe FIXME HACK\r\n            var msg = JSON.parse(object.message);\r\n            if (msg.message && msg.name) {\r\n                object = msg;\r\n            }\r\n        }\r\n        catch (e) {\r\n            // nothing\r\n        }\r\n        var error = void 0;\r\n        if (typeof object.name === \"string\") {\r\n            var name_1 = object.name;\r\n            var des = deserializers[name_1];\r\n            if (des) {\r\n                error = des(object);\r\n            }\r\n            else {\r\n                var constructor = name_1 === \"Error\" ? Error : errorClasses[name_1];\r\n                if (!constructor) {\r\n                    console.warn(\"deserializing an unknown class '\" + name_1 + \"'\");\r\n                    constructor = createCustomErrorClass(name_1);\r\n                }\r\n                error = Object.create(constructor.prototype);\r\n                try {\r\n                    for (var prop in object) {\r\n                        if (object.hasOwnProperty(prop)) {\r\n                            error[prop] = object[prop];\r\n                        }\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    // sometimes setting a property can fail (e.g. .name)\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            error = new Error(object.message);\r\n        }\r\n        if (!error.stack && Error.captureStackTrace) {\r\n            Error.captureStackTrace(error, deserializeError);\r\n        }\r\n        return error;\r\n    }\r\n    return new Error(String(object));\r\n};\r\n// inspired from https://github.com/sindresorhus/serialize-error/blob/master/index.js\r\nvar serializeError = function (value) {\r\n    if (!value)\r\n        return value;\r\n    if (typeof value === \"object\") {\r\n        return destroyCircular(value, []);\r\n    }\r\n    if (typeof value === \"function\") {\r\n        return \"[Function: \" + (value.name || \"anonymous\") + \"]\";\r\n    }\r\n    return value;\r\n};\r\n// https://www.npmjs.com/package/destroy-circular\r\nfunction destroyCircular(from, seen) {\r\n    var to = {};\r\n    seen.push(from);\r\n    for (var _i = 0, _a = Object.keys(from); _i < _a.length; _i++) {\r\n        var key = _a[_i];\r\n        var value = from[key];\r\n        if (typeof value === \"function\") {\r\n            continue;\r\n        }\r\n        if (!value || typeof value !== \"object\") {\r\n            to[key] = value;\r\n            continue;\r\n        }\r\n        if (seen.indexOf(from[key]) === -1) {\r\n            to[key] = destroyCircular(from[key], seen.slice(0));\r\n            continue;\r\n        }\r\n        to[key] = \"[Circular]\";\r\n    }\r\n    if (typeof from.name === \"string\") {\r\n        to.name = from.name;\r\n    }\r\n    if (typeof from.message === \"string\") {\r\n        to.message = from.message;\r\n    }\r\n    if (typeof from.stack === \"string\") {\r\n        to.stack = from.stack;\r\n    }\r\n    return to;\r\n}\n\nvar AccountNameRequiredError = createCustomErrorClass(\"AccountNameRequired\");\r\nvar AccountNotSupported = createCustomErrorClass(\"AccountNotSupported\");\r\nvar AmountRequired = createCustomErrorClass(\"AmountRequired\");\r\nvar BluetoothRequired = createCustomErrorClass(\"BluetoothRequired\");\r\nvar BtcUnmatchedApp = createCustomErrorClass(\"BtcUnmatchedApp\");\r\nvar CantOpenDevice = createCustomErrorClass(\"CantOpenDevice\");\r\nvar CashAddrNotSupported = createCustomErrorClass(\"CashAddrNotSupported\");\r\nvar CurrencyNotSupported = createCustomErrorClass(\"CurrencyNotSupported\");\r\nvar DeviceAppVerifyNotSupported = createCustomErrorClass(\"DeviceAppVerifyNotSupported\");\r\nvar DeviceGenuineSocketEarlyClose = createCustomErrorClass(\"DeviceGenuineSocketEarlyClose\");\r\nvar DeviceNotGenuineError = createCustomErrorClass(\"DeviceNotGenuine\");\r\nvar DeviceOnDashboardExpected = createCustomErrorClass(\"DeviceOnDashboardExpected\");\r\nvar DeviceOnDashboardUnexpected = createCustomErrorClass(\"DeviceOnDashboardUnexpected\");\r\nvar DeviceInOSUExpected = createCustomErrorClass(\"DeviceInOSUExpected\");\r\nvar DeviceHalted = createCustomErrorClass(\"DeviceHalted\");\r\nvar DeviceNameInvalid = createCustomErrorClass(\"DeviceNameInvalid\");\r\nvar DeviceSocketFail = createCustomErrorClass(\"DeviceSocketFail\");\r\nvar DeviceSocketNoBulkStatus = createCustomErrorClass(\"DeviceSocketNoBulkStatus\");\r\nvar DisconnectedDevice = createCustomErrorClass(\"DisconnectedDevice\");\r\nvar DisconnectedDeviceDuringOperation = createCustomErrorClass(\"DisconnectedDeviceDuringOperation\");\r\nvar EnpointConfigError = createCustomErrorClass(\"EnpointConfig\");\r\nvar EthAppPleaseEnableContractData = createCustomErrorClass(\"EthAppPleaseEnableContractData\");\r\nvar FeeEstimationFailed = createCustomErrorClass(\"FeeEstimationFailed\");\r\nvar FirmwareNotRecognized = createCustomErrorClass(\"FirmwareNotRecognized\");\r\nvar HardResetFail = createCustomErrorClass(\"HardResetFail\");\r\nvar InvalidXRPTag = createCustomErrorClass(\"InvalidXRPTag\");\r\nvar InvalidAddress = createCustomErrorClass(\"InvalidAddress\");\r\nvar InvalidAddressBecauseDestinationIsAlsoSource = createCustomErrorClass(\"InvalidAddressBecauseDestinationIsAlsoSource\");\r\nvar LatestMCUInstalledError = createCustomErrorClass(\"LatestMCUInstalledError\");\r\nvar UnknownMCU = createCustomErrorClass(\"UnknownMCU\");\r\nvar LedgerAPIError = createCustomErrorClass(\"LedgerAPIError\");\r\nvar LedgerAPIErrorWithMessage = createCustomErrorClass(\"LedgerAPIErrorWithMessage\");\r\nvar LedgerAPINotAvailable = createCustomErrorClass(\"LedgerAPINotAvailable\");\r\nvar ManagerAppAlreadyInstalledError = createCustomErrorClass(\"ManagerAppAlreadyInstalled\");\r\nvar ManagerAppRelyOnBTCError = createCustomErrorClass(\"ManagerAppRelyOnBTC\");\r\nvar ManagerAppDepInstallRequired = createCustomErrorClass(\"ManagerAppDepInstallRequired\");\r\nvar ManagerAppDepUninstallRequired = createCustomErrorClass(\"ManagerAppDepUninstallRequired\");\r\nvar ManagerDeviceLockedError = createCustomErrorClass(\"ManagerDeviceLocked\");\r\nvar ManagerFirmwareNotEnoughSpaceError = createCustomErrorClass(\"ManagerFirmwareNotEnoughSpace\");\r\nvar ManagerNotEnoughSpaceError = createCustomErrorClass(\"ManagerNotEnoughSpace\");\r\nvar ManagerUninstallBTCDep = createCustomErrorClass(\"ManagerUninstallBTCDep\");\r\nvar NetworkDown = createCustomErrorClass(\"NetworkDown\");\r\nvar NoAddressesFound = createCustomErrorClass(\"NoAddressesFound\");\r\nvar NotEnoughBalance = createCustomErrorClass(\"NotEnoughBalance\");\r\nvar NotEnoughBalanceToDelegate = createCustomErrorClass(\"NotEnoughBalanceToDelegate\");\r\nvar NotEnoughBalanceInParentAccount = createCustomErrorClass(\"NotEnoughBalanceInParentAccount\");\r\nvar NotEnoughSpendableBalance = createCustomErrorClass(\"NotEnoughSpendableBalance\");\r\nvar NotEnoughBalanceBecauseDestinationNotCreated = createCustomErrorClass(\"NotEnoughBalanceBecauseDestinationNotCreated\");\r\nvar NoAccessToCamera = createCustomErrorClass(\"NoAccessToCamera\");\r\nvar NotEnoughGas = createCustomErrorClass(\"NotEnoughGas\");\r\nvar NotSupportedLegacyAddress = createCustomErrorClass(\"NotSupportedLegacyAddress\");\r\nvar GasLessThanEstimate = createCustomErrorClass(\"GasLessThanEstimate\");\r\nvar PasswordsDontMatchError = createCustomErrorClass(\"PasswordsDontMatch\");\r\nvar PasswordIncorrectError = createCustomErrorClass(\"PasswordIncorrect\");\r\nvar RecommendSubAccountsToEmpty = createCustomErrorClass(\"RecommendSubAccountsToEmpty\");\r\nvar RecommendUndelegation = createCustomErrorClass(\"RecommendUndelegation\");\r\nvar TimeoutTagged = createCustomErrorClass(\"TimeoutTagged\");\r\nvar UnexpectedBootloader = createCustomErrorClass(\"UnexpectedBootloader\");\r\nvar MCUNotGenuineToDashboard = createCustomErrorClass(\"MCUNotGenuineToDashboard\");\r\nvar RecipientRequired = createCustomErrorClass(\"RecipientRequired\");\r\nvar UnavailableTezosOriginatedAccountReceive = createCustomErrorClass(\"UnavailableTezosOriginatedAccountReceive\");\r\nvar UnavailableTezosOriginatedAccountSend = createCustomErrorClass(\"UnavailableTezosOriginatedAccountSend\");\r\nvar UpdateFetchFileFail = createCustomErrorClass(\"UpdateFetchFileFail\");\r\nvar UpdateIncorrectHash = createCustomErrorClass(\"UpdateIncorrectHash\");\r\nvar UpdateIncorrectSig = createCustomErrorClass(\"UpdateIncorrectSig\");\r\nvar UpdateYourApp = createCustomErrorClass(\"UpdateYourApp\");\r\nvar UserRefusedDeviceNameChange = createCustomErrorClass(\"UserRefusedDeviceNameChange\");\r\nvar UserRefusedAddress = createCustomErrorClass(\"UserRefusedAddress\");\r\nvar UserRefusedFirmwareUpdate = createCustomErrorClass(\"UserRefusedFirmwareUpdate\");\r\nvar UserRefusedAllowManager = createCustomErrorClass(\"UserRefusedAllowManager\");\r\nvar UserRefusedOnDevice = createCustomErrorClass(\"UserRefusedOnDevice\"); // TODO rename because it's just for transaction refusal\r\nvar TransportOpenUserCancelled = createCustomErrorClass(\"TransportOpenUserCancelled\");\r\nvar TransportInterfaceNotAvailable = createCustomErrorClass(\"TransportInterfaceNotAvailable\");\r\nvar TransportRaceCondition = createCustomErrorClass(\"TransportRaceCondition\");\r\nvar TransportWebUSBGestureRequired = createCustomErrorClass(\"TransportWebUSBGestureRequired\");\r\nvar DeviceShouldStayInApp = createCustomErrorClass(\"DeviceShouldStayInApp\");\r\nvar WebsocketConnectionError = createCustomErrorClass(\"WebsocketConnectionError\");\r\nvar WebsocketConnectionFailed = createCustomErrorClass(\"WebsocketConnectionFailed\");\r\nvar WrongDeviceForAccount = createCustomErrorClass(\"WrongDeviceForAccount\");\r\nvar WrongAppForCurrency = createCustomErrorClass(\"WrongAppForCurrency\");\r\nvar ETHAddressNonEIP = createCustomErrorClass(\"ETHAddressNonEIP\");\r\nvar CantScanQRCode = createCustomErrorClass(\"CantScanQRCode\");\r\nvar FeeNotLoaded = createCustomErrorClass(\"FeeNotLoaded\");\r\nvar FeeRequired = createCustomErrorClass(\"FeeRequired\");\r\nvar FeeTooHigh = createCustomErrorClass(\"FeeTooHigh\");\r\nvar SyncError = createCustomErrorClass(\"SyncError\");\r\nvar PairingFailed = createCustomErrorClass(\"PairingFailed\");\r\nvar GenuineCheckFailed = createCustomErrorClass(\"GenuineCheckFailed\");\r\nvar LedgerAPI4xx = createCustomErrorClass(\"LedgerAPI4xx\");\r\nvar LedgerAPI5xx = createCustomErrorClass(\"LedgerAPI5xx\");\r\nvar FirmwareOrAppUpdateRequired = createCustomErrorClass(\"FirmwareOrAppUpdateRequired\");\r\n// db stuff, no need to translate\r\nvar NoDBPathGiven = createCustomErrorClass(\"NoDBPathGiven\");\r\nvar DBWrongPassword = createCustomErrorClass(\"DBWrongPassword\");\r\nvar DBNotReset = createCustomErrorClass(\"DBNotReset\");\r\n/**\r\n * TransportError is used for any generic transport errors.\r\n * e.g. Error thrown when data received by exchanges are incorrect or if exchanged failed to communicate with the device for various reason.\r\n */\r\nfunction TransportError(message, id) {\r\n    this.name = \"TransportError\";\r\n    this.message = message;\r\n    this.stack = new Error().stack;\r\n    this.id = id;\r\n}\r\nTransportError.prototype = new Error();\r\naddCustomErrorDeserializer(\"TransportError\", function (e) { return new TransportError(e.message, e.id); });\r\nvar StatusCodes = {\r\n    PIN_REMAINING_ATTEMPTS: 0x63c0,\r\n    INCORRECT_LENGTH: 0x6700,\r\n    MISSING_CRITICAL_PARAMETER: 0x6800,\r\n    COMMAND_INCOMPATIBLE_FILE_STRUCTURE: 0x6981,\r\n    SECURITY_STATUS_NOT_SATISFIED: 0x6982,\r\n    CONDITIONS_OF_USE_NOT_SATISFIED: 0x6985,\r\n    INCORRECT_DATA: 0x6a80,\r\n    NOT_ENOUGH_MEMORY_SPACE: 0x6a84,\r\n    REFERENCED_DATA_NOT_FOUND: 0x6a88,\r\n    FILE_ALREADY_EXISTS: 0x6a89,\r\n    INCORRECT_P1_P2: 0x6b00,\r\n    INS_NOT_SUPPORTED: 0x6d00,\r\n    CLA_NOT_SUPPORTED: 0x6e00,\r\n    TECHNICAL_PROBLEM: 0x6f00,\r\n    OK: 0x9000,\r\n    MEMORY_PROBLEM: 0x9240,\r\n    NO_EF_SELECTED: 0x9400,\r\n    INVALID_OFFSET: 0x9402,\r\n    FILE_NOT_FOUND: 0x9404,\r\n    INCONSISTENT_FILE: 0x9408,\r\n    ALGORITHM_NOT_SUPPORTED: 0x9484,\r\n    INVALID_KCV: 0x9485,\r\n    CODE_NOT_INITIALIZED: 0x9802,\r\n    ACCESS_CONDITION_NOT_FULFILLED: 0x9804,\r\n    CONTRADICTION_SECRET_CODE_STATUS: 0x9808,\r\n    CONTRADICTION_INVALIDATION: 0x9810,\r\n    CODE_BLOCKED: 0x9840,\r\n    MAX_VALUE_REACHED: 0x9850,\r\n    GP_AUTH_FAILED: 0x6300,\r\n    LICENSING: 0x6f42,\r\n    HALTED: 0x6faa,\r\n};\r\nfunction getAltStatusMessage(code) {\r\n    switch (code) {\r\n        // improve text of most common errors\r\n        case 0x6700:\r\n            return \"Incorrect length\";\r\n        case 0x6800:\r\n            return \"Missing critical parameter\";\r\n        case 0x6982:\r\n            return \"Security not satisfied (dongle locked or have invalid access rights)\";\r\n        case 0x6985:\r\n            return \"Condition of use not satisfied (denied by the user?)\";\r\n        case 0x6a80:\r\n            return \"Invalid data received\";\r\n        case 0x6b00:\r\n            return \"Invalid parameter received\";\r\n    }\r\n    if (0x6f00 <= code && code <= 0x6fff) {\r\n        return \"Internal error, please report\";\r\n    }\r\n}\r\n/**\r\n * Error thrown when a device returned a non success status.\r\n * the error.statusCode is one of the `StatusCodes` exported by this library.\r\n */\r\nfunction TransportStatusError(statusCode) {\r\n    this.name = \"TransportStatusError\";\r\n    var statusText = Object.keys(StatusCodes).find(function (k) { return StatusCodes[k] === statusCode; }) ||\r\n        \"UNKNOWN_ERROR\";\r\n    var smsg = getAltStatusMessage(statusCode) || statusText;\r\n    var statusCodeStr = statusCode.toString(16);\r\n    this.message = \"Ledger device: \" + smsg + \" (0x\" + statusCodeStr + \")\";\r\n    this.stack = new Error().stack;\r\n    this.statusCode = statusCode;\r\n    this.statusText = statusText;\r\n}\r\nTransportStatusError.prototype = new Error();\r\naddCustomErrorDeserializer(\"TransportStatusError\", function (e) { return new TransportStatusError(e.statusCode); });\n\nexport { AccountNameRequiredError, AccountNotSupported, AmountRequired, BluetoothRequired, BtcUnmatchedApp, CantOpenDevice, CantScanQRCode, CashAddrNotSupported, CurrencyNotSupported, DBNotReset, DBWrongPassword, DeviceAppVerifyNotSupported, DeviceGenuineSocketEarlyClose, DeviceHalted, DeviceInOSUExpected, DeviceNameInvalid, DeviceNotGenuineError, DeviceOnDashboardExpected, DeviceOnDashboardUnexpected, DeviceShouldStayInApp, DeviceSocketFail, DeviceSocketNoBulkStatus, DisconnectedDevice, DisconnectedDeviceDuringOperation, ETHAddressNonEIP, EnpointConfigError, EthAppPleaseEnableContractData, FeeEstimationFailed, FeeNotLoaded, FeeRequired, FeeTooHigh, FirmwareNotRecognized, FirmwareOrAppUpdateRequired, GasLessThanEstimate, GenuineCheckFailed, HardResetFail, InvalidAddress, InvalidAddressBecauseDestinationIsAlsoSource, InvalidXRPTag, LatestMCUInstalledError, LedgerAPI4xx, LedgerAPI5xx, LedgerAPIError, LedgerAPIErrorWithMessage, LedgerAPINotAvailable, MCUNotGenuineToDashboard, ManagerAppAlreadyInstalledError, ManagerAppDepInstallRequired, ManagerAppDepUninstallRequired, ManagerAppRelyOnBTCError, ManagerDeviceLockedError, ManagerFirmwareNotEnoughSpaceError, ManagerNotEnoughSpaceError, ManagerUninstallBTCDep, NetworkDown, NoAccessToCamera, NoAddressesFound, NoDBPathGiven, NotEnoughBalance, NotEnoughBalanceBecauseDestinationNotCreated, NotEnoughBalanceInParentAccount, NotEnoughBalanceToDelegate, NotEnoughGas, NotEnoughSpendableBalance, NotSupportedLegacyAddress, PairingFailed, PasswordIncorrectError, PasswordsDontMatchError, RecipientRequired, RecommendSubAccountsToEmpty, RecommendUndelegation, StatusCodes, SyncError, TimeoutTagged, TransportError, TransportInterfaceNotAvailable, TransportOpenUserCancelled, TransportRaceCondition, TransportStatusError, TransportWebUSBGestureRequired, UnavailableTezosOriginatedAccountReceive, UnavailableTezosOriginatedAccountSend, UnexpectedBootloader, UnknownMCU, UpdateFetchFileFail, UpdateIncorrectHash, UpdateIncorrectSig, UpdateYourApp, UserRefusedAddress, UserRefusedAllowManager, UserRefusedDeviceNameChange, UserRefusedFirmwareUpdate, UserRefusedOnDevice, WebsocketConnectionError, WebsocketConnectionFailed, WrongAppForCurrency, WrongDeviceForAccount, addCustomErrorDeserializer, createCustomErrorClass, deserializeError, getAltStatusMessage, serializeError };\n","/********************************************************************************\n *   Ledger Node JS API\n *   (c) 2016-2017 Ledger\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n ********************************************************************************/\n//@flow\n\n// FIXME drop:\nimport { splitPath, foreach } from \"./utils\";\nimport { EthAppPleaseEnableContractData } from \"@ledgerhq/errors\";\nimport type Transport from \"@ledgerhq/hw-transport\";\nimport { BigNumber } from \"bignumber.js\";\nimport { encode, decode } from \"rlp\";\n\nexport type StarkQuantizationType =\n  | \"eth\"\n  | \"erc20\"\n  | \"erc721\"\n  | \"erc20mintable\"\n  | \"erc721mintable\";\n\nconst starkQuantizationTypeMap = {\n  eth: 1,\n  erc20: 2,\n  erc721: 3,\n  erc20mintable: 4,\n  erc721mintable: 5,\n};\n\nfunction hexBuffer(str: string): Buffer {\n  return Buffer.from(str.startsWith(\"0x\") ? str.slice(2) : str, \"hex\");\n}\n\nfunction maybeHexBuffer(str: ?string): ?Buffer {\n  if (!str) return null;\n  return hexBuffer(str);\n}\n\nconst remapTransactionRelatedErrors = (e) => {\n  if (e && e.statusCode === 0x6a80) {\n    return new EthAppPleaseEnableContractData(\n      \"Please enable Contract data on the Ethereum app Settings\"\n    );\n  }\n  return e;\n};\n\n/**\n * Ethereum API\n *\n * @example\n * import Eth from \"@ledgerhq/hw-app-eth\";\n * const eth = new Eth(transport)\n */\nexport default class Eth {\n  transport: Transport<*>;\n\n  constructor(transport: Transport<*>, scrambleKey: string = \"w0w\") {\n    this.transport = transport;\n    transport.decorateAppAPIMethods(\n      this,\n      [\n        \"getAddress\",\n        \"provideERC20TokenInformation\",\n        \"signTransaction\",\n        \"signPersonalMessage\",\n        \"getAppConfiguration\",\n        \"signEIP712HashedMessage\",\n        \"starkGetPublicKey\",\n        \"starkSignOrder\",\n        \"starkSignOrder_v2\",\n        \"starkSignTransfer\",\n        \"starkSignTransfer_v2\",\n        \"starkProvideQuantum\",\n        \"starkProvideQuantum_v2\",\n        \"starkUnsafeSign\",\n        \"eth2GetPublicKey\",\n        \"eth2SetWithdrawalIndex\",\n      ],\n      scrambleKey\n    );\n  }\n\n  /**\n   * get Ethereum address for a given BIP 32 path.\n   * @param path a path in BIP 32 format\n   * @option boolDisplay optionally enable or not the display\n   * @option boolChaincode optionally enable or not the chaincode request\n   * @return an object with a publicKey, address and (optionally) chainCode\n   * @example\n   * eth.getAddress(\"44'/60'/0'/0/0\").then(o => o.address)\n   */\n  getAddress(\n    path: string,\n    boolDisplay?: boolean,\n    boolChaincode?: boolean\n  ): Promise<{\n    publicKey: string,\n    address: string,\n    chainCode?: string,\n  }> {\n    let paths = splitPath(path);\n    let buffer = Buffer.alloc(1 + paths.length * 4);\n    buffer[0] = paths.length;\n    paths.forEach((element, index) => {\n      buffer.writeUInt32BE(element, 1 + 4 * index);\n    });\n    return this.transport\n      .send(\n        0xe0,\n        0x02,\n        boolDisplay ? 0x01 : 0x00,\n        boolChaincode ? 0x01 : 0x00,\n        buffer\n      )\n      .then((response) => {\n        let result = {};\n        let publicKeyLength = response[0];\n        let addressLength = response[1 + publicKeyLength];\n        result.publicKey = response\n          .slice(1, 1 + publicKeyLength)\n          .toString(\"hex\");\n        result.address =\n          \"0x\" +\n          response\n            .slice(\n              1 + publicKeyLength + 1,\n              1 + publicKeyLength + 1 + addressLength\n            )\n            .toString(\"ascii\");\n        if (boolChaincode) {\n          result.chainCode = response\n            .slice(\n              1 + publicKeyLength + 1 + addressLength,\n              1 + publicKeyLength + 1 + addressLength + 32\n            )\n            .toString(\"hex\");\n        }\n        return result;\n      });\n  }\n\n  /**\n   * This commands provides a trusted description of an ERC 20 token\n   * to associate a contract address with a ticker and number of decimals.\n   *\n   * It shall be run immediately before performing a transaction involving a contract\n   * calling this contract address to display the proper token information to the user if necessary.\n   *\n   * @param {*} info: a blob from \"erc20.js\" utilities that contains all token information.\n   *\n   * @example\n   * import { byContractAddress } from \"@ledgerhq/hw-app-eth/erc20\"\n   * const zrxInfo = byContractAddress(\"0xe41d2489571d322189246dafa5ebde1f4699f498\")\n   * if (zrxInfo) await appEth.provideERC20TokenInformation(zrxInfo)\n   * const signed = await appEth.signTransaction(path, rawTxHex)\n   */\n  provideERC20TokenInformation({ data }: { data: Buffer }): Promise<boolean> {\n    return this.transport.send(0xe0, 0x0a, 0x00, 0x00, data).then(\n      () => true,\n      (e) => {\n        if (e && e.statusCode === 0x6d00) {\n          // this case happen for older version of ETH app, since older app version had the ERC20 data hardcoded, it's fine to assume it worked.\n          // we return a flag to know if the call was effective or not\n          return false;\n        }\n        throw e;\n      }\n    );\n  }\n\n  /**\n   * You can sign a transaction and retrieve v, r, s given the raw transaction and the BIP 32 path of the account to sign\n   * @example\n   eth.signTransaction(\"44'/60'/0'/0/0\", \"e8018504e3b292008252089428ee52a8f3d6e5d15f8b131996950d7f296c7952872bd72a2487400080\").then(result => ...)\n   */\n  signTransaction(\n    path: string,\n    rawTxHex: string\n  ): Promise<{\n    s: string,\n    v: string,\n    r: string,\n  }> {\n    let paths = splitPath(path);\n    let offset = 0;\n    let rawTx = Buffer.from(rawTxHex, \"hex\");\n    let toSend = [];\n    let response;\n    // Check if the TX is encoded following EIP 155\n    let rlpTx = decode(rawTx);\n    let rlpOffset = 0;\n    let chainIdPrefix = \"\";\n    if (rlpTx.length > 6) {\n      let rlpVrs = encode(rlpTx.slice(-3));\n      rlpOffset = rawTx.length - (rlpVrs.length - 1);\n      const chainIdSrc = rlpTx[6];\n      const chainIdBuf = Buffer.alloc(4);\n      chainIdSrc.copy(chainIdBuf, 4 - chainIdSrc.length);\n      chainIdPrefix = (chainIdBuf.readUInt32BE(0) * 2 + 35)\n        .toString(16)\n        .slice(0, -2); // Drop the low byte, that comes from the ledger.\n      if (chainIdPrefix.length % 2 === 1) {\n        chainIdPrefix = \"0\" + chainIdPrefix;\n      }\n    }\n    while (offset !== rawTx.length) {\n      let maxChunkSize = offset === 0 ? 150 - 1 - paths.length * 4 : 150;\n      let chunkSize =\n        offset + maxChunkSize > rawTx.length\n          ? rawTx.length - offset\n          : maxChunkSize;\n      if (rlpOffset != 0 && offset + chunkSize == rlpOffset) {\n        // Make sure that the chunk doesn't end right on the EIP 155 marker if set\n        chunkSize--;\n      }\n      let buffer = Buffer.alloc(\n        offset === 0 ? 1 + paths.length * 4 + chunkSize : chunkSize\n      );\n      if (offset === 0) {\n        buffer[0] = paths.length;\n        paths.forEach((element, index) => {\n          buffer.writeUInt32BE(element, 1 + 4 * index);\n        });\n        rawTx.copy(buffer, 1 + 4 * paths.length, offset, offset + chunkSize);\n      } else {\n        rawTx.copy(buffer, 0, offset, offset + chunkSize);\n      }\n      toSend.push(buffer);\n      offset += chunkSize;\n    }\n    return foreach(toSend, (data, i) =>\n      this.transport\n        .send(0xe0, 0x04, i === 0 ? 0x00 : 0x80, 0x00, data)\n        .then((apduResponse) => {\n          response = apduResponse;\n        })\n    ).then(\n      () => {\n        const v = chainIdPrefix + response.slice(0, 1).toString(\"hex\");\n        const r = response.slice(1, 1 + 32).toString(\"hex\");\n        const s = response.slice(1 + 32, 1 + 32 + 32).toString(\"hex\");\n        return { v, r, s };\n      },\n      (e) => {\n        throw remapTransactionRelatedErrors(e);\n      }\n    );\n  }\n\n  /**\n   */\n  getAppConfiguration(): Promise<{\n    arbitraryDataEnabled: number,\n    erc20ProvisioningNecessary: number,\n    starkEnabled: number,\n    starkv2Supported: number,\n    version: string,\n  }> {\n    return this.transport.send(0xe0, 0x06, 0x00, 0x00).then((response) => {\n      let result = {};\n      result.arbitraryDataEnabled = response[0] & 0x01;\n      result.erc20ProvisioningNecessary = response[0] & 0x02;\n      result.starkEnabled = response[0] & 0x04;\n      result.starkv2Supported = response[0] & 0x08;\n      result.version = \"\" + response[1] + \".\" + response[2] + \".\" + response[3];\n      return result;\n    });\n  }\n\n  /**\n  * You can sign a message according to eth_sign RPC call and retrieve v, r, s given the message and the BIP 32 path of the account to sign.\n  * @example\neth.signPersonalMessage(\"44'/60'/0'/0/0\", Buffer.from(\"test\").toString(\"hex\")).then(result => {\n  var v = result['v'] - 27;\n  v = v.toString(16);\n  if (v.length < 2) {\n    v = \"0\" + v;\n  }\n  console.log(\"Signature 0x\" + result['r'] + result['s'] + v);\n})\n   */\n  signPersonalMessage(\n    path: string,\n    messageHex: string\n  ): Promise<{\n    v: number,\n    s: string,\n    r: string,\n  }> {\n    let paths = splitPath(path);\n    let offset = 0;\n    let message = Buffer.from(messageHex, \"hex\");\n    let toSend = [];\n    let response;\n    while (offset !== message.length) {\n      let maxChunkSize = offset === 0 ? 150 - 1 - paths.length * 4 - 4 : 150;\n      let chunkSize =\n        offset + maxChunkSize > message.length\n          ? message.length - offset\n          : maxChunkSize;\n      let buffer = Buffer.alloc(\n        offset === 0 ? 1 + paths.length * 4 + 4 + chunkSize : chunkSize\n      );\n      if (offset === 0) {\n        buffer[0] = paths.length;\n        paths.forEach((element, index) => {\n          buffer.writeUInt32BE(element, 1 + 4 * index);\n        });\n        buffer.writeUInt32BE(message.length, 1 + 4 * paths.length);\n        message.copy(\n          buffer,\n          1 + 4 * paths.length + 4,\n          offset,\n          offset + chunkSize\n        );\n      } else {\n        message.copy(buffer, 0, offset, offset + chunkSize);\n      }\n      toSend.push(buffer);\n      offset += chunkSize;\n    }\n    return foreach(toSend, (data, i) =>\n      this.transport\n        .send(0xe0, 0x08, i === 0 ? 0x00 : 0x80, 0x00, data)\n        .then((apduResponse) => {\n          response = apduResponse;\n        })\n    ).then(() => {\n      const v = response[0];\n      const r = response.slice(1, 1 + 32).toString(\"hex\");\n      const s = response.slice(1 + 32, 1 + 32 + 32).toString(\"hex\");\n      return { v, r, s };\n    });\n  }\n\n  /**\n  * Sign a prepared message following web3.eth.signTypedData specification. The host computes the domain separator and hashStruct(message)\n  * @example\n  eth.signEIP712HashedMessage(\"44'/60'/0'/0/0\", Buffer.from(\"0101010101010101010101010101010101010101010101010101010101010101\").toString(\"hex\"), Buffer.from(\"0202020202020202020202020202020202020202020202020202020202020202\").toString(\"hex\")).then(result => {\n  var v = result['v'] - 27;\n  v = v.toString(16);\n  if (v.length < 2) {\n    v = \"0\" + v;\n  }\n  console.log(\"Signature 0x\" + result['r'] + result['s'] + v);\n})\n   */\n  signEIP712HashedMessage(\n    path: string,\n    domainSeparatorHex: string,\n    hashStructMessageHex: string\n  ): Promise<{\n    v: number,\n    s: string,\n    r: string,\n  }> {\n    const domainSeparator = hexBuffer(domainSeparatorHex);\n    const hashStruct = hexBuffer(hashStructMessageHex);\n    let paths = splitPath(path);\n    let buffer = Buffer.alloc(1 + paths.length * 4 + 32 + 32, 0);\n    let offset = 0;\n    buffer[0] = paths.length;\n    paths.forEach((element, index) => {\n      buffer.writeUInt32BE(element, 1 + 4 * index);\n    });\n    offset = 1 + 4 * paths.length;\n    domainSeparator.copy(buffer, offset);\n    offset += 32;\n    hashStruct.copy(buffer, offset);\n    return this.transport\n      .send(0xe0, 0x0c, 0x00, 0x00, buffer)\n      .then((response) => {\n        const v = response[0];\n        const r = response.slice(1, 1 + 32).toString(\"hex\");\n        const s = response.slice(1 + 32, 1 + 32 + 32).toString(\"hex\");\n        return { v, r, s };\n      });\n  }\n\n  /**\n   * get Stark public key for a given BIP 32 path.\n   * @param path a path in BIP 32 format\n   * @option boolDisplay optionally enable or not the display\n   * @return the Stark public key\n   */\n  starkGetPublicKey(path: string, boolDisplay?: boolean): Promise<Buffer> {\n    let paths = splitPath(path);\n    let buffer = Buffer.alloc(1 + paths.length * 4);\n    buffer[0] = paths.length;\n    paths.forEach((element, index) => {\n      buffer.writeUInt32BE(element, 1 + 4 * index);\n    });\n    return this.transport\n      .send(0xf0, 0x02, boolDisplay ? 0x01 : 0x00, 0x00, buffer)\n      .then((response) => {\n        return response.slice(0, response.length - 2);\n      });\n  }\n\n  /**\n   * sign a Stark order\n   * @param path a path in BIP 32 format\n   * @option sourceTokenAddress contract address of the source token (not present for ETH)\n   * @param sourceQuantization quantization used for the source token\n   * @option destinationTokenAddress contract address of the destination token (not present for ETH)\n   * @param destinationQuantization quantization used for the destination token\n   * @param sourceVault ID of the source vault\n   * @param destinationVault ID of the destination vault\n   * @param amountSell amount to sell\n   * @param amountBuy amount to buy\n   * @param nonce transaction nonce\n   * @param timestamp transaction validity timestamp\n   * @return the signature\n   */\n  starkSignOrder(\n    path: string,\n    sourceTokenAddress?: string,\n    sourceQuantization: BigNumber,\n    destinationTokenAddress?: string,\n    destinationQuantization: BigNumber,\n    sourceVault: number,\n    destinationVault: number,\n    amountSell: BigNumber,\n    amountBuy: BigNumber,\n    nonce: number,\n    timestamp: number\n  ): Promise<Buffer> {\n    const sourceTokenAddressHex = maybeHexBuffer(sourceTokenAddress);\n    const destinationTokenAddressHex = maybeHexBuffer(destinationTokenAddress);\n    let paths = splitPath(path);\n    let buffer = Buffer.alloc(\n      1 + paths.length * 4 + 20 + 32 + 20 + 32 + 4 + 4 + 8 + 8 + 4 + 4,\n      0\n    );\n    let offset = 0;\n    buffer[0] = paths.length;\n    paths.forEach((element, index) => {\n      buffer.writeUInt32BE(element, 1 + 4 * index);\n    });\n    offset = 1 + 4 * paths.length;\n    if (sourceTokenAddressHex) {\n      sourceTokenAddressHex.copy(buffer, offset);\n    }\n    offset += 20;\n    Buffer.from(sourceQuantization.toString(16).padStart(64, \"0\"), \"hex\").copy(\n      buffer,\n      offset\n    );\n    offset += 32;\n    if (destinationTokenAddressHex) {\n      destinationTokenAddressHex.copy(buffer, offset);\n    }\n    offset += 20;\n    Buffer.from(\n      destinationQuantization.toString(16).padStart(64, \"0\"),\n      \"hex\"\n    ).copy(buffer, offset);\n    offset += 32;\n    buffer.writeUInt32BE(sourceVault, offset);\n    offset += 4;\n    buffer.writeUInt32BE(destinationVault, offset);\n    offset += 4;\n    Buffer.from(amountSell.toString(16).padStart(16, \"0\"), \"hex\").copy(\n      buffer,\n      offset\n    );\n    offset += 8;\n    Buffer.from(amountBuy.toString(16).padStart(16, \"0\"), \"hex\").copy(\n      buffer,\n      offset\n    );\n    offset += 8;\n    buffer.writeUInt32BE(nonce, offset);\n    offset += 4;\n    buffer.writeUInt32BE(timestamp, offset);\n    return this.transport\n      .send(0xf0, 0x04, 0x01, 0x00, buffer)\n      .then((response) => {\n        const r = response.slice(1, 1 + 32).toString(\"hex\");\n        const s = response.slice(1 + 32, 1 + 32 + 32).toString(\"hex\");\n        return { r, s };\n      });\n  }\n\n  /**\n   * sign a Stark order using the Starkex V2 protocol\n   * @param path a path in BIP 32 format\n   * @option sourceTokenAddress contract address of the source token (not present for ETH)\n   * @param sourceQuantizationType quantization type used for the source token\n   * @option sourceQuantization quantization used for the source token (not present for erc 721 or mintable erc 721)\n   * @option sourceMintableBlobOrTokenId mintable blob (mintable erc 20 / mintable erc 721) or token id (erc 721) associated to the source token\n   * @option destinationTokenAddress contract address of the destination token (not present for ETH)\n   * @param destinationQuantizationType quantization type used for the destination token\n   * @option destinationQuantization quantization used for the destination token (not present for erc 721 or mintable erc 721)\n   * @option destinationMintableBlobOrTokenId mintable blob (mintable erc 20 / mintable erc 721) or token id (erc 721) associated to the destination token\n   * @param sourceVault ID of the source vault\n   * @param destinationVault ID of the destination vault\n   * @param amountSell amount to sell\n   * @param amountBuy amount to buy\n   * @param nonce transaction nonce\n   * @param timestamp transaction validity timestamp\n   * @return the signature\n   */\n  starkSignOrder_v2(\n    path: string,\n    sourceTokenAddress?: string,\n    sourceQuantizationType: StarkQuantizationType,\n    sourceQuantization?: BigNumber,\n    sourceMintableBlobOrTokenId?: BigNumber,\n    destinationTokenAddress?: string,\n    destinationQuantizationType: StarkQuantizationType,\n    destinationQuantization?: BigNumber,\n    destinationMintableBlobOrTokenId?: BigNumber,\n    sourceVault: number,\n    destinationVault: number,\n    amountSell: BigNumber,\n    amountBuy: BigNumber,\n    nonce: number,\n    timestamp: number\n  ): Promise<Buffer> {\n    const sourceTokenAddressHex = maybeHexBuffer(sourceTokenAddress);\n    const destinationTokenAddressHex = maybeHexBuffer(destinationTokenAddress);\n    if (!(sourceQuantizationType in starkQuantizationTypeMap)) {\n      throw new Error(\n        \"eth.starkSignOrderv2 invalid source quantization type=\" +\n          sourceQuantizationType\n      );\n    }\n    if (!(destinationQuantizationType in starkQuantizationTypeMap)) {\n      throw new Error(\n        \"eth.starkSignOrderv2 invalid destination quantization type=\" +\n          destinationQuantizationType\n      );\n    }\n    let paths = splitPath(path);\n    let buffer = Buffer.alloc(\n      1 +\n        paths.length * 4 +\n        1 +\n        20 +\n        32 +\n        32 +\n        1 +\n        20 +\n        32 +\n        32 +\n        4 +\n        4 +\n        8 +\n        8 +\n        4 +\n        4,\n      0\n    );\n    let offset = 0;\n    buffer[0] = paths.length;\n    paths.forEach((element, index) => {\n      buffer.writeUInt32BE(element, 1 + 4 * index);\n    });\n    offset = 1 + 4 * paths.length;\n    buffer[offset] = starkQuantizationTypeMap[sourceQuantizationType];\n    offset++;\n    if (sourceTokenAddressHex) {\n      sourceTokenAddressHex.copy(buffer, offset);\n    }\n    offset += 20;\n    if (sourceQuantization) {\n      Buffer.from(\n        sourceQuantization.toString(16).padStart(64, \"0\"),\n        \"hex\"\n      ).copy(buffer, offset);\n    }\n    offset += 32;\n    if (sourceMintableBlobOrTokenId) {\n      Buffer.from(\n        sourceMintableBlobOrTokenId.toString(16).padStart(64, \"0\"),\n        \"hex\"\n      ).copy(buffer, offset);\n    }\n    offset += 32;\n    buffer[offset] = starkQuantizationTypeMap[destinationQuantizationType];\n    offset++;\n    if (destinationTokenAddressHex) {\n      destinationTokenAddressHex.copy(buffer, offset);\n    }\n    offset += 20;\n    if (destinationQuantization) {\n      Buffer.from(\n        destinationQuantization.toString(16).padStart(64, \"0\"),\n        \"hex\"\n      ).copy(buffer, offset);\n    }\n    offset += 32;\n    if (destinationMintableBlobOrTokenId) {\n      Buffer.from(\n        destinationMintableBlobOrTokenId.toString(16).padStart(64, \"0\"),\n        \"hex\"\n      ).copy(buffer, offset);\n    }\n    offset += 32;\n    buffer.writeUInt32BE(sourceVault, offset);\n    offset += 4;\n    buffer.writeUInt32BE(destinationVault, offset);\n    offset += 4;\n    Buffer.from(amountSell.toString(16).padStart(16, \"0\"), \"hex\").copy(\n      buffer,\n      offset\n    );\n    offset += 8;\n    Buffer.from(amountBuy.toString(16).padStart(16, \"0\"), \"hex\").copy(\n      buffer,\n      offset\n    );\n    offset += 8;\n    buffer.writeUInt32BE(nonce, offset);\n    offset += 4;\n    buffer.writeUInt32BE(timestamp, offset);\n    return this.transport\n      .send(0xf0, 0x04, 0x03, 0x00, buffer)\n      .then((response) => {\n        const r = response.slice(1, 1 + 32).toString(\"hex\");\n        const s = response.slice(1 + 32, 1 + 32 + 32).toString(\"hex\");\n        return { r, s };\n      });\n  }\n\n  /**\n   * sign a Stark transfer\n   * @param path a path in BIP 32 format\n   * @option transferTokenAddress contract address of the token to be transferred (not present for ETH)\n   * @param transferQuantization quantization used for the token to be transferred\n   * @param targetPublicKey target Stark public key\n   * @param sourceVault ID of the source vault\n   * @param destinationVault ID of the destination vault\n   * @param amountTransfer amount to transfer\n   * @param nonce transaction nonce\n   * @param timestamp transaction validity timestamp\n   * @return the signature\n   */\n  starkSignTransfer(\n    path: string,\n    transferTokenAddress?: string,\n    transferQuantization: BigNumber,\n    targetPublicKey: string,\n    sourceVault: number,\n    destinationVault: number,\n    amountTransfer: BigNumber,\n    nonce: number,\n    timestamp: number\n  ): Promise<Buffer> {\n    const transferTokenAddressHex = maybeHexBuffer(transferTokenAddress);\n    const targetPublicKeyHex = hexBuffer(targetPublicKey);\n    let paths = splitPath(path);\n    let buffer = Buffer.alloc(\n      1 + paths.length * 4 + 20 + 32 + 32 + 4 + 4 + 8 + 4 + 4,\n      0\n    );\n    let offset = 0;\n    buffer[0] = paths.length;\n    paths.forEach((element, index) => {\n      buffer.writeUInt32BE(element, 1 + 4 * index);\n    });\n    offset = 1 + 4 * paths.length;\n    if (transferTokenAddressHex) {\n      transferTokenAddressHex.copy(buffer, offset);\n    }\n    offset += 20;\n    Buffer.from(\n      transferQuantization.toString(16).padStart(64, \"0\"),\n      \"hex\"\n    ).copy(buffer, offset);\n    offset += 32;\n    targetPublicKeyHex.copy(buffer, offset);\n    offset += 32;\n    buffer.writeUInt32BE(sourceVault, offset);\n    offset += 4;\n    buffer.writeUInt32BE(destinationVault, offset);\n    offset += 4;\n    Buffer.from(amountTransfer.toString(16).padStart(16, \"0\"), \"hex\").copy(\n      buffer,\n      offset\n    );\n    offset += 8;\n    buffer.writeUInt32BE(nonce, offset);\n    offset += 4;\n    buffer.writeUInt32BE(timestamp, offset);\n    return this.transport\n      .send(0xf0, 0x04, 0x02, 0x00, buffer)\n      .then((response) => {\n        const r = response.slice(1, 1 + 32).toString(\"hex\");\n        const s = response.slice(1 + 32, 1 + 32 + 32).toString(\"hex\");\n        return { r, s };\n      });\n  }\n\n  /**\n   * sign a Stark transfer or conditional transfer using the Starkex V2 protocol\n   * @param path a path in BIP 32 format\n   * @option transferTokenAddress contract address of the token to be transferred (not present for ETH)\n   * @param transferQuantizationType quantization type used for the token to be transferred\n   * @option transferQuantization quantization used for the token to be transferred (not present for erc 721 or mintable erc 721)\n   * @option transferMintableBlobOrTokenId mintable blob (mintable erc 20 / mintable erc 721) or token id (erc 721) associated to the token to be transferred\n   * @param targetPublicKey target Stark public key\n   * @param sourceVault ID of the source vault\n   * @param destinationVault ID of the destination vault\n   * @param amountTransfer amount to transfer\n   * @param nonce transaction nonce\n   * @param timestamp transaction validity timestamp\n   * @option conditionalTransferAddress onchain address of the condition for a conditional transfer\n   * @option conditionalTransferFact fact associated to the condition for a conditional transfer\n   * @return the signature\n   */\n  starkSignTransfer_v2(\n    path: string,\n    transferTokenAddress?: string,\n    transferQuantizationType: StarkQuantizationType,\n    transferQuantization?: BigNumber,\n    transferMintableBlobOrTokenId?: BigNumber,\n    targetPublicKey: string,\n    sourceVault: number,\n    destinationVault: number,\n    amountTransfer: BigNumber,\n    nonce: number,\n    timestamp: number,\n    conditionalTransferAddress?: string,\n    conditionalTransferFact?: BigNumber\n  ): Promise<Buffer> {\n    const transferTokenAddressHex = maybeHexBuffer(transferTokenAddress);\n    const targetPublicKeyHex = hexBuffer(targetPublicKey);\n    const conditionalTransferAddressHex = maybeHexBuffer(\n      conditionalTransferAddress\n    );\n    if (!(transferQuantizationType in starkQuantizationTypeMap)) {\n      throw new Error(\n        \"eth.starkSignTransferv2 invalid quantization type=\" +\n          transferQuantizationType\n      );\n    }\n    let paths = splitPath(path);\n    let buffer = Buffer.alloc(\n      1 +\n        paths.length * 4 +\n        1 +\n        20 +\n        32 +\n        32 +\n        32 +\n        4 +\n        4 +\n        8 +\n        4 +\n        4 +\n        (conditionalTransferAddressHex ? 32 + 20 : 0),\n      0\n    );\n    let offset = 0;\n    buffer[0] = paths.length;\n    paths.forEach((element, index) => {\n      buffer.writeUInt32BE(element, 1 + 4 * index);\n    });\n    offset = 1 + 4 * paths.length;\n    buffer[offset] = starkQuantizationTypeMap[transferQuantizationType];\n    offset++;\n    if (transferTokenAddressHex) {\n      transferTokenAddressHex.copy(buffer, offset);\n    }\n    offset += 20;\n    if (transferQuantization) {\n      Buffer.from(\n        transferQuantization.toString(16).padStart(64, \"0\"),\n        \"hex\"\n      ).copy(buffer, offset);\n    }\n    offset += 32;\n    if (transferMintableBlobOrTokenId) {\n      Buffer.from(\n        transferMintableBlobOrTokenId.toString(16).padStart(64, \"0\"),\n        \"hex\"\n      ).copy(buffer, offset);\n    }\n    offset += 32;\n    targetPublicKeyHex.copy(buffer, offset);\n    offset += 32;\n    buffer.writeUInt32BE(sourceVault, offset);\n    offset += 4;\n    buffer.writeUInt32BE(destinationVault, offset);\n    offset += 4;\n    Buffer.from(amountTransfer.toString(16).padStart(16, \"0\"), \"hex\").copy(\n      buffer,\n      offset\n    );\n    offset += 8;\n    buffer.writeUInt32BE(nonce, offset);\n    offset += 4;\n    buffer.writeUInt32BE(timestamp, offset);\n    if (conditionalTransferAddressHex && conditionalTransferFact) {\n      offset += 4;\n      Buffer.from(\n        conditionalTransferFact.toString(16).padStart(64, \"0\"),\n        \"hex\"\n      ).copy(buffer, offset);\n      offset += 32;\n      conditionalTransferAddressHex.copy(buffer, offset);\n    }\n    return this.transport\n      .send(\n        0xf0,\n        0x04,\n        conditionalTransferAddressHex ? 0x05 : 0x04,\n        0x00,\n        buffer\n      )\n      .then((response) => {\n        const r = response.slice(1, 1 + 32).toString(\"hex\");\n        const s = response.slice(1 + 32, 1 + 32 + 32).toString(\"hex\");\n        return { r, s };\n      });\n  }\n\n  /**\n   * provide quantization information before singing a deposit or withdrawal Stark powered contract call\n   *\n   * It shall be run following a provideERC20TokenInformation call for the given contract\n   *\n   * @param operationContract contract address of the token to be transferred (not present for ETH)\n   * @param operationQuantization quantization used for the token to be transferred\n   */\n  starkProvideQuantum(\n    operationContract?: string,\n    operationQuantization: BigNumber\n  ): Promise<boolean> {\n    const operationContractHex = maybeHexBuffer(operationContract);\n    let buffer = Buffer.alloc(20 + 32, 0);\n    if (operationContractHex) {\n      operationContractHex.copy(buffer, 0);\n    }\n    Buffer.from(\n      operationQuantization.toString(16).padStart(64, \"0\"),\n      \"hex\"\n    ).copy(buffer, 20);\n    return this.transport.send(0xf0, 0x08, 0x00, 0x00, buffer).then(\n      () => true,\n      (e) => {\n        if (e && e.statusCode === 0x6d00) {\n          // this case happen for ETH application versions not supporting Stark extensions\n          return false;\n        }\n        throw e;\n      }\n    );\n  }\n\n  /**\n   * provide quantization information before singing a deposit or withdrawal Stark powered contract call using the Starkex V2 protocol\n   *\n   * It shall be run following a provideERC20TokenInformation call for the given contract\n   *\n   * @param operationContract contract address of the token to be transferred (not present for ETH)\n   * @param operationQuantizationType quantization type of the token to be transferred\n   * @option operationQuantization quantization used for the token to be transferred (not present for erc 721 or mintable erc 721)\n   * @option operationMintableBlobOrTokenId mintable blob (mintable erc 20 / mintable erc 721) or token id (erc 721) of the token to be transferred\n   */\n  starkProvideQuantum_v2(\n    operationContract?: string,\n    operationQuantizationType: StarkQuantizationType,\n    operationQuantization?: BigNumber,\n    operationMintableBlobOrTokenId?: BigNumber\n  ): Promise<boolean> {\n    const operationContractHex = maybeHexBuffer(operationContract);\n    if (!(operationQuantizationType in starkQuantizationTypeMap)) {\n      throw new Error(\n        \"eth.starkProvideQuantumV2 invalid quantization type=\" +\n          operationQuantizationType\n      );\n    }\n    let buffer = Buffer.alloc(20 + 32 + 32, 0);\n    let offset = 0;\n    if (operationContractHex) {\n      operationContractHex.copy(buffer, offset);\n    }\n    offset += 20;\n    if (operationQuantization) {\n      Buffer.from(\n        operationQuantization.toString(16).padStart(64, \"0\"),\n        \"hex\"\n      ).copy(buffer, offset);\n    }\n    offset += 32;\n    if (operationMintableBlobOrTokenId) {\n      Buffer.from(\n        operationMintableBlobOrTokenId.toString(16).padStart(64, \"0\"),\n        \"hex\"\n      ).copy(buffer, offset);\n    }\n    return this.transport\n      .send(\n        0xf0,\n        0x08,\n        starkQuantizationTypeMap[operationQuantizationType],\n        0x00,\n        buffer\n      )\n      .then(\n        () => true,\n        (e) => {\n          if (e && e.statusCode === 0x6d00) {\n            // this case happen for ETH application versions not supporting Stark extensions\n            return false;\n          }\n          throw e;\n        }\n      );\n  }\n\n  /**\n   * sign the given hash over the Stark curve\n   * It is intended for speed of execution in case an unknown Stark model is pushed and should be avoided as much as possible.\n   * @param path a path in BIP 32 format\n   * @param hash hexadecimal hash to sign\n   * @return the signature\n   */\n  starkUnsafeSign(path: string, hash: string): Promise<Buffer> {\n    const hashHex = hexBuffer(hash);\n    let paths = splitPath(path);\n    let buffer = Buffer.alloc(1 + paths.length * 4 + 32);\n    let offset = 0;\n    buffer[0] = paths.length;\n    paths.forEach((element, index) => {\n      buffer.writeUInt32BE(element, 1 + 4 * index);\n    });\n    offset = 1 + 4 * paths.length;\n    hashHex.copy(buffer, offset);\n    return this.transport\n      .send(0xf0, 0x0a, 0x00, 0x00, buffer)\n      .then((response) => {\n        const r = response.slice(1, 1 + 32).toString(\"hex\");\n        const s = response.slice(1 + 32, 1 + 32 + 32).toString(\"hex\");\n        return { r, s };\n      });\n  }\n\n  /**\n   * get an Ethereum 2 BLS-12 381 public key for a given BIP 32 path.\n   * @param path a path in BIP 32 format\n   * @option boolDisplay optionally enable or not the display\n   * @return an object with a publicKey\n   * @example\n   * eth.eth2GetPublicKey(\"12381/3600/0/0\").then(o => o.publicKey)\n   */\n  eth2GetPublicKey(\n    path: string,\n    boolDisplay?: boolean\n  ): Promise<{\n    publicKey: string,\n  }> {\n    let paths = splitPath(path);\n    let buffer = Buffer.alloc(1 + paths.length * 4);\n    buffer[0] = paths.length;\n    paths.forEach((element, index) => {\n      buffer.writeUInt32BE(element, 1 + 4 * index);\n    });\n    return this.transport\n      .send(0xe0, 0x0e, boolDisplay ? 0x01 : 0x00, 0x00, buffer)\n      .then((response) => {\n        let result = {};\n        result.publicKey = response.slice(0, -2).toString(\"hex\");\n        return result;\n      });\n  }\n\n  /**\n   * Set the index of a Withdrawal key used as withdrawal credentials in an ETH 2 deposit contract call signature\n   *\n   * It shall be run before the ETH 2 deposit transaction is signed. If not called, the index is set to 0\n   *\n   * @param withdrawalIndex index path in the EIP 2334 path m/12381/3600/withdrawalIndex/0\n   * @return True if the method was executed successfully\n   */\n  eth2SetWithdrawalIndex(withdrawalIndex: number): Promise<boolean> {\n    let buffer = Buffer.alloc(4, 0);\n    buffer.writeUInt32BE(withdrawalIndex, 0);\n    return this.transport.send(0xe0, 0x10, 0x00, 0x00, buffer).then(\n      () => true,\n      (e) => {\n        if (e && e.statusCode === 0x6d00) {\n          // this case happen for ETH application versions not supporting ETH 2\n          return false;\n        }\n        throw e;\n      }\n    );\n  }\n}\n","/********************************************************************************\n *   Ledger Node JS API\n *   (c) 2016-2017 Ledger\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n ********************************************************************************/\n//@flow\n\ntype Defer<T> = {\n  promise: Promise<T>,\n  resolve: (T) => void,\n  reject: (any) => void,\n};\n\nexport function defer<T>(): Defer<T> {\n  let resolve, reject;\n  let promise = new Promise(function (success, failure) {\n    resolve = success;\n    reject = failure;\n  });\n  if (!resolve || !reject) throw \"defer() error\"; // this never happens and is just to make flow happy\n  return { promise, resolve, reject };\n}\n\n// TODO use bip32-path library\nexport function splitPath(path: string): number[] {\n  let result = [];\n  let components = path.split(\"/\");\n  components.forEach((element) => {\n    let number = parseInt(element, 10);\n    if (isNaN(number)) {\n      return; // FIXME shouldn't it throws instead?\n    }\n    if (element.length > 1 && element[element.length - 1] === \"'\") {\n      number += 0x80000000;\n    }\n    result.push(number);\n  });\n  return result;\n}\n\n// TODO use async await\n\nexport function eachSeries<A>(arr: A[], fun: (A) => Promise<*>): Promise<*> {\n  return arr.reduce((p, e) => p.then(() => fun(e)), Promise.resolve());\n}\n\nexport function foreach<T, A>(\n  arr: T[],\n  callback: (T, number) => Promise<A>\n): Promise<A[]> {\n  function iterate(index, array, result) {\n    if (index >= array.length) {\n      return result;\n    } else\n      return callback(array[index], index).then(function (res) {\n        result.push(res);\n        return iterate(index + 1, array, result);\n      });\n  }\n  return Promise.resolve().then(() => iterate(0, arr, []));\n}\n\nexport function doIf(\n  condition: boolean,\n  callback: () => any | Promise<any>\n): Promise<void> {\n  return Promise.resolve().then(() => {\n    if (condition) {\n      return callback();\n    }\n  });\n}\n\nexport function asyncWhile<T>(\n  predicate: () => boolean,\n  callback: () => Promise<T>\n): Promise<Array<T>> {\n  function iterate(result) {\n    if (!predicate()) {\n      return result;\n    } else {\n      return callback().then((res) => {\n        result.push(res);\n        return iterate(result);\n      });\n    }\n  }\n  return Promise.resolve([]).then(iterate);\n}\n",";(function (globalObject) {\r\n  'use strict';\r\n\r\n/*\r\n *      bignumber.js v9.0.1\r\n *      A JavaScript library for arbitrary-precision arithmetic.\r\n *      https://github.com/MikeMcl/bignumber.js\r\n *      Copyright (c) 2020 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *      MIT Licensed.\r\n *\r\n *      BigNumber.prototype methods     |  BigNumber methods\r\n *                                      |\r\n *      absoluteValue            abs    |  clone\r\n *      comparedTo                      |  config               set\r\n *      decimalPlaces            dp     |      DECIMAL_PLACES\r\n *      dividedBy                div    |      ROUNDING_MODE\r\n *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT\r\n *      exponentiatedBy          pow    |      RANGE\r\n *      integerValue                    |      CRYPTO\r\n *      isEqualTo                eq     |      MODULO_MODE\r\n *      isFinite                        |      POW_PRECISION\r\n *      isGreaterThan            gt     |      FORMAT\r\n *      isGreaterThanOrEqualTo   gte    |      ALPHABET\r\n *      isInteger                       |  isBigNumber\r\n *      isLessThan               lt     |  maximum              max\r\n *      isLessThanOrEqualTo      lte    |  minimum              min\r\n *      isNaN                           |  random\r\n *      isNegative                      |  sum\r\n *      isPositive                      |\r\n *      isZero                          |\r\n *      minus                           |\r\n *      modulo                   mod    |\r\n *      multipliedBy             times  |\r\n *      negated                         |\r\n *      plus                            |\r\n *      precision                sd     |\r\n *      shiftedBy                       |\r\n *      squareRoot               sqrt   |\r\n *      toExponential                   |\r\n *      toFixed                         |\r\n *      toFormat                        |\r\n *      toFraction                      |\r\n *      toJSON                          |\r\n *      toNumber                        |\r\n *      toPrecision                     |\r\n *      toString                        |\r\n *      valueOf                         |\r\n *\r\n */\r\n\r\n\r\n  var BigNumber,\r\n    isNumeric = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i,\r\n    mathceil = Math.ceil,\r\n    mathfloor = Math.floor,\r\n\r\n    bignumberError = '[BigNumber Error] ',\r\n    tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',\r\n\r\n    BASE = 1e14,\r\n    LOG_BASE = 14,\r\n    MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1\r\n    // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\r\n    POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\r\n    SQRT_BASE = 1e7,\r\n\r\n    // EDITABLE\r\n    // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\r\n    // the arguments to toExponential, toFixed, toFormat, and toPrecision.\r\n    MAX = 1E9;                                   // 0 to MAX_INT32\r\n\r\n\r\n  /*\r\n   * Create and return a BigNumber constructor.\r\n   */\r\n  function clone(configObject) {\r\n    var div, convertBase, parseNumeric,\r\n      P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },\r\n      ONE = new BigNumber(1),\r\n\r\n\r\n      //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------\r\n\r\n\r\n      // The default values below must be integers within the inclusive ranges stated.\r\n      // The values can also be changed at run-time using BigNumber.set.\r\n\r\n      // The maximum number of decimal places for operations involving division.\r\n      DECIMAL_PLACES = 20,                     // 0 to MAX\r\n\r\n      // The rounding mode used when rounding to the above decimal places, and when using\r\n      // toExponential, toFixed, toFormat and toPrecision, and round (default value).\r\n      // UP         0 Away from zero.\r\n      // DOWN       1 Towards zero.\r\n      // CEIL       2 Towards +Infinity.\r\n      // FLOOR      3 Towards -Infinity.\r\n      // HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n      // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n      // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n      // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n      // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n      ROUNDING_MODE = 4,                       // 0 to 8\r\n\r\n      // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\r\n\r\n      // The exponent value at and beneath which toString returns exponential notation.\r\n      // Number type: -7\r\n      TO_EXP_NEG = -7,                         // 0 to -MAX\r\n\r\n      // The exponent value at and above which toString returns exponential notation.\r\n      // Number type: 21\r\n      TO_EXP_POS = 21,                         // 0 to MAX\r\n\r\n      // RANGE : [MIN_EXP, MAX_EXP]\r\n\r\n      // The minimum exponent value, beneath which underflow to zero occurs.\r\n      // Number type: -324  (5e-324)\r\n      MIN_EXP = -1e7,                          // -1 to -MAX\r\n\r\n      // The maximum exponent value, above which overflow to Infinity occurs.\r\n      // Number type:  308  (1.7976931348623157e+308)\r\n      // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\r\n      MAX_EXP = 1e7,                           // 1 to MAX\r\n\r\n      // Whether to use cryptographically-secure random number generation, if available.\r\n      CRYPTO = false,                          // true or false\r\n\r\n      // The modulo mode used when calculating the modulus: a mod n.\r\n      // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n      // The remainder (r) is calculated as: r = a - n * q.\r\n      //\r\n      // UP        0 The remainder is positive if the dividend is negative, else is negative.\r\n      // DOWN      1 The remainder has the same sign as the dividend.\r\n      //             This modulo mode is commonly known as 'truncated division' and is\r\n      //             equivalent to (a % n) in JavaScript.\r\n      // FLOOR     3 The remainder has the same sign as the divisor (Python %).\r\n      // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\r\n      // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\r\n      //             The remainder is always positive.\r\n      //\r\n      // The truncated division, floored division, Euclidian division and IEEE 754 remainder\r\n      // modes are commonly used for the modulus operation.\r\n      // Although the other rounding modes can also be used, they may not give useful results.\r\n      MODULO_MODE = 1,                         // 0 to 9\r\n\r\n      // The maximum number of significant digits of the result of the exponentiatedBy operation.\r\n      // If POW_PRECISION is 0, there will be unlimited significant digits.\r\n      POW_PRECISION = 0,                    // 0 to MAX\r\n\r\n      // The format specification used by the BigNumber.prototype.toFormat method.\r\n      FORMAT = {\r\n        prefix: '',\r\n        groupSize: 3,\r\n        secondaryGroupSize: 0,\r\n        groupSeparator: ',',\r\n        decimalSeparator: '.',\r\n        fractionGroupSize: 0,\r\n        fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n        suffix: ''\r\n      },\r\n\r\n      // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',\r\n      // '-', '.', whitespace, or repeated character.\r\n      // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'\r\n      ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz';\r\n\r\n\r\n    //------------------------------------------------------------------------------------------\r\n\r\n\r\n    // CONSTRUCTOR\r\n\r\n\r\n    /*\r\n     * The BigNumber constructor and exported function.\r\n     * Create and return a new instance of a BigNumber object.\r\n     *\r\n     * v {number|string|BigNumber} A numeric value.\r\n     * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.\r\n     */\r\n    function BigNumber(v, b) {\r\n      var alphabet, c, caseChanged, e, i, isNum, len, str,\r\n        x = this;\r\n\r\n      // Enable constructor call without `new`.\r\n      if (!(x instanceof BigNumber)) return new BigNumber(v, b);\r\n\r\n      if (b == null) {\r\n\r\n        if (v && v._isBigNumber === true) {\r\n          x.s = v.s;\r\n\r\n          if (!v.c || v.e > MAX_EXP) {\r\n            x.c = x.e = null;\r\n          } else if (v.e < MIN_EXP) {\r\n            x.c = [x.e = 0];\r\n          } else {\r\n            x.e = v.e;\r\n            x.c = v.c.slice();\r\n          }\r\n\r\n          return;\r\n        }\r\n\r\n        if ((isNum = typeof v == 'number') && v * 0 == 0) {\r\n\r\n          // Use `1 / n` to handle minus zero also.\r\n          x.s = 1 / v < 0 ? (v = -v, -1) : 1;\r\n\r\n          // Fast path for integers, where n < 2147483648 (2**31).\r\n          if (v === ~~v) {\r\n            for (e = 0, i = v; i >= 10; i /= 10, e++);\r\n\r\n            if (e > MAX_EXP) {\r\n              x.c = x.e = null;\r\n            } else {\r\n              x.e = e;\r\n              x.c = [v];\r\n            }\r\n\r\n            return;\r\n          }\r\n\r\n          str = String(v);\r\n        } else {\r\n\r\n          if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);\r\n\r\n          x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n        // Exponential form?\r\n        if ((i = str.search(/e/i)) > 0) {\r\n\r\n          // Determine exponent.\r\n          if (e < 0) e = i;\r\n          e += +str.slice(i + 1);\r\n          str = str.substring(0, i);\r\n        } else if (e < 0) {\r\n\r\n          // Integer.\r\n          e = str.length;\r\n        }\r\n\r\n      } else {\r\n\r\n        // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n        intCheck(b, 2, ALPHABET.length, 'Base');\r\n\r\n        // Allow exponential notation to be used with base 10 argument, while\r\n        // also rounding to DECIMAL_PLACES as with other bases.\r\n        if (b == 10) {\r\n          x = new BigNumber(v);\r\n          return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\r\n        }\r\n\r\n        str = String(v);\r\n\r\n        if (isNum = typeof v == 'number') {\r\n\r\n          // Avoid potential interpretation of Infinity and NaN as base 44+ values.\r\n          if (v * 0 != 0) return parseNumeric(x, str, isNum, b);\r\n\r\n          x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;\r\n\r\n          // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n          if (BigNumber.DEBUG && str.replace(/^0\\.0*|\\./, '').length > 15) {\r\n            throw Error\r\n             (tooManyDigits + v);\r\n          }\r\n        } else {\r\n          x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        alphabet = ALPHABET.slice(0, b);\r\n        e = i = 0;\r\n\r\n        // Check that str is a valid base b number.\r\n        // Don't use RegExp, so alphabet can contain special characters.\r\n        for (len = str.length; i < len; i++) {\r\n          if (alphabet.indexOf(c = str.charAt(i)) < 0) {\r\n            if (c == '.') {\r\n\r\n              // If '.' is not the first character and it has not be found before.\r\n              if (i > e) {\r\n                e = len;\r\n                continue;\r\n              }\r\n            } else if (!caseChanged) {\r\n\r\n              // Allow e.g. hexadecimal 'FF' as well as 'ff'.\r\n              if (str == str.toUpperCase() && (str = str.toLowerCase()) ||\r\n                  str == str.toLowerCase() && (str = str.toUpperCase())) {\r\n                caseChanged = true;\r\n                i = -1;\r\n                e = 0;\r\n                continue;\r\n              }\r\n            }\r\n\r\n            return parseNumeric(x, String(v), isNum, b);\r\n          }\r\n        }\r\n\r\n        // Prevent later check for length on converted number.\r\n        isNum = false;\r\n        str = convertBase(str, b, 10, x.s);\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n        else e = str.length;\r\n      }\r\n\r\n      // Determine leading zeros.\r\n      for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n      // Determine trailing zeros.\r\n      for (len = str.length; str.charCodeAt(--len) === 48;);\r\n\r\n      if (str = str.slice(i, ++len)) {\r\n        len -= i;\r\n\r\n        // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n        if (isNum && BigNumber.DEBUG &&\r\n          len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {\r\n            throw Error\r\n             (tooManyDigits + (x.s * v));\r\n        }\r\n\r\n         // Overflow?\r\n        if ((e = e - i - 1) > MAX_EXP) {\r\n\r\n          // Infinity.\r\n          x.c = x.e = null;\r\n\r\n        // Underflow?\r\n        } else if (e < MIN_EXP) {\r\n\r\n          // Zero.\r\n          x.c = [x.e = 0];\r\n        } else {\r\n          x.e = e;\r\n          x.c = [];\r\n\r\n          // Transform base\r\n\r\n          // e is the base 10 exponent.\r\n          // i is where to slice str to get the first element of the coefficient array.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (e < 0) i += LOG_BASE;  // i < 1\r\n\r\n          if (i < len) {\r\n            if (i) x.c.push(+str.slice(0, i));\r\n\r\n            for (len -= LOG_BASE; i < len;) {\r\n              x.c.push(+str.slice(i, i += LOG_BASE));\r\n            }\r\n\r\n            i = LOG_BASE - (str = str.slice(i)).length;\r\n          } else {\r\n            i -= len;\r\n          }\r\n\r\n          for (; i--; str += '0');\r\n          x.c.push(+str);\r\n        }\r\n      } else {\r\n\r\n        // Zero.\r\n        x.c = [x.e = 0];\r\n      }\r\n    }\r\n\r\n\r\n    // CONSTRUCTOR PROPERTIES\r\n\r\n\r\n    BigNumber.clone = clone;\r\n\r\n    BigNumber.ROUND_UP = 0;\r\n    BigNumber.ROUND_DOWN = 1;\r\n    BigNumber.ROUND_CEIL = 2;\r\n    BigNumber.ROUND_FLOOR = 3;\r\n    BigNumber.ROUND_HALF_UP = 4;\r\n    BigNumber.ROUND_HALF_DOWN = 5;\r\n    BigNumber.ROUND_HALF_EVEN = 6;\r\n    BigNumber.ROUND_HALF_CEIL = 7;\r\n    BigNumber.ROUND_HALF_FLOOR = 8;\r\n    BigNumber.EUCLID = 9;\r\n\r\n\r\n    /*\r\n     * Configure infrequently-changing library-wide settings.\r\n     *\r\n     * Accept an object with the following optional properties (if the value of a property is\r\n     * a number, it must be an integer within the inclusive range stated):\r\n     *\r\n     *   DECIMAL_PLACES   {number}           0 to MAX\r\n     *   ROUNDING_MODE    {number}           0 to 8\r\n     *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]\r\n     *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]\r\n     *   CRYPTO           {boolean}          true or false\r\n     *   MODULO_MODE      {number}           0 to 9\r\n     *   POW_PRECISION       {number}           0 to MAX\r\n     *   ALPHABET         {string}           A string of two or more unique characters which does\r\n     *                                       not contain '.'.\r\n     *   FORMAT           {object}           An object with some of the following properties:\r\n     *     prefix                 {string}\r\n     *     groupSize              {number}\r\n     *     secondaryGroupSize     {number}\r\n     *     groupSeparator         {string}\r\n     *     decimalSeparator       {string}\r\n     *     fractionGroupSize      {number}\r\n     *     fractionGroupSeparator {string}\r\n     *     suffix                 {string}\r\n     *\r\n     * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n     *\r\n     * E.g.\r\n     * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n     *\r\n     * Ignore properties/parameters set to null or undefined, except for ALPHABET.\r\n     *\r\n     * Return an object with the properties current values.\r\n     */\r\n    BigNumber.config = BigNumber.set = function (obj) {\r\n      var p, v;\r\n\r\n      if (obj != null) {\r\n\r\n        if (typeof obj == 'object') {\r\n\r\n          // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            DECIMAL_PLACES = v;\r\n          }\r\n\r\n          // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\r\n          // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 8, p);\r\n            ROUNDING_MODE = v;\r\n          }\r\n\r\n          // EXPONENTIAL_AT {number|number[]}\r\n          // Integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to 0 inclusive, 0 to MAX inclusive].\r\n          // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, 0, p);\r\n              intCheck(v[1], 0, MAX, p);\r\n              TO_EXP_NEG = v[0];\r\n              TO_EXP_POS = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);\r\n            }\r\n          }\r\n\r\n          // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\r\n          // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'\r\n          if (obj.hasOwnProperty(p = 'RANGE')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, -1, p);\r\n              intCheck(v[1], 1, MAX, p);\r\n              MIN_EXP = v[0];\r\n              MAX_EXP = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              if (v) {\r\n                MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);\r\n              } else {\r\n                throw Error\r\n                 (bignumberError + p + ' cannot be zero: ' + v);\r\n              }\r\n            }\r\n          }\r\n\r\n          // CRYPTO {boolean} true or false.\r\n          // '[BigNumber Error] CRYPTO not true or false: {v}'\r\n          // '[BigNumber Error] crypto unavailable'\r\n          if (obj.hasOwnProperty(p = 'CRYPTO')) {\r\n            v = obj[p];\r\n            if (v === !!v) {\r\n              if (v) {\r\n                if (typeof crypto != 'undefined' && crypto &&\r\n                 (crypto.getRandomValues || crypto.randomBytes)) {\r\n                  CRYPTO = v;\r\n                } else {\r\n                  CRYPTO = !v;\r\n                  throw Error\r\n                   (bignumberError + 'crypto unavailable');\r\n                }\r\n              } else {\r\n                CRYPTO = v;\r\n              }\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' not true or false: ' + v);\r\n            }\r\n          }\r\n\r\n          // MODULO_MODE {number} Integer, 0 to 9 inclusive.\r\n          // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'MODULO_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 9, p);\r\n            MODULO_MODE = v;\r\n          }\r\n\r\n          // POW_PRECISION {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'POW_PRECISION')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            POW_PRECISION = v;\r\n          }\r\n\r\n          // FORMAT {object}\r\n          // '[BigNumber Error] FORMAT not an object: {v}'\r\n          if (obj.hasOwnProperty(p = 'FORMAT')) {\r\n            v = obj[p];\r\n            if (typeof v == 'object') FORMAT = v;\r\n            else throw Error\r\n             (bignumberError + p + ' not an object: ' + v);\r\n          }\r\n\r\n          // ALPHABET {string}\r\n          // '[BigNumber Error] ALPHABET invalid: {v}'\r\n          if (obj.hasOwnProperty(p = 'ALPHABET')) {\r\n            v = obj[p];\r\n\r\n            // Disallow if less than two characters,\r\n            // or if it contains '+', '-', '.', whitespace, or a repeated character.\r\n            if (typeof v == 'string' && !/^.?$|[+\\-.\\s]|(.).*\\1/.test(v)) {\r\n              ALPHABET = v;\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' invalid: ' + v);\r\n            }\r\n          }\r\n\r\n        } else {\r\n\r\n          // '[BigNumber Error] Object expected: {v}'\r\n          throw Error\r\n           (bignumberError + 'Object expected: ' + obj);\r\n        }\r\n      }\r\n\r\n      return {\r\n        DECIMAL_PLACES: DECIMAL_PLACES,\r\n        ROUNDING_MODE: ROUNDING_MODE,\r\n        EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],\r\n        RANGE: [MIN_EXP, MAX_EXP],\r\n        CRYPTO: CRYPTO,\r\n        MODULO_MODE: MODULO_MODE,\r\n        POW_PRECISION: POW_PRECISION,\r\n        FORMAT: FORMAT,\r\n        ALPHABET: ALPHABET\r\n      };\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if v is a BigNumber instance, otherwise return false.\r\n     *\r\n     * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.\r\n     *\r\n     * v {any}\r\n     *\r\n     * '[BigNumber Error] Invalid BigNumber: {v}'\r\n     */\r\n    BigNumber.isBigNumber = function (v) {\r\n      if (!v || v._isBigNumber !== true) return false;\r\n      if (!BigNumber.DEBUG) return true;\r\n\r\n      var i, n,\r\n        c = v.c,\r\n        e = v.e,\r\n        s = v.s;\r\n\r\n      out: if ({}.toString.call(c) == '[object Array]') {\r\n\r\n        if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {\r\n\r\n          // If the first element is zero, the BigNumber value must be zero.\r\n          if (c[0] === 0) {\r\n            if (e === 0 && c.length === 1) return true;\r\n            break out;\r\n          }\r\n\r\n          // Calculate number of digits that c[0] should have, based on the exponent.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (i < 1) i += LOG_BASE;\r\n\r\n          // Calculate number of digits of c[0].\r\n          //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {\r\n          if (String(c[0]).length == i) {\r\n\r\n            for (i = 0; i < c.length; i++) {\r\n              n = c[i];\r\n              if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;\r\n            }\r\n\r\n            // Last element cannot be zero, unless it is the only element.\r\n            if (n !== 0) return true;\r\n          }\r\n        }\r\n\r\n      // Infinity/NaN\r\n      } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {\r\n        return true;\r\n      }\r\n\r\n      throw Error\r\n        (bignumberError + 'Invalid BigNumber: ' + v);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the maximum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.maximum = BigNumber.max = function () {\r\n      return maxOrMin(arguments, P.lt);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the minimum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.minimum = BigNumber.min = function () {\r\n      return maxOrMin(arguments, P.gt);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n     * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n     * zeros are produced).\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'\r\n     * '[BigNumber Error] crypto unavailable'\r\n     */\r\n    BigNumber.random = (function () {\r\n      var pow2_53 = 0x20000000000000;\r\n\r\n      // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\r\n      // Check if Math.random() produces more than 32 bits of randomness.\r\n      // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\r\n      // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\r\n      var random53bitInt = (Math.random() * pow2_53) & 0x1fffff\r\n       ? function () { return mathfloor(Math.random() * pow2_53); }\r\n       : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +\r\n         (Math.random() * 0x800000 | 0); };\r\n\r\n      return function (dp) {\r\n        var a, b, e, k, v,\r\n          i = 0,\r\n          c = [],\r\n          rand = new BigNumber(ONE);\r\n\r\n        if (dp == null) dp = DECIMAL_PLACES;\r\n        else intCheck(dp, 0, MAX);\r\n\r\n        k = mathceil(dp / LOG_BASE);\r\n\r\n        if (CRYPTO) {\r\n\r\n          // Browsers supporting crypto.getRandomValues.\r\n          if (crypto.getRandomValues) {\r\n\r\n            a = crypto.getRandomValues(new Uint32Array(k *= 2));\r\n\r\n            for (; i < k;) {\r\n\r\n              // 53 bits:\r\n              // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\r\n              // 11111 11111111 11111111 11111111 11100000 00000000 00000000\r\n              // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\r\n              //                                     11111 11111111 11111111\r\n              // 0x20000 is 2^21.\r\n              v = a[i] * 0x20000 + (a[i + 1] >>> 11);\r\n\r\n              // Rejection sampling:\r\n              // 0 <= v < 9007199254740992\r\n              // Probability that v >= 9e15, is\r\n              // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\r\n              if (v >= 9e15) {\r\n                b = crypto.getRandomValues(new Uint32Array(2));\r\n                a[i] = b[0];\r\n                a[i + 1] = b[1];\r\n              } else {\r\n\r\n                // 0 <= v <= 8999999999999999\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 2;\r\n              }\r\n            }\r\n            i = k / 2;\r\n\r\n          // Node.js supporting crypto.randomBytes.\r\n          } else if (crypto.randomBytes) {\r\n\r\n            // buffer\r\n            a = crypto.randomBytes(k *= 7);\r\n\r\n            for (; i < k;) {\r\n\r\n              // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\r\n              // 0x100000000 is 2^32, 0x1000000 is 2^24\r\n              // 11111 11111111 11111111 11111111 11111111 11111111 11111111\r\n              // 0 <= v < 9007199254740992\r\n              v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +\r\n                 (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +\r\n                 (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\r\n\r\n              if (v >= 9e15) {\r\n                crypto.randomBytes(7).copy(a, i);\r\n              } else {\r\n\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 7;\r\n              }\r\n            }\r\n            i = k / 7;\r\n          } else {\r\n            CRYPTO = false;\r\n            throw Error\r\n             (bignumberError + 'crypto unavailable');\r\n          }\r\n        }\r\n\r\n        // Use Math.random.\r\n        if (!CRYPTO) {\r\n\r\n          for (; i < k;) {\r\n            v = random53bitInt();\r\n            if (v < 9e15) c[i++] = v % 1e14;\r\n          }\r\n        }\r\n\r\n        k = c[--i];\r\n        dp %= LOG_BASE;\r\n\r\n        // Convert trailing digits to zeros according to dp.\r\n        if (k && dp) {\r\n          v = POWS_TEN[LOG_BASE - dp];\r\n          c[i] = mathfloor(k / v) * v;\r\n        }\r\n\r\n        // Remove trailing elements which are zero.\r\n        for (; c[i] === 0; c.pop(), i--);\r\n\r\n        // Zero?\r\n        if (i < 0) {\r\n          c = [e = 0];\r\n        } else {\r\n\r\n          // Remove leading elements which are zero and adjust exponent accordingly.\r\n          for (e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);\r\n\r\n          // Count the digits of the first element of c to determine leading zeros, and...\r\n          for (i = 1, v = c[0]; v >= 10; v /= 10, i++);\r\n\r\n          // adjust the exponent accordingly.\r\n          if (i < LOG_BASE) e -= LOG_BASE - i;\r\n        }\r\n\r\n        rand.e = e;\r\n        rand.c = c;\r\n        return rand;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the sum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.sum = function () {\r\n      var i = 1,\r\n        args = arguments,\r\n        sum = new BigNumber(args[0]);\r\n      for (; i < args.length;) sum = sum.plus(args[i++]);\r\n      return sum;\r\n    };\r\n\r\n\r\n    // PRIVATE FUNCTIONS\r\n\r\n\r\n    // Called by BigNumber and BigNumber.prototype.toString.\r\n    convertBase = (function () {\r\n      var decimal = '0123456789';\r\n\r\n      /*\r\n       * Convert string of baseIn to an array of numbers of baseOut.\r\n       * Eg. toBaseOut('255', 10, 16) returns [15, 15].\r\n       * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].\r\n       */\r\n      function toBaseOut(str, baseIn, baseOut, alphabet) {\r\n        var j,\r\n          arr = [0],\r\n          arrL,\r\n          i = 0,\r\n          len = str.length;\r\n\r\n        for (; i < len;) {\r\n          for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);\r\n\r\n          arr[0] += alphabet.indexOf(str.charAt(i++));\r\n\r\n          for (j = 0; j < arr.length; j++) {\r\n\r\n            if (arr[j] > baseOut - 1) {\r\n              if (arr[j + 1] == null) arr[j + 1] = 0;\r\n              arr[j + 1] += arr[j] / baseOut | 0;\r\n              arr[j] %= baseOut;\r\n            }\r\n          }\r\n        }\r\n\r\n        return arr.reverse();\r\n      }\r\n\r\n      // Convert a numeric string of baseIn to a numeric string of baseOut.\r\n      // If the caller is toString, we are converting from base 10 to baseOut.\r\n      // If the caller is BigNumber, we are converting from baseIn to base 10.\r\n      return function (str, baseIn, baseOut, sign, callerIsToString) {\r\n        var alphabet, d, e, k, r, x, xc, y,\r\n          i = str.indexOf('.'),\r\n          dp = DECIMAL_PLACES,\r\n          rm = ROUNDING_MODE;\r\n\r\n        // Non-integer.\r\n        if (i >= 0) {\r\n          k = POW_PRECISION;\r\n\r\n          // Unlimited precision.\r\n          POW_PRECISION = 0;\r\n          str = str.replace('.', '');\r\n          y = new BigNumber(baseIn);\r\n          x = y.pow(str.length - i);\r\n          POW_PRECISION = k;\r\n\r\n          // Convert str as if an integer, then restore the fraction part by dividing the\r\n          // result by its base raised to a power.\r\n\r\n          y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),\r\n           10, baseOut, decimal);\r\n          y.e = y.c.length;\r\n        }\r\n\r\n        // Convert the number as integer.\r\n\r\n        xc = toBaseOut(str, baseIn, baseOut, callerIsToString\r\n         ? (alphabet = ALPHABET, decimal)\r\n         : (alphabet = decimal, ALPHABET));\r\n\r\n        // xc now represents str as an integer and converted to baseOut. e is the exponent.\r\n        e = k = xc.length;\r\n\r\n        // Remove trailing zeros.\r\n        for (; xc[--k] == 0; xc.pop());\r\n\r\n        // Zero?\r\n        if (!xc[0]) return alphabet.charAt(0);\r\n\r\n        // Does str represent an integer? If so, no need for the division.\r\n        if (i < 0) {\r\n          --e;\r\n        } else {\r\n          x.c = xc;\r\n          x.e = e;\r\n\r\n          // The sign is needed for correct rounding.\r\n          x.s = sign;\r\n          x = div(x, y, dp, rm, baseOut);\r\n          xc = x.c;\r\n          r = x.r;\r\n          e = x.e;\r\n        }\r\n\r\n        // xc now represents str converted to baseOut.\r\n\r\n        // THe index of the rounding digit.\r\n        d = e + dp + 1;\r\n\r\n        // The rounding digit: the digit to the right of the digit that may be rounded up.\r\n        i = xc[d];\r\n\r\n        // Look at the rounding digits and mode to determine whether to round up.\r\n\r\n        k = baseOut / 2;\r\n        r = r || d < 0 || xc[d + 1] != null;\r\n\r\n        r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n              : i > k || i == k &&(rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||\r\n               rm == (x.s < 0 ? 8 : 7));\r\n\r\n        // If the index of the rounding digit is not greater than zero, or xc represents\r\n        // zero, then the result of the base conversion is zero or, if rounding up, a value\r\n        // such as 0.00001.\r\n        if (d < 1 || !xc[0]) {\r\n\r\n          // 1^-dp or 0\r\n          str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);\r\n        } else {\r\n\r\n          // Truncate xc to the required number of decimal places.\r\n          xc.length = d;\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            // Rounding up may mean the previous digit has to be rounded up and so on.\r\n            for (--baseOut; ++xc[--d] > baseOut;) {\r\n              xc[d] = 0;\r\n\r\n              if (!d) {\r\n                ++e;\r\n                xc = [1].concat(xc);\r\n              }\r\n            }\r\n          }\r\n\r\n          // Determine trailing zeros.\r\n          for (k = xc.length; !xc[--k];);\r\n\r\n          // E.g. [4, 11, 15] becomes 4bf.\r\n          for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));\r\n\r\n          // Add leading zeros, decimal point and trailing zeros as required.\r\n          str = toFixedPoint(str, e, alphabet.charAt(0));\r\n        }\r\n\r\n        // The caller will add the sign.\r\n        return str;\r\n      };\r\n    })();\r\n\r\n\r\n    // Perform division in the specified base. Called by div and convertBase.\r\n    div = (function () {\r\n\r\n      // Assume non-zero x and k.\r\n      function multiply(x, k, base) {\r\n        var m, temp, xlo, xhi,\r\n          carry = 0,\r\n          i = x.length,\r\n          klo = k % SQRT_BASE,\r\n          khi = k / SQRT_BASE | 0;\r\n\r\n        for (x = x.slice(); i--;) {\r\n          xlo = x[i] % SQRT_BASE;\r\n          xhi = x[i] / SQRT_BASE | 0;\r\n          m = khi * xlo + xhi * klo;\r\n          temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;\r\n          carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\r\n          x[i] = temp % base;\r\n        }\r\n\r\n        if (carry) x = [carry].concat(x);\r\n\r\n        return x;\r\n      }\r\n\r\n      function compare(a, b, aL, bL) {\r\n        var i, cmp;\r\n\r\n        if (aL != bL) {\r\n          cmp = aL > bL ? 1 : -1;\r\n        } else {\r\n\r\n          for (i = cmp = 0; i < aL; i++) {\r\n\r\n            if (a[i] != b[i]) {\r\n              cmp = a[i] > b[i] ? 1 : -1;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        return cmp;\r\n      }\r\n\r\n      function subtract(a, b, aL, base) {\r\n        var i = 0;\r\n\r\n        // Subtract b from a.\r\n        for (; aL--;) {\r\n          a[aL] -= i;\r\n          i = a[aL] < b[aL] ? 1 : 0;\r\n          a[aL] = i * base + a[aL] - b[aL];\r\n        }\r\n\r\n        // Remove leading zeros.\r\n        for (; !a[0] && a.length > 1; a.splice(0, 1));\r\n      }\r\n\r\n      // x: dividend, y: divisor.\r\n      return function (x, y, dp, rm, base) {\r\n        var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,\r\n          yL, yz,\r\n          s = x.s == y.s ? 1 : -1,\r\n          xc = x.c,\r\n          yc = y.c;\r\n\r\n        // Either NaN, Infinity or 0?\r\n        if (!xc || !xc[0] || !yc || !yc[0]) {\r\n\r\n          return new BigNumber(\r\n\r\n           // Return NaN if either NaN, or both Infinity or 0.\r\n           !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :\r\n\r\n            // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\r\n            xc && xc[0] == 0 || !yc ? s * 0 : s / 0\r\n         );\r\n        }\r\n\r\n        q = new BigNumber(s);\r\n        qc = q.c = [];\r\n        e = x.e - y.e;\r\n        s = dp + e + 1;\r\n\r\n        if (!base) {\r\n          base = BASE;\r\n          e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\r\n          s = s / LOG_BASE | 0;\r\n        }\r\n\r\n        // Result exponent may be one less then the current value of e.\r\n        // The coefficients of the BigNumbers from convertBase may have trailing zeros.\r\n        for (i = 0; yc[i] == (xc[i] || 0); i++);\r\n\r\n        if (yc[i] > (xc[i] || 0)) e--;\r\n\r\n        if (s < 0) {\r\n          qc.push(1);\r\n          more = true;\r\n        } else {\r\n          xL = xc.length;\r\n          yL = yc.length;\r\n          i = 0;\r\n          s += 2;\r\n\r\n          // Normalise xc and yc so highest order digit of yc is >= base / 2.\r\n\r\n          n = mathfloor(base / (yc[0] + 1));\r\n\r\n          // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.\r\n          // if (n > 1 || n++ == 1 && yc[0] < base / 2) {\r\n          if (n > 1) {\r\n            yc = multiply(yc, n, base);\r\n            xc = multiply(xc, n, base);\r\n            yL = yc.length;\r\n            xL = xc.length;\r\n          }\r\n\r\n          xi = yL;\r\n          rem = xc.slice(0, yL);\r\n          remL = rem.length;\r\n\r\n          // Add zeros to make remainder as long as divisor.\r\n          for (; remL < yL; rem[remL++] = 0);\r\n          yz = yc.slice();\r\n          yz = [0].concat(yz);\r\n          yc0 = yc[0];\r\n          if (yc[1] >= base / 2) yc0++;\r\n          // Not necessary, but to prevent trial digit n > base, when using base 3.\r\n          // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;\r\n\r\n          do {\r\n            n = 0;\r\n\r\n            // Compare divisor and remainder.\r\n            cmp = compare(yc, rem, yL, remL);\r\n\r\n            // If divisor < remainder.\r\n            if (cmp < 0) {\r\n\r\n              // Calculate trial digit, n.\r\n\r\n              rem0 = rem[0];\r\n              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n              // n is how many times the divisor goes into the current remainder.\r\n              n = mathfloor(rem0 / yc0);\r\n\r\n              //  Algorithm:\r\n              //  product = divisor multiplied by trial digit (n).\r\n              //  Compare product and remainder.\r\n              //  If product is greater than remainder:\r\n              //    Subtract divisor from product, decrement trial digit.\r\n              //  Subtract product from remainder.\r\n              //  If product was less than remainder at the last compare:\r\n              //    Compare new remainder and divisor.\r\n              //    If remainder is greater than divisor:\r\n              //      Subtract divisor from remainder, increment trial digit.\r\n\r\n              if (n > 1) {\r\n\r\n                // n may be > base only when base is 3.\r\n                if (n >= base) n = base - 1;\r\n\r\n                // product = divisor * trial digit.\r\n                prod = multiply(yc, n, base);\r\n                prodL = prod.length;\r\n                remL = rem.length;\r\n\r\n                // Compare product and remainder.\r\n                // If product > remainder then trial digit n too high.\r\n                // n is 1 too high about 5% of the time, and is not known to have\r\n                // ever been more than 1 too high.\r\n                while (compare(prod, rem, prodL, remL) == 1) {\r\n                  n--;\r\n\r\n                  // Subtract divisor from product.\r\n                  subtract(prod, yL < prodL ? yz : yc, prodL, base);\r\n                  prodL = prod.length;\r\n                  cmp = 1;\r\n                }\r\n              } else {\r\n\r\n                // n is 0 or 1, cmp is -1.\r\n                // If n is 0, there is no need to compare yc and rem again below,\r\n                // so change cmp to 1 to avoid it.\r\n                // If n is 1, leave cmp as -1, so yc and rem are compared again.\r\n                if (n == 0) {\r\n\r\n                  // divisor < remainder, so n must be at least 1.\r\n                  cmp = n = 1;\r\n                }\r\n\r\n                // product = divisor\r\n                prod = yc.slice();\r\n                prodL = prod.length;\r\n              }\r\n\r\n              if (prodL < remL) prod = [0].concat(prod);\r\n\r\n              // Subtract product from remainder.\r\n              subtract(rem, prod, remL, base);\r\n              remL = rem.length;\r\n\r\n               // If product was < remainder.\r\n              if (cmp == -1) {\r\n\r\n                // Compare divisor and new remainder.\r\n                // If divisor < new remainder, subtract divisor from remainder.\r\n                // Trial digit n too low.\r\n                // n is 1 too low about 5% of the time, and very rarely 2 too low.\r\n                while (compare(yc, rem, yL, remL) < 1) {\r\n                  n++;\r\n\r\n                  // Subtract divisor from remainder.\r\n                  subtract(rem, yL < remL ? yz : yc, remL, base);\r\n                  remL = rem.length;\r\n                }\r\n              }\r\n            } else if (cmp === 0) {\r\n              n++;\r\n              rem = [0];\r\n            } // else cmp === 1 and n will be 0\r\n\r\n            // Add the next digit, n, to the result array.\r\n            qc[i++] = n;\r\n\r\n            // Update the remainder.\r\n            if (rem[0]) {\r\n              rem[remL++] = xc[xi] || 0;\r\n            } else {\r\n              rem = [xc[xi]];\r\n              remL = 1;\r\n            }\r\n          } while ((xi++ < xL || rem[0] != null) && s--);\r\n\r\n          more = rem[0] != null;\r\n\r\n          // Leading zero?\r\n          if (!qc[0]) qc.splice(0, 1);\r\n        }\r\n\r\n        if (base == BASE) {\r\n\r\n          // To calculate q.e, first get the number of digits of qc[0].\r\n          for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);\r\n\r\n          round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);\r\n\r\n        // Caller is convertBase.\r\n        } else {\r\n          q.e = e;\r\n          q.r = +more;\r\n        }\r\n\r\n        return q;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n     * notation rounded to the specified decimal places or significant digits.\r\n     *\r\n     * n: a BigNumber.\r\n     * i: the index of the last digit required (i.e. the digit that may be rounded up).\r\n     * rm: the rounding mode.\r\n     * id: 1 (toExponential) or 2 (toPrecision).\r\n     */\r\n    function format(n, i, rm, id) {\r\n      var c0, e, ne, len, str;\r\n\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n\r\n      if (!n.c) return n.toString();\r\n\r\n      c0 = n.c[0];\r\n      ne = n.e;\r\n\r\n      if (i == null) {\r\n        str = coeffToString(n.c);\r\n        str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS)\r\n         ? toExponential(str, ne)\r\n         : toFixedPoint(str, ne, '0');\r\n      } else {\r\n        n = round(new BigNumber(n), i, rm);\r\n\r\n        // n.e may have changed if the value was rounded up.\r\n        e = n.e;\r\n\r\n        str = coeffToString(n.c);\r\n        len = str.length;\r\n\r\n        // toPrecision returns exponential notation if the number of significant digits\r\n        // specified is less than the number of digits necessary to represent the integer\r\n        // part of the value in fixed-point notation.\r\n\r\n        // Exponential notation.\r\n        if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {\r\n\r\n          // Append zeros?\r\n          for (; len < i; str += '0', len++);\r\n          str = toExponential(str, e);\r\n\r\n        // Fixed-point notation.\r\n        } else {\r\n          i -= ne;\r\n          str = toFixedPoint(str, e, '0');\r\n\r\n          // Append zeros?\r\n          if (e + 1 > len) {\r\n            if (--i > 0) for (str += '.'; i--; str += '0');\r\n          } else {\r\n            i += e - len;\r\n            if (i > 0) {\r\n              if (e + 1 == len) str += '.';\r\n              for (; i--; str += '0');\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return n.s < 0 && c0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // Handle BigNumber.max and BigNumber.min.\r\n    function maxOrMin(args, method) {\r\n      var n,\r\n        i = 1,\r\n        m = new BigNumber(args[0]);\r\n\r\n      for (; i < args.length; i++) {\r\n        n = new BigNumber(args[i]);\r\n\r\n        // If any number is NaN, return NaN.\r\n        if (!n.s) {\r\n          m = n;\r\n          break;\r\n        } else if (method.call(m, n)) {\r\n          m = n;\r\n        }\r\n      }\r\n\r\n      return m;\r\n    }\r\n\r\n\r\n    /*\r\n     * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n     * Called by minus, plus and times.\r\n     */\r\n    function normalise(n, c, e) {\r\n      var i = 1,\r\n        j = c.length;\r\n\r\n       // Remove trailing zeros.\r\n      for (; !c[--j]; c.pop());\r\n\r\n      // Calculate the base 10 exponent. First get the number of digits of c[0].\r\n      for (j = c[0]; j >= 10; j /= 10, i++);\r\n\r\n      // Overflow?\r\n      if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\r\n\r\n        // Infinity.\r\n        n.c = n.e = null;\r\n\r\n      // Underflow?\r\n      } else if (e < MIN_EXP) {\r\n\r\n        // Zero.\r\n        n.c = [n.e = 0];\r\n      } else {\r\n        n.e = e;\r\n        n.c = c;\r\n      }\r\n\r\n      return n;\r\n    }\r\n\r\n\r\n    // Handle values that fail the validity test in BigNumber.\r\n    parseNumeric = (function () {\r\n      var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\r\n        dotAfter = /^([^.]+)\\.$/,\r\n        dotBefore = /^\\.([^.]+)$/,\r\n        isInfinityOrNaN = /^-?(Infinity|NaN)$/,\r\n        whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\r\n\r\n      return function (x, str, isNum, b) {\r\n        var base,\r\n          s = isNum ? str : str.replace(whitespaceOrPlus, '');\r\n\r\n        // No exception on ±Infinity or NaN.\r\n        if (isInfinityOrNaN.test(s)) {\r\n          x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\r\n        } else {\r\n          if (!isNum) {\r\n\r\n            // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\r\n            s = s.replace(basePrefix, function (m, p1, p2) {\r\n              base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\r\n              return !b || b == base ? p1 : m;\r\n            });\r\n\r\n            if (b) {\r\n              base = b;\r\n\r\n              // E.g. '1.' to '1', '.1' to '0.1'\r\n              s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\r\n            }\r\n\r\n            if (str != s) return new BigNumber(s, base);\r\n          }\r\n\r\n          // '[BigNumber Error] Not a number: {n}'\r\n          // '[BigNumber Error] Not a base {b} number: {n}'\r\n          if (BigNumber.DEBUG) {\r\n            throw Error\r\n              (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);\r\n          }\r\n\r\n          // NaN\r\n          x.s = null;\r\n        }\r\n\r\n        x.c = x.e = null;\r\n      }\r\n    })();\r\n\r\n\r\n    /*\r\n     * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n     * If r is truthy, it is known that there are more digits after the rounding digit.\r\n     */\r\n    function round(x, sd, rm, r) {\r\n      var d, i, j, k, n, ni, rd,\r\n        xc = x.c,\r\n        pows10 = POWS_TEN;\r\n\r\n      // if x is not Infinity or NaN...\r\n      if (xc) {\r\n\r\n        // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n        // n is a base 1e14 number, the value of the element of array x.c containing rd.\r\n        // ni is the index of n within x.c.\r\n        // d is the number of digits of n.\r\n        // i is the index of rd within n including leading zeros.\r\n        // j is the actual index of rd within n (if < 0, rd is a leading zero).\r\n        out: {\r\n\r\n          // Get the number of digits of the first element of xc.\r\n          for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);\r\n          i = sd - d;\r\n\r\n          // If the rounding digit is in the first element of xc...\r\n          if (i < 0) {\r\n            i += LOG_BASE;\r\n            j = sd;\r\n            n = xc[ni = 0];\r\n\r\n            // Get the rounding digit at index j of n.\r\n            rd = n / pows10[d - j - 1] % 10 | 0;\r\n          } else {\r\n            ni = mathceil((i + 1) / LOG_BASE);\r\n\r\n            if (ni >= xc.length) {\r\n\r\n              if (r) {\r\n\r\n                // Needed by sqrt.\r\n                for (; xc.length <= ni; xc.push(0));\r\n                n = rd = 0;\r\n                d = 1;\r\n                i %= LOG_BASE;\r\n                j = i - LOG_BASE + 1;\r\n              } else {\r\n                break out;\r\n              }\r\n            } else {\r\n              n = k = xc[ni];\r\n\r\n              // Get the number of digits of n.\r\n              for (d = 1; k >= 10; k /= 10, d++);\r\n\r\n              // Get the index of rd within n.\r\n              i %= LOG_BASE;\r\n\r\n              // Get the index of rd within n, adjusted for leading zeros.\r\n              // The number of leading zeros of n is given by LOG_BASE - d.\r\n              j = i - LOG_BASE + d;\r\n\r\n              // Get the rounding digit at index j of n.\r\n              rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;\r\n            }\r\n          }\r\n\r\n          r = r || sd < 0 ||\r\n\r\n          // Are there any non-zero digits after the rounding digit?\r\n          // The expression  n % pows10[d - j - 1]  returns all digits of n to the right\r\n          // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\r\n           xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\r\n\r\n          r = rm < 4\r\n           ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n           : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&\r\n\r\n            // Check whether the digit to the left of the rounding digit is odd.\r\n            ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||\r\n             rm == (x.s < 0 ? 8 : 7));\r\n\r\n          if (sd < 1 || !xc[0]) {\r\n            xc.length = 0;\r\n\r\n            if (r) {\r\n\r\n              // Convert sd to decimal places.\r\n              sd -= x.e + 1;\r\n\r\n              // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n              xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\r\n              x.e = -sd || 0;\r\n            } else {\r\n\r\n              // Zero.\r\n              xc[0] = x.e = 0;\r\n            }\r\n\r\n            return x;\r\n          }\r\n\r\n          // Remove excess digits.\r\n          if (i == 0) {\r\n            xc.length = ni;\r\n            k = 1;\r\n            ni--;\r\n          } else {\r\n            xc.length = ni + 1;\r\n            k = pows10[LOG_BASE - i];\r\n\r\n            // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n            // j > 0 means i > number of leading zeros of n.\r\n            xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\r\n          }\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            for (; ;) {\r\n\r\n              // If the digit to be rounded up is in the first element of xc...\r\n              if (ni == 0) {\r\n\r\n                // i will be the length of xc[0] before k is added.\r\n                for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);\r\n                j = xc[0] += k;\r\n                for (k = 1; j >= 10; j /= 10, k++);\r\n\r\n                // if i != k the length has increased.\r\n                if (i != k) {\r\n                  x.e++;\r\n                  if (xc[0] == BASE) xc[0] = 1;\r\n                }\r\n\r\n                break;\r\n              } else {\r\n                xc[ni] += k;\r\n                if (xc[ni] != BASE) break;\r\n                xc[ni--] = 0;\r\n                k = 1;\r\n              }\r\n            }\r\n          }\r\n\r\n          // Remove trailing zeros.\r\n          for (i = xc.length; xc[--i] === 0; xc.pop());\r\n        }\r\n\r\n        // Overflow? Infinity.\r\n        if (x.e > MAX_EXP) {\r\n          x.c = x.e = null;\r\n\r\n        // Underflow? Zero.\r\n        } else if (x.e < MIN_EXP) {\r\n          x.c = [x.e = 0];\r\n        }\r\n      }\r\n\r\n      return x;\r\n    }\r\n\r\n\r\n    function valueOf(n) {\r\n      var str,\r\n        e = n.e;\r\n\r\n      if (e === null) return n.toString();\r\n\r\n      str = coeffToString(n.c);\r\n\r\n      str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n        ? toExponential(str, e)\r\n        : toFixedPoint(str, e, '0');\r\n\r\n      return n.s < 0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // PROTOTYPE/INSTANCE METHODS\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n     */\r\n    P.absoluteValue = P.abs = function () {\r\n      var x = new BigNumber(this);\r\n      if (x.s < 0) x.s = 1;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return\r\n     *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     *   0 if they have the same value,\r\n     *   or null if the value of either is NaN.\r\n     */\r\n    P.comparedTo = function (y, b) {\r\n      return compare(this, new BigNumber(y, b));\r\n    };\r\n\r\n\r\n    /*\r\n     * If dp is undefined or null or true or false, return the number of decimal places of the\r\n     * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     *\r\n     * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [dp] {number} Decimal places: integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.decimalPlaces = P.dp = function (dp, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), dp + x.e + 1, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n      // Subtract the number of trailing zeros of the last number.\r\n      if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);\r\n      if (n < 0) n = 0;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n / 0 = I\r\n     *  n / N = N\r\n     *  n / I = 0\r\n     *  0 / n = 0\r\n     *  0 / 0 = N\r\n     *  0 / N = N\r\n     *  0 / I = 0\r\n     *  N / n = N\r\n     *  N / 0 = N\r\n     *  N / N = N\r\n     *  N / I = N\r\n     *  I / n = I\r\n     *  I / 0 = I\r\n     *  I / N = N\r\n     *  I / I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n     * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.dividedBy = P.div = function (y, b) {\r\n      return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n     * BigNumber by the value of BigNumber(y, b).\r\n     */\r\n    P.dividedToIntegerBy = P.idiv = function (y, b) {\r\n      return div(this, new BigNumber(y, b), 0, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.\r\n     *\r\n     * If m is present, return the result modulo m.\r\n     * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.\r\n     *\r\n     * The modular power operation works efficiently when x, n, and m are integers, otherwise it\r\n     * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.\r\n     *\r\n     * n {number|string|BigNumber} The exponent. An integer.\r\n     * [m] {number|string|BigNumber} The modulus.\r\n     *\r\n     * '[BigNumber Error] Exponent not an integer: {n}'\r\n     */\r\n    P.exponentiatedBy = P.pow = function (n, m) {\r\n      var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y,\r\n        x = this;\r\n\r\n      n = new BigNumber(n);\r\n\r\n      // Allow NaN and ±Infinity, but not other non-integers.\r\n      if (n.c && !n.isInteger()) {\r\n        throw Error\r\n          (bignumberError + 'Exponent not an integer: ' + valueOf(n));\r\n      }\r\n\r\n      if (m != null) m = new BigNumber(m);\r\n\r\n      // Exponent of MAX_SAFE_INTEGER is 15.\r\n      nIsBig = n.e > 14;\r\n\r\n      // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.\r\n      if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {\r\n\r\n        // The sign of the result of pow when x is negative depends on the evenness of n.\r\n        // If +n overflows to ±Infinity, the evenness of n would be not be known.\r\n        y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? 2 - isOdd(n) : +valueOf(n)));\r\n        return m ? y.mod(m) : y;\r\n      }\r\n\r\n      nIsNeg = n.s < 0;\r\n\r\n      if (m) {\r\n\r\n        // x % m returns NaN if abs(m) is zero, or m is NaN.\r\n        if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);\r\n\r\n        isModExp = !nIsNeg && x.isInteger() && m.isInteger();\r\n\r\n        if (isModExp) x = x.mod(m);\r\n\r\n      // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.\r\n      // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.\r\n      } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0\r\n        // [1, 240000000]\r\n        ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7\r\n        // [80000000000000]  [99999750000000]\r\n        : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {\r\n\r\n        // If x is negative and n is odd, k = -0, else k = 0.\r\n        k = x.s < 0 && isOdd(n) ? -0 : 0;\r\n\r\n        // If x >= 1, k = ±Infinity.\r\n        if (x.e > -1) k = 1 / k;\r\n\r\n        // If n is negative return ±0, else return ±Infinity.\r\n        return new BigNumber(nIsNeg ? 1 / k : k);\r\n\r\n      } else if (POW_PRECISION) {\r\n\r\n        // Truncating each coefficient array to a length of k after each multiplication\r\n        // equates to truncating significant digits to POW_PRECISION + [28, 41],\r\n        // i.e. there will be a minimum of 28 guard digits retained.\r\n        k = mathceil(POW_PRECISION / LOG_BASE + 2);\r\n      }\r\n\r\n      if (nIsBig) {\r\n        half = new BigNumber(0.5);\r\n        if (nIsNeg) n.s = 1;\r\n        nIsOdd = isOdd(n);\r\n      } else {\r\n        i = Math.abs(+valueOf(n));\r\n        nIsOdd = i % 2;\r\n      }\r\n\r\n      y = new BigNumber(ONE);\r\n\r\n      // Performs 54 loop iterations for n of 9007199254740991.\r\n      for (; ;) {\r\n\r\n        if (nIsOdd) {\r\n          y = y.times(x);\r\n          if (!y.c) break;\r\n\r\n          if (k) {\r\n            if (y.c.length > k) y.c.length = k;\r\n          } else if (isModExp) {\r\n            y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));\r\n          }\r\n        }\r\n\r\n        if (i) {\r\n          i = mathfloor(i / 2);\r\n          if (i === 0) break;\r\n          nIsOdd = i % 2;\r\n        } else {\r\n          n = n.times(half);\r\n          round(n, n.e + 1, 1);\r\n\r\n          if (n.e > 14) {\r\n            nIsOdd = isOdd(n);\r\n          } else {\r\n            i = +valueOf(n);\r\n            if (i === 0) break;\r\n            nIsOdd = i % 2;\r\n          }\r\n        }\r\n\r\n        x = x.times(x);\r\n\r\n        if (k) {\r\n          if (x.c && x.c.length > k) x.c.length = k;\r\n        } else if (isModExp) {\r\n          x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));\r\n        }\r\n      }\r\n\r\n      if (isModExp) return y;\r\n      if (nIsNeg) y = ONE.div(y);\r\n\r\n      return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer\r\n     * using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'\r\n     */\r\n    P.integerValue = function (rm) {\r\n      var n = new BigNumber(this);\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n      return round(n, n.e + 1, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isEqualTo = P.eq = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is a finite number, otherwise return false.\r\n     */\r\n    P.isFinite = function () {\r\n      return !!this.c;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isGreaterThan = P.gt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isGreaterThanOrEqualTo = P.gte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\r\n\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n     */\r\n    P.isInteger = function () {\r\n      return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isLessThan = P.lt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isLessThanOrEqualTo = P.lte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is NaN, otherwise return false.\r\n     */\r\n    P.isNaN = function () {\r\n      return !this.s;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is negative, otherwise return false.\r\n     */\r\n    P.isNegative = function () {\r\n      return this.s < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is positive, otherwise return false.\r\n     */\r\n    P.isPositive = function () {\r\n      return this.s > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is 0 or -0, otherwise return false.\r\n     */\r\n    P.isZero = function () {\r\n      return !!this.c && this.c[0] == 0;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n - 0 = n\r\n     *  n - N = N\r\n     *  n - I = -I\r\n     *  0 - n = -n\r\n     *  0 - 0 = 0\r\n     *  0 - N = N\r\n     *  0 - I = -I\r\n     *  N - n = N\r\n     *  N - 0 = N\r\n     *  N - N = N\r\n     *  N - I = N\r\n     *  I - n = I\r\n     *  I - 0 = I\r\n     *  I - N = N\r\n     *  I - I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.minus = function (y, b) {\r\n      var i, j, t, xLTy,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n      if (a != b) {\r\n        y.s = -b;\r\n        return x.plus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Either Infinity?\r\n        if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);\r\n\r\n        // Either zero?\r\n        if (!xc[0] || !yc[0]) {\r\n\r\n          // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n          return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :\r\n\r\n           // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\r\n           ROUNDING_MODE == 3 ? -0 : 0);\r\n        }\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Determine which is the bigger number.\r\n      if (a = xe - ye) {\r\n\r\n        if (xLTy = a < 0) {\r\n          a = -a;\r\n          t = xc;\r\n        } else {\r\n          ye = xe;\r\n          t = yc;\r\n        }\r\n\r\n        t.reverse();\r\n\r\n        // Prepend zeros to equalise exponents.\r\n        for (b = a; b--; t.push(0));\r\n        t.reverse();\r\n      } else {\r\n\r\n        // Exponents equal. Check digit by digit.\r\n        j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\r\n\r\n        for (a = b = 0; b < j; b++) {\r\n\r\n          if (xc[b] != yc[b]) {\r\n            xLTy = xc[b] < yc[b];\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      // x < y? Point xc to the array of the bigger number.\r\n      if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;\r\n\r\n      b = (j = yc.length) - (i = xc.length);\r\n\r\n      // Append zeros to xc if shorter.\r\n      // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\r\n      if (b > 0) for (; b--; xc[i++] = 0);\r\n      b = BASE - 1;\r\n\r\n      // Subtract yc from xc.\r\n      for (; j > a;) {\r\n\r\n        if (xc[--j] < yc[j]) {\r\n          for (i = j; i && !xc[--i]; xc[i] = b);\r\n          --xc[i];\r\n          xc[j] += BASE;\r\n        }\r\n\r\n        xc[j] -= yc[j];\r\n      }\r\n\r\n      // Remove leading zeros and adjust exponent accordingly.\r\n      for (; xc[0] == 0; xc.splice(0, 1), --ye);\r\n\r\n      // Zero?\r\n      if (!xc[0]) {\r\n\r\n        // Following IEEE 754 (2008) 6.3,\r\n        // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\r\n        y.s = ROUNDING_MODE == 3 ? -1 : 1;\r\n        y.c = [y.e = 0];\r\n        return y;\r\n      }\r\n\r\n      // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\r\n      // for finite x and y.\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     *   n % 0 =  N\r\n     *   n % N =  N\r\n     *   n % I =  n\r\n     *   0 % n =  0\r\n     *  -0 % n = -0\r\n     *   0 % 0 =  N\r\n     *   0 % N =  N\r\n     *   0 % I =  0\r\n     *   N % n =  N\r\n     *   N % 0 =  N\r\n     *   N % N =  N\r\n     *   N % I =  N\r\n     *   I % n =  N\r\n     *   I % 0 =  N\r\n     *   I % N =  N\r\n     *   I % I =  N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n     * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n     */\r\n    P.modulo = P.mod = function (y, b) {\r\n      var q, s,\r\n        x = this;\r\n\r\n      y = new BigNumber(y, b);\r\n\r\n      // Return NaN if x is Infinity or NaN, or y is NaN or zero.\r\n      if (!x.c || !y.s || y.c && !y.c[0]) {\r\n        return new BigNumber(NaN);\r\n\r\n      // Return x if y is Infinity or x is zero.\r\n      } else if (!y.c || x.c && !x.c[0]) {\r\n        return new BigNumber(x);\r\n      }\r\n\r\n      if (MODULO_MODE == 9) {\r\n\r\n        // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n        // r = x - qy    where  0 <= r < abs(y)\r\n        s = y.s;\r\n        y.s = 1;\r\n        q = div(x, y, 0, 3);\r\n        y.s = s;\r\n        q.s *= s;\r\n      } else {\r\n        q = div(x, y, 0, MODULO_MODE);\r\n      }\r\n\r\n      y = x.minus(q.times(y));\r\n\r\n      // To match JavaScript %, ensure sign of zero is sign of dividend.\r\n      if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;\r\n\r\n      return y;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n * 0 = 0\r\n     *  n * N = N\r\n     *  n * I = I\r\n     *  0 * n = 0\r\n     *  0 * 0 = 0\r\n     *  0 * N = N\r\n     *  0 * I = N\r\n     *  N * n = N\r\n     *  N * 0 = N\r\n     *  N * N = N\r\n     *  N * I = N\r\n     *  I * n = I\r\n     *  I * 0 = N\r\n     *  I * N = N\r\n     *  I * I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value\r\n     * of BigNumber(y, b).\r\n     */\r\n    P.multipliedBy = P.times = function (y, b) {\r\n      var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,\r\n        base, sqrtBase,\r\n        x = this,\r\n        xc = x.c,\r\n        yc = (y = new BigNumber(y, b)).c;\r\n\r\n      // Either NaN, ±Infinity or ±0?\r\n      if (!xc || !yc || !xc[0] || !yc[0]) {\r\n\r\n        // Return NaN if either is NaN, or one is 0 and the other is Infinity.\r\n        if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\r\n          y.c = y.e = y.s = null;\r\n        } else {\r\n          y.s *= x.s;\r\n\r\n          // Return ±Infinity if either is ±Infinity.\r\n          if (!xc || !yc) {\r\n            y.c = y.e = null;\r\n\r\n          // Return ±0 if either is ±0.\r\n          } else {\r\n            y.c = [0];\r\n            y.e = 0;\r\n          }\r\n        }\r\n\r\n        return y;\r\n      }\r\n\r\n      e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\r\n      y.s *= x.s;\r\n      xcL = xc.length;\r\n      ycL = yc.length;\r\n\r\n      // Ensure xc points to longer array and xcL to its length.\r\n      if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;\r\n\r\n      // Initialise the result array with zeros.\r\n      for (i = xcL + ycL, zc = []; i--; zc.push(0));\r\n\r\n      base = BASE;\r\n      sqrtBase = SQRT_BASE;\r\n\r\n      for (i = ycL; --i >= 0;) {\r\n        c = 0;\r\n        ylo = yc[i] % sqrtBase;\r\n        yhi = yc[i] / sqrtBase | 0;\r\n\r\n        for (k = xcL, j = i + k; j > i;) {\r\n          xlo = xc[--k] % sqrtBase;\r\n          xhi = xc[k] / sqrtBase | 0;\r\n          m = yhi * xlo + xhi * ylo;\r\n          xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;\r\n          c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\r\n          zc[j--] = xlo % base;\r\n        }\r\n\r\n        zc[j] = c;\r\n      }\r\n\r\n      if (c) {\r\n        ++e;\r\n      } else {\r\n        zc.splice(0, 1);\r\n      }\r\n\r\n      return normalise(y, zc, e);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n     * i.e. multiplied by -1.\r\n     */\r\n    P.negated = function () {\r\n      var x = new BigNumber(this);\r\n      x.s = -x.s || null;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n + 0 = n\r\n     *  n + N = N\r\n     *  n + I = I\r\n     *  0 + n = n\r\n     *  0 + 0 = 0\r\n     *  0 + N = N\r\n     *  0 + I = I\r\n     *  N + n = N\r\n     *  N + 0 = N\r\n     *  N + N = N\r\n     *  N + I = N\r\n     *  I + n = I\r\n     *  I + 0 = I\r\n     *  I + N = N\r\n     *  I + I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.plus = function (y, b) {\r\n      var t,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n       if (a != b) {\r\n        y.s = -b;\r\n        return x.minus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Return ±Infinity if either ±Infinity.\r\n        if (!xc || !yc) return new BigNumber(a / 0);\r\n\r\n        // Either zero?\r\n        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n        if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\r\n      if (a = xe - ye) {\r\n        if (a > 0) {\r\n          ye = xe;\r\n          t = yc;\r\n        } else {\r\n          a = -a;\r\n          t = xc;\r\n        }\r\n\r\n        t.reverse();\r\n        for (; a--; t.push(0));\r\n        t.reverse();\r\n      }\r\n\r\n      a = xc.length;\r\n      b = yc.length;\r\n\r\n      // Point xc to the longer array, and b to the shorter length.\r\n      if (a - b < 0) t = yc, yc = xc, xc = t, b = a;\r\n\r\n      // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\r\n      for (a = 0; b;) {\r\n        a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\r\n        xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\r\n      }\r\n\r\n      if (a) {\r\n        xc = [a].concat(xc);\r\n        ++ye;\r\n      }\r\n\r\n      // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n      // ye = MAX_EXP + 1 possible\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     * If sd is undefined or null or true or false, return the number of significant digits of\r\n     * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     * If sd is true include integer-part trailing zeros in the count.\r\n     *\r\n     * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.\r\n     *                     boolean: whether to count integer-part trailing zeros: true or false.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.precision = P.sd = function (sd, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (sd != null && sd !== !!sd) {\r\n        intCheck(sd, 1, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), sd, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      v = c.length - 1;\r\n      n = v * LOG_BASE + 1;\r\n\r\n      if (v = c[v]) {\r\n\r\n        // Subtract the number of trailing zeros of the last element.\r\n        for (; v % 10 == 0; v /= 10, n--);\r\n\r\n        // Add the number of digits of the first element.\r\n        for (v = c[0]; v >= 10; v /= 10, n++);\r\n      }\r\n\r\n      if (sd && x.e + 1 > n) n = x.e + 1;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n     * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n     *\r\n     * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'\r\n     */\r\n    P.shiftedBy = function (k) {\r\n      intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\r\n      return this.times('1e' + k);\r\n    };\r\n\r\n\r\n    /*\r\n     *  sqrt(-n) =  N\r\n     *  sqrt(N) =  N\r\n     *  sqrt(-I) =  N\r\n     *  sqrt(I) =  I\r\n     *  sqrt(0) =  0\r\n     *  sqrt(-0) = -0\r\n     *\r\n     * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n     * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.squareRoot = P.sqrt = function () {\r\n      var m, n, r, rep, t,\r\n        x = this,\r\n        c = x.c,\r\n        s = x.s,\r\n        e = x.e,\r\n        dp = DECIMAL_PLACES + 4,\r\n        half = new BigNumber('0.5');\r\n\r\n      // Negative/NaN/Infinity/zero?\r\n      if (s !== 1 || !c || !c[0]) {\r\n        return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\r\n      }\r\n\r\n      // Initial estimate.\r\n      s = Math.sqrt(+valueOf(x));\r\n\r\n      // Math.sqrt underflow/overflow?\r\n      // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n      if (s == 0 || s == 1 / 0) {\r\n        n = coeffToString(c);\r\n        if ((n.length + e) % 2 == 0) n += '0';\r\n        s = Math.sqrt(+n);\r\n        e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n        if (s == 1 / 0) {\r\n          n = '5e' + e;\r\n        } else {\r\n          n = s.toExponential();\r\n          n = n.slice(0, n.indexOf('e') + 1) + e;\r\n        }\r\n\r\n        r = new BigNumber(n);\r\n      } else {\r\n        r = new BigNumber(s + '');\r\n      }\r\n\r\n      // Check for zero.\r\n      // r could be zero if MIN_EXP is changed after the this value was created.\r\n      // This would cause a division by zero (x/t) and hence Infinity below, which would cause\r\n      // coeffToString to throw.\r\n      if (r.c[0]) {\r\n        e = r.e;\r\n        s = e + dp;\r\n        if (s < 3) s = 0;\r\n\r\n        // Newton-Raphson iteration.\r\n        for (; ;) {\r\n          t = r;\r\n          r = half.times(t.plus(div(x, t, dp, 1)));\r\n\r\n          if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {\r\n\r\n            // The exponent of r may here be one less than the final result exponent,\r\n            // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\r\n            // are indexed correctly.\r\n            if (r.e < e) --s;\r\n            n = n.slice(s - 3, s + 1);\r\n\r\n            // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\r\n            // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\r\n            // iteration.\r\n            if (n == '9999' || !rep && n == '4999') {\r\n\r\n              // On the first iteration only, check to see if rounding up gives the\r\n              // exact result as the nines may infinitely repeat.\r\n              if (!rep) {\r\n                round(t, t.e + DECIMAL_PLACES + 2, 0);\r\n\r\n                if (t.times(t).eq(x)) {\r\n                  r = t;\r\n                  break;\r\n                }\r\n              }\r\n\r\n              dp += 4;\r\n              s += 4;\r\n              rep = 1;\r\n            } else {\r\n\r\n              // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\r\n              // result. If not, then there are further digits and m will be truthy.\r\n              if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n                // Truncate to the first rounding digit.\r\n                round(r, r.e + DECIMAL_PLACES + 2, 1);\r\n                m = !r.times(r).eq(x);\r\n              }\r\n\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in exponential notation and\r\n     * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toExponential = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp++;\r\n      }\r\n      return format(this, dp, rm, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n     * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n     * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toFixed = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp = dp + this.e + 1;\r\n      }\r\n      return format(this, dp, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n     * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n     * of the format or FORMAT object (see BigNumber.set).\r\n     *\r\n     * The formatting object may contain some or all of the properties shown below.\r\n     *\r\n     * FORMAT = {\r\n     *   prefix: '',\r\n     *   groupSize: 3,\r\n     *   secondaryGroupSize: 0,\r\n     *   groupSeparator: ',',\r\n     *   decimalSeparator: '.',\r\n     *   fractionGroupSize: 0,\r\n     *   fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n     *   suffix: ''\r\n     * };\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     * [format] {object} Formatting options. See FORMAT pbject above.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     * '[BigNumber Error] Argument not an object: {format}'\r\n     */\r\n    P.toFormat = function (dp, rm, format) {\r\n      var str,\r\n        x = this;\r\n\r\n      if (format == null) {\r\n        if (dp != null && rm && typeof rm == 'object') {\r\n          format = rm;\r\n          rm = null;\r\n        } else if (dp && typeof dp == 'object') {\r\n          format = dp;\r\n          dp = rm = null;\r\n        } else {\r\n          format = FORMAT;\r\n        }\r\n      } else if (typeof format != 'object') {\r\n        throw Error\r\n          (bignumberError + 'Argument not an object: ' + format);\r\n      }\r\n\r\n      str = x.toFixed(dp, rm);\r\n\r\n      if (x.c) {\r\n        var i,\r\n          arr = str.split('.'),\r\n          g1 = +format.groupSize,\r\n          g2 = +format.secondaryGroupSize,\r\n          groupSeparator = format.groupSeparator || '',\r\n          intPart = arr[0],\r\n          fractionPart = arr[1],\r\n          isNeg = x.s < 0,\r\n          intDigits = isNeg ? intPart.slice(1) : intPart,\r\n          len = intDigits.length;\r\n\r\n        if (g2) i = g1, g1 = g2, g2 = i, len -= i;\r\n\r\n        if (g1 > 0 && len > 0) {\r\n          i = len % g1 || g1;\r\n          intPart = intDigits.substr(0, i);\r\n          for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);\r\n          if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\r\n          if (isNeg) intPart = '-' + intPart;\r\n        }\r\n\r\n        str = fractionPart\r\n         ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize)\r\n          ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'),\r\n           '$&' + (format.fractionGroupSeparator || ''))\r\n          : fractionPart)\r\n         : intPart;\r\n      }\r\n\r\n      return (format.prefix || '') + str + (format.suffix || '');\r\n    };\r\n\r\n\r\n    /*\r\n     * Return an array of two BigNumbers representing the value of this BigNumber as a simple\r\n     * fraction with an integer numerator and an integer denominator.\r\n     * The denominator will be a positive non-zero value less than or equal to the specified\r\n     * maximum denominator. If a maximum denominator is not specified, the denominator will be\r\n     * the lowest value necessary to represent the number exactly.\r\n     *\r\n     * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.\r\n     *\r\n     * '[BigNumber Error] Argument {not an integer|out of range} : {md}'\r\n     */\r\n    P.toFraction = function (md) {\r\n      var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s,\r\n        x = this,\r\n        xc = x.c;\r\n\r\n      if (md != null) {\r\n        n = new BigNumber(md);\r\n\r\n        // Throw if md is less than one or is not an integer, unless it is Infinity.\r\n        if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {\r\n          throw Error\r\n            (bignumberError + 'Argument ' +\r\n              (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));\r\n        }\r\n      }\r\n\r\n      if (!xc) return new BigNumber(x);\r\n\r\n      d = new BigNumber(ONE);\r\n      n1 = d0 = new BigNumber(ONE);\r\n      d1 = n0 = new BigNumber(ONE);\r\n      s = coeffToString(xc);\r\n\r\n      // Determine initial denominator.\r\n      // d is a power of 10 and the minimum max denominator that specifies the value exactly.\r\n      e = d.e = s.length - x.e - 1;\r\n      d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\r\n      md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;\r\n\r\n      exp = MAX_EXP;\r\n      MAX_EXP = 1 / 0;\r\n      n = new BigNumber(s);\r\n\r\n      // n0 = d1 = 0\r\n      n0.c[0] = 0;\r\n\r\n      for (; ;)  {\r\n        q = div(n, d, 0, 1);\r\n        d2 = d0.plus(q.times(d1));\r\n        if (d2.comparedTo(md) == 1) break;\r\n        d0 = d1;\r\n        d1 = d2;\r\n        n1 = n0.plus(q.times(d2 = n1));\r\n        n0 = d2;\r\n        d = n.minus(q.times(d2 = d));\r\n        n = d2;\r\n      }\r\n\r\n      d2 = div(md.minus(d0), d1, 0, 1);\r\n      n0 = n0.plus(d2.times(n1));\r\n      d0 = d0.plus(d2.times(d1));\r\n      n0.s = n1.s = x.s;\r\n      e = e * 2;\r\n\r\n      // Determine which fraction is closer to x, n0/d0 or n1/d1\r\n      r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(\r\n          div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];\r\n\r\n      MAX_EXP = exp;\r\n\r\n      return r;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return the value of this BigNumber converted to a number primitive.\r\n     */\r\n    P.toNumber = function () {\r\n      return +valueOf(this);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n     * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n     * necessary to represent the integer part of the value in fixed-point notation, then use\r\n     * exponential notation.\r\n     *\r\n     * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.toPrecision = function (sd, rm) {\r\n      if (sd != null) intCheck(sd, 1, MAX);\r\n      return format(this, sd, rm, 2);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n     * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n     * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n     * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n     * TO_EXP_NEG, return exponential notation.\r\n     *\r\n     * [b] {number} Integer, 2 to ALPHABET.length inclusive.\r\n     *\r\n     * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n     */\r\n    P.toString = function (b) {\r\n      var str,\r\n        n = this,\r\n        s = n.s,\r\n        e = n.e;\r\n\r\n      // Infinity or NaN?\r\n      if (e === null) {\r\n        if (s) {\r\n          str = 'Infinity';\r\n          if (s < 0) str = '-' + str;\r\n        } else {\r\n          str = 'NaN';\r\n        }\r\n      } else {\r\n        if (b == null) {\r\n          str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n           ? toExponential(coeffToString(n.c), e)\r\n           : toFixedPoint(coeffToString(n.c), e, '0');\r\n        } else if (b === 10) {\r\n          n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);\r\n          str = toFixedPoint(coeffToString(n.c), n.e, '0');\r\n        } else {\r\n          intCheck(b, 2, ALPHABET.length, 'Base');\r\n          str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);\r\n        }\r\n\r\n        if (s < 0 && n.c[0]) str = '-' + str;\r\n      }\r\n\r\n      return str;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return as toString, but do not accept a base argument, and include the minus sign for\r\n     * negative zero.\r\n     */\r\n    P.valueOf = P.toJSON = function () {\r\n      return valueOf(this);\r\n    };\r\n\r\n\r\n    P._isBigNumber = true;\r\n\r\n    if (configObject != null) BigNumber.set(configObject);\r\n\r\n    return BigNumber;\r\n  }\r\n\r\n\r\n  // PRIVATE HELPER FUNCTIONS\r\n\r\n  // These functions don't need access to variables,\r\n  // e.g. DECIMAL_PLACES, in the scope of the `clone` function above.\r\n\r\n\r\n  function bitFloor(n) {\r\n    var i = n | 0;\r\n    return n > 0 || n === i ? i : i - 1;\r\n  }\r\n\r\n\r\n  // Return a coefficient array as a string of base 10 digits.\r\n  function coeffToString(a) {\r\n    var s, z,\r\n      i = 1,\r\n      j = a.length,\r\n      r = a[0] + '';\r\n\r\n    for (; i < j;) {\r\n      s = a[i++] + '';\r\n      z = LOG_BASE - s.length;\r\n      for (; z--; s = '0' + s);\r\n      r += s;\r\n    }\r\n\r\n    // Determine trailing zeros.\r\n    for (j = r.length; r.charCodeAt(--j) === 48;);\r\n\r\n    return r.slice(0, j + 1 || 1);\r\n  }\r\n\r\n\r\n  // Compare the value of BigNumbers x and y.\r\n  function compare(x, y) {\r\n    var a, b,\r\n      xc = x.c,\r\n      yc = y.c,\r\n      i = x.s,\r\n      j = y.s,\r\n      k = x.e,\r\n      l = y.e;\r\n\r\n    // Either NaN?\r\n    if (!i || !j) return null;\r\n\r\n    a = xc && !xc[0];\r\n    b = yc && !yc[0];\r\n\r\n    // Either zero?\r\n    if (a || b) return a ? b ? 0 : -j : i;\r\n\r\n    // Signs differ?\r\n    if (i != j) return i;\r\n\r\n    a = i < 0;\r\n    b = k == l;\r\n\r\n    // Either Infinity?\r\n    if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;\r\n\r\n    // Compare exponents.\r\n    if (!b) return k > l ^ a ? 1 : -1;\r\n\r\n    j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n    // Compare digit by digit.\r\n    for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;\r\n\r\n    // Compare lengths.\r\n    return k == l ? 0 : k > l ^ a ? 1 : -1;\r\n  }\r\n\r\n\r\n  /*\r\n   * Check that n is a primitive number, an integer, and in range, otherwise throw.\r\n   */\r\n  function intCheck(n, min, max, name) {\r\n    if (n < min || n > max || n !== mathfloor(n)) {\r\n      throw Error\r\n       (bignumberError + (name || 'Argument') + (typeof n == 'number'\r\n         ? n < min || n > max ? ' out of range: ' : ' not an integer: '\r\n         : ' not a primitive number: ') + String(n));\r\n    }\r\n  }\r\n\r\n\r\n  // Assumes finite n.\r\n  function isOdd(n) {\r\n    var k = n.c.length - 1;\r\n    return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;\r\n  }\r\n\r\n\r\n  function toExponential(str, e) {\r\n    return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +\r\n     (e < 0 ? 'e' : 'e+') + e;\r\n  }\r\n\r\n\r\n  function toFixedPoint(str, e, z) {\r\n    var len, zs;\r\n\r\n    // Negative exponent?\r\n    if (e < 0) {\r\n\r\n      // Prepend zeros.\r\n      for (zs = z + '.'; ++e; zs += z);\r\n      str = zs + str;\r\n\r\n    // Positive exponent\r\n    } else {\r\n      len = str.length;\r\n\r\n      // Append zeros.\r\n      if (++e > len) {\r\n        for (zs = z, e -= len; --e; zs += z);\r\n        str += zs;\r\n      } else if (e < len) {\r\n        str = str.slice(0, e) + '.' + str.slice(e);\r\n      }\r\n    }\r\n\r\n    return str;\r\n  }\r\n\r\n\r\n  // EXPORT\r\n\r\n\r\n  BigNumber = clone();\r\n  BigNumber['default'] = BigNumber.BigNumber = BigNumber;\r\n\r\n  // AMD.\r\n  if (typeof define == 'function' && define.amd) {\r\n    define(function () { return BigNumber; });\r\n\r\n  // Node.js and other environments that support module.exports.\r\n  } else if (typeof module != 'undefined' && module.exports) {\r\n    module.exports = BigNumber;\r\n\r\n  // Browser.\r\n  } else {\r\n    if (!globalObject) {\r\n      globalObject = typeof self != 'undefined' && self ? self : window;\r\n    }\r\n\r\n    globalObject.BigNumber = BigNumber;\r\n  }\r\n})(this);\r\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getLength = exports.decode = exports.encode = void 0;\nvar BN = require(\"bn.js\");\n/**\n * RLP Encoding based on: https://github.com/ethereum/wiki/wiki/%5BEnglish%5D-RLP\n * This function takes in a data, convert it to buffer if not, and a length for recursion\n * @param input - will be converted to buffer\n * @returns returns buffer of encoded data\n **/\nfunction encode(input) {\n    if (Array.isArray(input)) {\n        var output = [];\n        for (var i = 0; i < input.length; i++) {\n            output.push(encode(input[i]));\n        }\n        var buf = Buffer.concat(output);\n        return Buffer.concat([encodeLength(buf.length, 192), buf]);\n    }\n    else {\n        var inputBuf = toBuffer(input);\n        return inputBuf.length === 1 && inputBuf[0] < 128\n            ? inputBuf\n            : Buffer.concat([encodeLength(inputBuf.length, 128), inputBuf]);\n    }\n}\nexports.encode = encode;\n/**\n * Parse integers. Check if there is no leading zeros\n * @param v The value to parse\n * @param base The base to parse the integer into\n */\nfunction safeParseInt(v, base) {\n    if (v.slice(0, 2) === '00') {\n        throw new Error('invalid RLP: extra zeros');\n    }\n    return parseInt(v, base);\n}\nfunction encodeLength(len, offset) {\n    if (len < 56) {\n        return Buffer.from([len + offset]);\n    }\n    else {\n        var hexLength = intToHex(len);\n        var lLength = hexLength.length / 2;\n        var firstByte = intToHex(offset + 55 + lLength);\n        return Buffer.from(firstByte + hexLength, 'hex');\n    }\n}\nfunction decode(input, stream) {\n    if (stream === void 0) { stream = false; }\n    if (!input || input.length === 0) {\n        return Buffer.from([]);\n    }\n    var inputBuffer = toBuffer(input);\n    var decoded = _decode(inputBuffer);\n    if (stream) {\n        return decoded;\n    }\n    if (decoded.remainder.length !== 0) {\n        throw new Error('invalid remainder');\n    }\n    return decoded.data;\n}\nexports.decode = decode;\n/**\n * Get the length of the RLP input\n * @param input\n * @returns The length of the input or an empty Buffer if no input\n */\nfunction getLength(input) {\n    if (!input || input.length === 0) {\n        return Buffer.from([]);\n    }\n    var inputBuffer = toBuffer(input);\n    var firstByte = inputBuffer[0];\n    if (firstByte <= 0x7f) {\n        return inputBuffer.length;\n    }\n    else if (firstByte <= 0xb7) {\n        return firstByte - 0x7f;\n    }\n    else if (firstByte <= 0xbf) {\n        return firstByte - 0xb6;\n    }\n    else if (firstByte <= 0xf7) {\n        // a list between  0-55 bytes long\n        return firstByte - 0xbf;\n    }\n    else {\n        // a list  over 55 bytes long\n        var llength = firstByte - 0xf6;\n        var length = safeParseInt(inputBuffer.slice(1, llength).toString('hex'), 16);\n        return llength + length;\n    }\n}\nexports.getLength = getLength;\n/** Decode an input with RLP */\nfunction _decode(input) {\n    var length, llength, data, innerRemainder, d;\n    var decoded = [];\n    var firstByte = input[0];\n    if (firstByte <= 0x7f) {\n        // a single byte whose value is in the [0x00, 0x7f] range, that byte is its own RLP encoding.\n        return {\n            data: input.slice(0, 1),\n            remainder: input.slice(1),\n        };\n    }\n    else if (firstByte <= 0xb7) {\n        // string is 0-55 bytes long. A single byte with value 0x80 plus the length of the string followed by the string\n        // The range of the first byte is [0x80, 0xb7]\n        length = firstByte - 0x7f;\n        // set 0x80 null to 0\n        if (firstByte === 0x80) {\n            data = Buffer.from([]);\n        }\n        else {\n            data = input.slice(1, length);\n        }\n        if (length === 2 && data[0] < 0x80) {\n            throw new Error('invalid rlp encoding: byte must be less 0x80');\n        }\n        return {\n            data: data,\n            remainder: input.slice(length),\n        };\n    }\n    else if (firstByte <= 0xbf) {\n        // string is greater than 55 bytes long. A single byte with the value (0xb7 plus the length of the length),\n        // followed by the length, followed by the string\n        llength = firstByte - 0xb6;\n        if (input.length - 1 < llength) {\n            throw new Error('invalid RLP: not enough bytes for string length');\n        }\n        length = safeParseInt(input.slice(1, llength).toString('hex'), 16);\n        if (length <= 55) {\n            throw new Error('invalid RLP: expected string length to be greater than 55');\n        }\n        data = input.slice(llength, length + llength);\n        if (data.length < length) {\n            throw new Error('invalid RLP: not enough bytes for string');\n        }\n        return {\n            data: data,\n            remainder: input.slice(length + llength),\n        };\n    }\n    else if (firstByte <= 0xf7) {\n        // a list between  0-55 bytes long\n        length = firstByte - 0xbf;\n        innerRemainder = input.slice(1, length);\n        while (innerRemainder.length) {\n            d = _decode(innerRemainder);\n            decoded.push(d.data);\n            innerRemainder = d.remainder;\n        }\n        return {\n            data: decoded,\n            remainder: input.slice(length),\n        };\n    }\n    else {\n        // a list  over 55 bytes long\n        llength = firstByte - 0xf6;\n        length = safeParseInt(input.slice(1, llength).toString('hex'), 16);\n        var totalLength = llength + length;\n        if (totalLength > input.length) {\n            throw new Error('invalid rlp: total length is larger than the data');\n        }\n        innerRemainder = input.slice(llength, totalLength);\n        if (innerRemainder.length === 0) {\n            throw new Error('invalid rlp, List has a invalid length');\n        }\n        while (innerRemainder.length) {\n            d = _decode(innerRemainder);\n            decoded.push(d.data);\n            innerRemainder = d.remainder;\n        }\n        return {\n            data: decoded,\n            remainder: input.slice(totalLength),\n        };\n    }\n}\n/** Check if a string is prefixed by 0x */\nfunction isHexPrefixed(str) {\n    return str.slice(0, 2) === '0x';\n}\n/** Removes 0x from a given String */\nfunction stripHexPrefix(str) {\n    if (typeof str !== 'string') {\n        return str;\n    }\n    return isHexPrefixed(str) ? str.slice(2) : str;\n}\n/** Transform an integer into its hexadecimal value */\nfunction intToHex(integer) {\n    if (integer < 0) {\n        throw new Error('Invalid integer as argument, must be unsigned!');\n    }\n    var hex = integer.toString(16);\n    return hex.length % 2 ? \"0\" + hex : hex;\n}\n/** Pad a string to be even */\nfunction padToEven(a) {\n    return a.length % 2 ? \"0\" + a : a;\n}\n/** Transform an integer into a Buffer */\nfunction intToBuffer(integer) {\n    var hex = intToHex(integer);\n    return Buffer.from(hex, 'hex');\n}\n/** Transform anything into a Buffer */\nfunction toBuffer(v) {\n    if (!Buffer.isBuffer(v)) {\n        if (typeof v === 'string') {\n            if (isHexPrefixed(v)) {\n                return Buffer.from(padToEven(stripHexPrefix(v)), 'hex');\n            }\n            else {\n                return Buffer.from(v);\n            }\n        }\n        else if (typeof v === 'number' || typeof v === 'bigint') {\n            if (!v) {\n                return Buffer.from([]);\n            }\n            else {\n                return intToBuffer(v);\n            }\n        }\n        else if (v === null || v === undefined) {\n            return Buffer.from([]);\n        }\n        else if (v instanceof Uint8Array) {\n            return Buffer.from(v);\n        }\n        else if (BN.isBN(v)) {\n            // converts a BN to a Buffer\n            return Buffer.from(v.toArray());\n        }\n        else {\n            throw new Error('invalid type');\n        }\n    }\n    return v;\n}\n//# sourceMappingURL=index.js.map","(function (module, exports) {\n  'use strict';\n\n  // Utils\n  function assert (val, msg) {\n    if (!val) throw new Error(msg || 'Assertion failed');\n  }\n\n  // Could use `inherits` module, but don't want to move from single file\n  // architecture yet.\n  function inherits (ctor, superCtor) {\n    ctor.super_ = superCtor;\n    var TempCtor = function () {};\n    TempCtor.prototype = superCtor.prototype;\n    ctor.prototype = new TempCtor();\n    ctor.prototype.constructor = ctor;\n  }\n\n  // BN\n\n  function BN (number, base, endian) {\n    if (BN.isBN(number)) {\n      return number;\n    }\n\n    this.negative = 0;\n    this.words = null;\n    this.length = 0;\n\n    // Reduction context\n    this.red = null;\n\n    if (number !== null) {\n      if (base === 'le' || base === 'be') {\n        endian = base;\n        base = 10;\n      }\n\n      this._init(number || 0, base || 10, endian || 'be');\n    }\n  }\n  if (typeof module === 'object') {\n    module.exports = BN;\n  } else {\n    exports.BN = BN;\n  }\n\n  BN.BN = BN;\n  BN.wordSize = 26;\n\n  var Buffer;\n  try {\n    if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') {\n      Buffer = window.Buffer;\n    } else {\n      Buffer = require('buffer').Buffer;\n    }\n  } catch (e) {\n  }\n\n  BN.isBN = function isBN (num) {\n    if (num instanceof BN) {\n      return true;\n    }\n\n    return num !== null && typeof num === 'object' &&\n      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);\n  };\n\n  BN.max = function max (left, right) {\n    if (left.cmp(right) > 0) return left;\n    return right;\n  };\n\n  BN.min = function min (left, right) {\n    if (left.cmp(right) < 0) return left;\n    return right;\n  };\n\n  BN.prototype._init = function init (number, base, endian) {\n    if (typeof number === 'number') {\n      return this._initNumber(number, base, endian);\n    }\n\n    if (typeof number === 'object') {\n      return this._initArray(number, base, endian);\n    }\n\n    if (base === 'hex') {\n      base = 16;\n    }\n    assert(base === (base | 0) && base >= 2 && base <= 36);\n\n    number = number.toString().replace(/\\s+/g, '');\n    var start = 0;\n    if (number[0] === '-') {\n      start++;\n      this.negative = 1;\n    }\n\n    if (start < number.length) {\n      if (base === 16) {\n        this._parseHex(number, start, endian);\n      } else {\n        this._parseBase(number, base, start);\n        if (endian === 'le') {\n          this._initArray(this.toArray(), base, endian);\n        }\n      }\n    }\n  };\n\n  BN.prototype._initNumber = function _initNumber (number, base, endian) {\n    if (number < 0) {\n      this.negative = 1;\n      number = -number;\n    }\n    if (number < 0x4000000) {\n      this.words = [ number & 0x3ffffff ];\n      this.length = 1;\n    } else if (number < 0x10000000000000) {\n      this.words = [\n        number & 0x3ffffff,\n        (number / 0x4000000) & 0x3ffffff\n      ];\n      this.length = 2;\n    } else {\n      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)\n      this.words = [\n        number & 0x3ffffff,\n        (number / 0x4000000) & 0x3ffffff,\n        1\n      ];\n      this.length = 3;\n    }\n\n    if (endian !== 'le') return;\n\n    // Reverse the bytes\n    this._initArray(this.toArray(), base, endian);\n  };\n\n  BN.prototype._initArray = function _initArray (number, base, endian) {\n    // Perhaps a Uint8Array\n    assert(typeof number.length === 'number');\n    if (number.length <= 0) {\n      this.words = [ 0 ];\n      this.length = 1;\n      return this;\n    }\n\n    this.length = Math.ceil(number.length / 3);\n    this.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      this.words[i] = 0;\n    }\n\n    var j, w;\n    var off = 0;\n    if (endian === 'be') {\n      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {\n        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);\n        this.words[j] |= (w << off) & 0x3ffffff;\n        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n        off += 24;\n        if (off >= 26) {\n          off -= 26;\n          j++;\n        }\n      }\n    } else if (endian === 'le') {\n      for (i = 0, j = 0; i < number.length; i += 3) {\n        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);\n        this.words[j] |= (w << off) & 0x3ffffff;\n        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n        off += 24;\n        if (off >= 26) {\n          off -= 26;\n          j++;\n        }\n      }\n    }\n    return this.strip();\n  };\n\n  function parseHex4Bits (string, index) {\n    var c = string.charCodeAt(index);\n    // 'A' - 'F'\n    if (c >= 65 && c <= 70) {\n      return c - 55;\n    // 'a' - 'f'\n    } else if (c >= 97 && c <= 102) {\n      return c - 87;\n    // '0' - '9'\n    } else {\n      return (c - 48) & 0xf;\n    }\n  }\n\n  function parseHexByte (string, lowerBound, index) {\n    var r = parseHex4Bits(string, index);\n    if (index - 1 >= lowerBound) {\n      r |= parseHex4Bits(string, index - 1) << 4;\n    }\n    return r;\n  }\n\n  BN.prototype._parseHex = function _parseHex (number, start, endian) {\n    // Create possibly bigger array to ensure that it fits the number\n    this.length = Math.ceil((number.length - start) / 6);\n    this.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      this.words[i] = 0;\n    }\n\n    // 24-bits chunks\n    var off = 0;\n    var j = 0;\n\n    var w;\n    if (endian === 'be') {\n      for (i = number.length - 1; i >= start; i -= 2) {\n        w = parseHexByte(number, start, i) << off;\n        this.words[j] |= w & 0x3ffffff;\n        if (off >= 18) {\n          off -= 18;\n          j += 1;\n          this.words[j] |= w >>> 26;\n        } else {\n          off += 8;\n        }\n      }\n    } else {\n      var parseLength = number.length - start;\n      for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {\n        w = parseHexByte(number, start, i) << off;\n        this.words[j] |= w & 0x3ffffff;\n        if (off >= 18) {\n          off -= 18;\n          j += 1;\n          this.words[j] |= w >>> 26;\n        } else {\n          off += 8;\n        }\n      }\n    }\n\n    this.strip();\n  };\n\n  function parseBase (str, start, end, mul) {\n    var r = 0;\n    var len = Math.min(str.length, end);\n    for (var i = start; i < len; i++) {\n      var c = str.charCodeAt(i) - 48;\n\n      r *= mul;\n\n      // 'a'\n      if (c >= 49) {\n        r += c - 49 + 0xa;\n\n      // 'A'\n      } else if (c >= 17) {\n        r += c - 17 + 0xa;\n\n      // '0' - '9'\n      } else {\n        r += c;\n      }\n    }\n    return r;\n  }\n\n  BN.prototype._parseBase = function _parseBase (number, base, start) {\n    // Initialize as zero\n    this.words = [ 0 ];\n    this.length = 1;\n\n    // Find length of limb in base\n    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {\n      limbLen++;\n    }\n    limbLen--;\n    limbPow = (limbPow / base) | 0;\n\n    var total = number.length - start;\n    var mod = total % limbLen;\n    var end = Math.min(total, total - mod) + start;\n\n    var word = 0;\n    for (var i = start; i < end; i += limbLen) {\n      word = parseBase(number, i, i + limbLen, base);\n\n      this.imuln(limbPow);\n      if (this.words[0] + word < 0x4000000) {\n        this.words[0] += word;\n      } else {\n        this._iaddn(word);\n      }\n    }\n\n    if (mod !== 0) {\n      var pow = 1;\n      word = parseBase(number, i, number.length, base);\n\n      for (i = 0; i < mod; i++) {\n        pow *= base;\n      }\n\n      this.imuln(pow);\n      if (this.words[0] + word < 0x4000000) {\n        this.words[0] += word;\n      } else {\n        this._iaddn(word);\n      }\n    }\n\n    this.strip();\n  };\n\n  BN.prototype.copy = function copy (dest) {\n    dest.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      dest.words[i] = this.words[i];\n    }\n    dest.length = this.length;\n    dest.negative = this.negative;\n    dest.red = this.red;\n  };\n\n  BN.prototype.clone = function clone () {\n    var r = new BN(null);\n    this.copy(r);\n    return r;\n  };\n\n  BN.prototype._expand = function _expand (size) {\n    while (this.length < size) {\n      this.words[this.length++] = 0;\n    }\n    return this;\n  };\n\n  // Remove leading `0` from `this`\n  BN.prototype.strip = function strip () {\n    while (this.length > 1 && this.words[this.length - 1] === 0) {\n      this.length--;\n    }\n    return this._normSign();\n  };\n\n  BN.prototype._normSign = function _normSign () {\n    // -0 = 0\n    if (this.length === 1 && this.words[0] === 0) {\n      this.negative = 0;\n    }\n    return this;\n  };\n\n  BN.prototype.inspect = function inspect () {\n    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';\n  };\n\n  /*\n\n  var zeros = [];\n  var groupSizes = [];\n  var groupBases = [];\n\n  var s = '';\n  var i = -1;\n  while (++i < BN.wordSize) {\n    zeros[i] = s;\n    s += '0';\n  }\n  groupSizes[0] = 0;\n  groupSizes[1] = 0;\n  groupBases[0] = 0;\n  groupBases[1] = 0;\n  var base = 2 - 1;\n  while (++base < 36 + 1) {\n    var groupSize = 0;\n    var groupBase = 1;\n    while (groupBase < (1 << BN.wordSize) / base) {\n      groupBase *= base;\n      groupSize += 1;\n    }\n    groupSizes[base] = groupSize;\n    groupBases[base] = groupBase;\n  }\n\n  */\n\n  var zeros = [\n    '',\n    '0',\n    '00',\n    '000',\n    '0000',\n    '00000',\n    '000000',\n    '0000000',\n    '00000000',\n    '000000000',\n    '0000000000',\n    '00000000000',\n    '000000000000',\n    '0000000000000',\n    '00000000000000',\n    '000000000000000',\n    '0000000000000000',\n    '00000000000000000',\n    '000000000000000000',\n    '0000000000000000000',\n    '00000000000000000000',\n    '000000000000000000000',\n    '0000000000000000000000',\n    '00000000000000000000000',\n    '000000000000000000000000',\n    '0000000000000000000000000'\n  ];\n\n  var groupSizes = [\n    0, 0,\n    25, 16, 12, 11, 10, 9, 8,\n    8, 7, 7, 7, 7, 6, 6,\n    6, 6, 6, 6, 6, 5, 5,\n    5, 5, 5, 5, 5, 5, 5,\n    5, 5, 5, 5, 5, 5, 5\n  ];\n\n  var groupBases = [\n    0, 0,\n    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,\n    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,\n    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,\n    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,\n    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176\n  ];\n\n  BN.prototype.toString = function toString (base, padding) {\n    base = base || 10;\n    padding = padding | 0 || 1;\n\n    var out;\n    if (base === 16 || base === 'hex') {\n      out = '';\n      var off = 0;\n      var carry = 0;\n      for (var i = 0; i < this.length; i++) {\n        var w = this.words[i];\n        var word = (((w << off) | carry) & 0xffffff).toString(16);\n        carry = (w >>> (24 - off)) & 0xffffff;\n        if (carry !== 0 || i !== this.length - 1) {\n          out = zeros[6 - word.length] + word + out;\n        } else {\n          out = word + out;\n        }\n        off += 2;\n        if (off >= 26) {\n          off -= 26;\n          i--;\n        }\n      }\n      if (carry !== 0) {\n        out = carry.toString(16) + out;\n      }\n      while (out.length % padding !== 0) {\n        out = '0' + out;\n      }\n      if (this.negative !== 0) {\n        out = '-' + out;\n      }\n      return out;\n    }\n\n    if (base === (base | 0) && base >= 2 && base <= 36) {\n      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));\n      var groupSize = groupSizes[base];\n      // var groupBase = Math.pow(base, groupSize);\n      var groupBase = groupBases[base];\n      out = '';\n      var c = this.clone();\n      c.negative = 0;\n      while (!c.isZero()) {\n        var r = c.modn(groupBase).toString(base);\n        c = c.idivn(groupBase);\n\n        if (!c.isZero()) {\n          out = zeros[groupSize - r.length] + r + out;\n        } else {\n          out = r + out;\n        }\n      }\n      if (this.isZero()) {\n        out = '0' + out;\n      }\n      while (out.length % padding !== 0) {\n        out = '0' + out;\n      }\n      if (this.negative !== 0) {\n        out = '-' + out;\n      }\n      return out;\n    }\n\n    assert(false, 'Base should be between 2 and 36');\n  };\n\n  BN.prototype.toNumber = function toNumber () {\n    var ret = this.words[0];\n    if (this.length === 2) {\n      ret += this.words[1] * 0x4000000;\n    } else if (this.length === 3 && this.words[2] === 0x01) {\n      // NOTE: at this stage it is known that the top bit is set\n      ret += 0x10000000000000 + (this.words[1] * 0x4000000);\n    } else if (this.length > 2) {\n      assert(false, 'Number can only safely store up to 53 bits');\n    }\n    return (this.negative !== 0) ? -ret : ret;\n  };\n\n  BN.prototype.toJSON = function toJSON () {\n    return this.toString(16);\n  };\n\n  BN.prototype.toBuffer = function toBuffer (endian, length) {\n    assert(typeof Buffer !== 'undefined');\n    return this.toArrayLike(Buffer, endian, length);\n  };\n\n  BN.prototype.toArray = function toArray (endian, length) {\n    return this.toArrayLike(Array, endian, length);\n  };\n\n  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {\n    var byteLength = this.byteLength();\n    var reqLength = length || Math.max(1, byteLength);\n    assert(byteLength <= reqLength, 'byte array longer than desired length');\n    assert(reqLength > 0, 'Requested array length <= 0');\n\n    this.strip();\n    var littleEndian = endian === 'le';\n    var res = new ArrayType(reqLength);\n\n    var b, i;\n    var q = this.clone();\n    if (!littleEndian) {\n      // Assume big-endian\n      for (i = 0; i < reqLength - byteLength; i++) {\n        res[i] = 0;\n      }\n\n      for (i = 0; !q.isZero(); i++) {\n        b = q.andln(0xff);\n        q.iushrn(8);\n\n        res[reqLength - i - 1] = b;\n      }\n    } else {\n      for (i = 0; !q.isZero(); i++) {\n        b = q.andln(0xff);\n        q.iushrn(8);\n\n        res[i] = b;\n      }\n\n      for (; i < reqLength; i++) {\n        res[i] = 0;\n      }\n    }\n\n    return res;\n  };\n\n  if (Math.clz32) {\n    BN.prototype._countBits = function _countBits (w) {\n      return 32 - Math.clz32(w);\n    };\n  } else {\n    BN.prototype._countBits = function _countBits (w) {\n      var t = w;\n      var r = 0;\n      if (t >= 0x1000) {\n        r += 13;\n        t >>>= 13;\n      }\n      if (t >= 0x40) {\n        r += 7;\n        t >>>= 7;\n      }\n      if (t >= 0x8) {\n        r += 4;\n        t >>>= 4;\n      }\n      if (t >= 0x02) {\n        r += 2;\n        t >>>= 2;\n      }\n      return r + t;\n    };\n  }\n\n  BN.prototype._zeroBits = function _zeroBits (w) {\n    // Short-cut\n    if (w === 0) return 26;\n\n    var t = w;\n    var r = 0;\n    if ((t & 0x1fff) === 0) {\n      r += 13;\n      t >>>= 13;\n    }\n    if ((t & 0x7f) === 0) {\n      r += 7;\n      t >>>= 7;\n    }\n    if ((t & 0xf) === 0) {\n      r += 4;\n      t >>>= 4;\n    }\n    if ((t & 0x3) === 0) {\n      r += 2;\n      t >>>= 2;\n    }\n    if ((t & 0x1) === 0) {\n      r++;\n    }\n    return r;\n  };\n\n  // Return number of used bits in a BN\n  BN.prototype.bitLength = function bitLength () {\n    var w = this.words[this.length - 1];\n    var hi = this._countBits(w);\n    return (this.length - 1) * 26 + hi;\n  };\n\n  function toBitArray (num) {\n    var w = new Array(num.bitLength());\n\n    for (var bit = 0; bit < w.length; bit++) {\n      var off = (bit / 26) | 0;\n      var wbit = bit % 26;\n\n      w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;\n    }\n\n    return w;\n  }\n\n  // Number of trailing zero bits\n  BN.prototype.zeroBits = function zeroBits () {\n    if (this.isZero()) return 0;\n\n    var r = 0;\n    for (var i = 0; i < this.length; i++) {\n      var b = this._zeroBits(this.words[i]);\n      r += b;\n      if (b !== 26) break;\n    }\n    return r;\n  };\n\n  BN.prototype.byteLength = function byteLength () {\n    return Math.ceil(this.bitLength() / 8);\n  };\n\n  BN.prototype.toTwos = function toTwos (width) {\n    if (this.negative !== 0) {\n      return this.abs().inotn(width).iaddn(1);\n    }\n    return this.clone();\n  };\n\n  BN.prototype.fromTwos = function fromTwos (width) {\n    if (this.testn(width - 1)) {\n      return this.notn(width).iaddn(1).ineg();\n    }\n    return this.clone();\n  };\n\n  BN.prototype.isNeg = function isNeg () {\n    return this.negative !== 0;\n  };\n\n  // Return negative clone of `this`\n  BN.prototype.neg = function neg () {\n    return this.clone().ineg();\n  };\n\n  BN.prototype.ineg = function ineg () {\n    if (!this.isZero()) {\n      this.negative ^= 1;\n    }\n\n    return this;\n  };\n\n  // Or `num` with `this` in-place\n  BN.prototype.iuor = function iuor (num) {\n    while (this.length < num.length) {\n      this.words[this.length++] = 0;\n    }\n\n    for (var i = 0; i < num.length; i++) {\n      this.words[i] = this.words[i] | num.words[i];\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ior = function ior (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuor(num);\n  };\n\n  // Or `num` with `this`\n  BN.prototype.or = function or (num) {\n    if (this.length > num.length) return this.clone().ior(num);\n    return num.clone().ior(this);\n  };\n\n  BN.prototype.uor = function uor (num) {\n    if (this.length > num.length) return this.clone().iuor(num);\n    return num.clone().iuor(this);\n  };\n\n  // And `num` with `this` in-place\n  BN.prototype.iuand = function iuand (num) {\n    // b = min-length(num, this)\n    var b;\n    if (this.length > num.length) {\n      b = num;\n    } else {\n      b = this;\n    }\n\n    for (var i = 0; i < b.length; i++) {\n      this.words[i] = this.words[i] & num.words[i];\n    }\n\n    this.length = b.length;\n\n    return this.strip();\n  };\n\n  BN.prototype.iand = function iand (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuand(num);\n  };\n\n  // And `num` with `this`\n  BN.prototype.and = function and (num) {\n    if (this.length > num.length) return this.clone().iand(num);\n    return num.clone().iand(this);\n  };\n\n  BN.prototype.uand = function uand (num) {\n    if (this.length > num.length) return this.clone().iuand(num);\n    return num.clone().iuand(this);\n  };\n\n  // Xor `num` with `this` in-place\n  BN.prototype.iuxor = function iuxor (num) {\n    // a.length > b.length\n    var a;\n    var b;\n    if (this.length > num.length) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    for (var i = 0; i < b.length; i++) {\n      this.words[i] = a.words[i] ^ b.words[i];\n    }\n\n    if (this !== a) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    this.length = a.length;\n\n    return this.strip();\n  };\n\n  BN.prototype.ixor = function ixor (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuxor(num);\n  };\n\n  // Xor `num` with `this`\n  BN.prototype.xor = function xor (num) {\n    if (this.length > num.length) return this.clone().ixor(num);\n    return num.clone().ixor(this);\n  };\n\n  BN.prototype.uxor = function uxor (num) {\n    if (this.length > num.length) return this.clone().iuxor(num);\n    return num.clone().iuxor(this);\n  };\n\n  // Not ``this`` with ``width`` bitwidth\n  BN.prototype.inotn = function inotn (width) {\n    assert(typeof width === 'number' && width >= 0);\n\n    var bytesNeeded = Math.ceil(width / 26) | 0;\n    var bitsLeft = width % 26;\n\n    // Extend the buffer with leading zeroes\n    this._expand(bytesNeeded);\n\n    if (bitsLeft > 0) {\n      bytesNeeded--;\n    }\n\n    // Handle complete words\n    for (var i = 0; i < bytesNeeded; i++) {\n      this.words[i] = ~this.words[i] & 0x3ffffff;\n    }\n\n    // Handle the residue\n    if (bitsLeft > 0) {\n      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));\n    }\n\n    // And remove leading zeroes\n    return this.strip();\n  };\n\n  BN.prototype.notn = function notn (width) {\n    return this.clone().inotn(width);\n  };\n\n  // Set `bit` of `this`\n  BN.prototype.setn = function setn (bit, val) {\n    assert(typeof bit === 'number' && bit >= 0);\n\n    var off = (bit / 26) | 0;\n    var wbit = bit % 26;\n\n    this._expand(off + 1);\n\n    if (val) {\n      this.words[off] = this.words[off] | (1 << wbit);\n    } else {\n      this.words[off] = this.words[off] & ~(1 << wbit);\n    }\n\n    return this.strip();\n  };\n\n  // Add `num` to `this` in-place\n  BN.prototype.iadd = function iadd (num) {\n    var r;\n\n    // negative + positive\n    if (this.negative !== 0 && num.negative === 0) {\n      this.negative = 0;\n      r = this.isub(num);\n      this.negative ^= 1;\n      return this._normSign();\n\n    // positive + negative\n    } else if (this.negative === 0 && num.negative !== 0) {\n      num.negative = 0;\n      r = this.isub(num);\n      num.negative = 1;\n      return r._normSign();\n    }\n\n    // a.length > b.length\n    var a, b;\n    if (this.length > num.length) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    var carry = 0;\n    for (var i = 0; i < b.length; i++) {\n      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;\n      this.words[i] = r & 0x3ffffff;\n      carry = r >>> 26;\n    }\n    for (; carry !== 0 && i < a.length; i++) {\n      r = (a.words[i] | 0) + carry;\n      this.words[i] = r & 0x3ffffff;\n      carry = r >>> 26;\n    }\n\n    this.length = a.length;\n    if (carry !== 0) {\n      this.words[this.length] = carry;\n      this.length++;\n    // Copy the rest of the words\n    } else if (a !== this) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    return this;\n  };\n\n  // Add `num` to `this`\n  BN.prototype.add = function add (num) {\n    var res;\n    if (num.negative !== 0 && this.negative === 0) {\n      num.negative = 0;\n      res = this.sub(num);\n      num.negative ^= 1;\n      return res;\n    } else if (num.negative === 0 && this.negative !== 0) {\n      this.negative = 0;\n      res = num.sub(this);\n      this.negative = 1;\n      return res;\n    }\n\n    if (this.length > num.length) return this.clone().iadd(num);\n\n    return num.clone().iadd(this);\n  };\n\n  // Subtract `num` from `this` in-place\n  BN.prototype.isub = function isub (num) {\n    // this - (-num) = this + num\n    if (num.negative !== 0) {\n      num.negative = 0;\n      var r = this.iadd(num);\n      num.negative = 1;\n      return r._normSign();\n\n    // -this - num = -(this + num)\n    } else if (this.negative !== 0) {\n      this.negative = 0;\n      this.iadd(num);\n      this.negative = 1;\n      return this._normSign();\n    }\n\n    // At this point both numbers are positive\n    var cmp = this.cmp(num);\n\n    // Optimization - zeroify\n    if (cmp === 0) {\n      this.negative = 0;\n      this.length = 1;\n      this.words[0] = 0;\n      return this;\n    }\n\n    // a > b\n    var a, b;\n    if (cmp > 0) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    var carry = 0;\n    for (var i = 0; i < b.length; i++) {\n      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;\n      carry = r >> 26;\n      this.words[i] = r & 0x3ffffff;\n    }\n    for (; carry !== 0 && i < a.length; i++) {\n      r = (a.words[i] | 0) + carry;\n      carry = r >> 26;\n      this.words[i] = r & 0x3ffffff;\n    }\n\n    // Copy rest of the words\n    if (carry === 0 && i < a.length && a !== this) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    this.length = Math.max(this.length, i);\n\n    if (a !== this) {\n      this.negative = 1;\n    }\n\n    return this.strip();\n  };\n\n  // Subtract `num` from `this`\n  BN.prototype.sub = function sub (num) {\n    return this.clone().isub(num);\n  };\n\n  function smallMulTo (self, num, out) {\n    out.negative = num.negative ^ self.negative;\n    var len = (self.length + num.length) | 0;\n    out.length = len;\n    len = (len - 1) | 0;\n\n    // Peel one iteration (compiler can't do it, because of code complexity)\n    var a = self.words[0] | 0;\n    var b = num.words[0] | 0;\n    var r = a * b;\n\n    var lo = r & 0x3ffffff;\n    var carry = (r / 0x4000000) | 0;\n    out.words[0] = lo;\n\n    for (var k = 1; k < len; k++) {\n      // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n      // note that ncarry could be >= 0x3ffffff\n      var ncarry = carry >>> 26;\n      var rword = carry & 0x3ffffff;\n      var maxJ = Math.min(k, num.length - 1);\n      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n        var i = (k - j) | 0;\n        a = self.words[i] | 0;\n        b = num.words[j] | 0;\n        r = a * b + rword;\n        ncarry += (r / 0x4000000) | 0;\n        rword = r & 0x3ffffff;\n      }\n      out.words[k] = rword | 0;\n      carry = ncarry | 0;\n    }\n    if (carry !== 0) {\n      out.words[k] = carry | 0;\n    } else {\n      out.length--;\n    }\n\n    return out.strip();\n  }\n\n  // TODO(indutny): it may be reasonable to omit it for users who don't need\n  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit\n  // multiplication (like elliptic secp256k1).\n  var comb10MulTo = function comb10MulTo (self, num, out) {\n    var a = self.words;\n    var b = num.words;\n    var o = out.words;\n    var c = 0;\n    var lo;\n    var mid;\n    var hi;\n    var a0 = a[0] | 0;\n    var al0 = a0 & 0x1fff;\n    var ah0 = a0 >>> 13;\n    var a1 = a[1] | 0;\n    var al1 = a1 & 0x1fff;\n    var ah1 = a1 >>> 13;\n    var a2 = a[2] | 0;\n    var al2 = a2 & 0x1fff;\n    var ah2 = a2 >>> 13;\n    var a3 = a[3] | 0;\n    var al3 = a3 & 0x1fff;\n    var ah3 = a3 >>> 13;\n    var a4 = a[4] | 0;\n    var al4 = a4 & 0x1fff;\n    var ah4 = a4 >>> 13;\n    var a5 = a[5] | 0;\n    var al5 = a5 & 0x1fff;\n    var ah5 = a5 >>> 13;\n    var a6 = a[6] | 0;\n    var al6 = a6 & 0x1fff;\n    var ah6 = a6 >>> 13;\n    var a7 = a[7] | 0;\n    var al7 = a7 & 0x1fff;\n    var ah7 = a7 >>> 13;\n    var a8 = a[8] | 0;\n    var al8 = a8 & 0x1fff;\n    var ah8 = a8 >>> 13;\n    var a9 = a[9] | 0;\n    var al9 = a9 & 0x1fff;\n    var ah9 = a9 >>> 13;\n    var b0 = b[0] | 0;\n    var bl0 = b0 & 0x1fff;\n    var bh0 = b0 >>> 13;\n    var b1 = b[1] | 0;\n    var bl1 = b1 & 0x1fff;\n    var bh1 = b1 >>> 13;\n    var b2 = b[2] | 0;\n    var bl2 = b2 & 0x1fff;\n    var bh2 = b2 >>> 13;\n    var b3 = b[3] | 0;\n    var bl3 = b3 & 0x1fff;\n    var bh3 = b3 >>> 13;\n    var b4 = b[4] | 0;\n    var bl4 = b4 & 0x1fff;\n    var bh4 = b4 >>> 13;\n    var b5 = b[5] | 0;\n    var bl5 = b5 & 0x1fff;\n    var bh5 = b5 >>> 13;\n    var b6 = b[6] | 0;\n    var bl6 = b6 & 0x1fff;\n    var bh6 = b6 >>> 13;\n    var b7 = b[7] | 0;\n    var bl7 = b7 & 0x1fff;\n    var bh7 = b7 >>> 13;\n    var b8 = b[8] | 0;\n    var bl8 = b8 & 0x1fff;\n    var bh8 = b8 >>> 13;\n    var b9 = b[9] | 0;\n    var bl9 = b9 & 0x1fff;\n    var bh9 = b9 >>> 13;\n\n    out.negative = self.negative ^ num.negative;\n    out.length = 19;\n    /* k = 0 */\n    lo = Math.imul(al0, bl0);\n    mid = Math.imul(al0, bh0);\n    mid = (mid + Math.imul(ah0, bl0)) | 0;\n    hi = Math.imul(ah0, bh0);\n    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;\n    w0 &= 0x3ffffff;\n    /* k = 1 */\n    lo = Math.imul(al1, bl0);\n    mid = Math.imul(al1, bh0);\n    mid = (mid + Math.imul(ah1, bl0)) | 0;\n    hi = Math.imul(ah1, bh0);\n    lo = (lo + Math.imul(al0, bl1)) | 0;\n    mid = (mid + Math.imul(al0, bh1)) | 0;\n    mid = (mid + Math.imul(ah0, bl1)) | 0;\n    hi = (hi + Math.imul(ah0, bh1)) | 0;\n    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;\n    w1 &= 0x3ffffff;\n    /* k = 2 */\n    lo = Math.imul(al2, bl0);\n    mid = Math.imul(al2, bh0);\n    mid = (mid + Math.imul(ah2, bl0)) | 0;\n    hi = Math.imul(ah2, bh0);\n    lo = (lo + Math.imul(al1, bl1)) | 0;\n    mid = (mid + Math.imul(al1, bh1)) | 0;\n    mid = (mid + Math.imul(ah1, bl1)) | 0;\n    hi = (hi + Math.imul(ah1, bh1)) | 0;\n    lo = (lo + Math.imul(al0, bl2)) | 0;\n    mid = (mid + Math.imul(al0, bh2)) | 0;\n    mid = (mid + Math.imul(ah0, bl2)) | 0;\n    hi = (hi + Math.imul(ah0, bh2)) | 0;\n    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;\n    w2 &= 0x3ffffff;\n    /* k = 3 */\n    lo = Math.imul(al3, bl0);\n    mid = Math.imul(al3, bh0);\n    mid = (mid + Math.imul(ah3, bl0)) | 0;\n    hi = Math.imul(ah3, bh0);\n    lo = (lo + Math.imul(al2, bl1)) | 0;\n    mid = (mid + Math.imul(al2, bh1)) | 0;\n    mid = (mid + Math.imul(ah2, bl1)) | 0;\n    hi = (hi + Math.imul(ah2, bh1)) | 0;\n    lo = (lo + Math.imul(al1, bl2)) | 0;\n    mid = (mid + Math.imul(al1, bh2)) | 0;\n    mid = (mid + Math.imul(ah1, bl2)) | 0;\n    hi = (hi + Math.imul(ah1, bh2)) | 0;\n    lo = (lo + Math.imul(al0, bl3)) | 0;\n    mid = (mid + Math.imul(al0, bh3)) | 0;\n    mid = (mid + Math.imul(ah0, bl3)) | 0;\n    hi = (hi + Math.imul(ah0, bh3)) | 0;\n    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;\n    w3 &= 0x3ffffff;\n    /* k = 4 */\n    lo = Math.imul(al4, bl0);\n    mid = Math.imul(al4, bh0);\n    mid = (mid + Math.imul(ah4, bl0)) | 0;\n    hi = Math.imul(ah4, bh0);\n    lo = (lo + Math.imul(al3, bl1)) | 0;\n    mid = (mid + Math.imul(al3, bh1)) | 0;\n    mid = (mid + Math.imul(ah3, bl1)) | 0;\n    hi = (hi + Math.imul(ah3, bh1)) | 0;\n    lo = (lo + Math.imul(al2, bl2)) | 0;\n    mid = (mid + Math.imul(al2, bh2)) | 0;\n    mid = (mid + Math.imul(ah2, bl2)) | 0;\n    hi = (hi + Math.imul(ah2, bh2)) | 0;\n    lo = (lo + Math.imul(al1, bl3)) | 0;\n    mid = (mid + Math.imul(al1, bh3)) | 0;\n    mid = (mid + Math.imul(ah1, bl3)) | 0;\n    hi = (hi + Math.imul(ah1, bh3)) | 0;\n    lo = (lo + Math.imul(al0, bl4)) | 0;\n    mid = (mid + Math.imul(al0, bh4)) | 0;\n    mid = (mid + Math.imul(ah0, bl4)) | 0;\n    hi = (hi + Math.imul(ah0, bh4)) | 0;\n    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;\n    w4 &= 0x3ffffff;\n    /* k = 5 */\n    lo = Math.imul(al5, bl0);\n    mid = Math.imul(al5, bh0);\n    mid = (mid + Math.imul(ah5, bl0)) | 0;\n    hi = Math.imul(ah5, bh0);\n    lo = (lo + Math.imul(al4, bl1)) | 0;\n    mid = (mid + Math.imul(al4, bh1)) | 0;\n    mid = (mid + Math.imul(ah4, bl1)) | 0;\n    hi = (hi + Math.imul(ah4, bh1)) | 0;\n    lo = (lo + Math.imul(al3, bl2)) | 0;\n    mid = (mid + Math.imul(al3, bh2)) | 0;\n    mid = (mid + Math.imul(ah3, bl2)) | 0;\n    hi = (hi + Math.imul(ah3, bh2)) | 0;\n    lo = (lo + Math.imul(al2, bl3)) | 0;\n    mid = (mid + Math.imul(al2, bh3)) | 0;\n    mid = (mid + Math.imul(ah2, bl3)) | 0;\n    hi = (hi + Math.imul(ah2, bh3)) | 0;\n    lo = (lo + Math.imul(al1, bl4)) | 0;\n    mid = (mid + Math.imul(al1, bh4)) | 0;\n    mid = (mid + Math.imul(ah1, bl4)) | 0;\n    hi = (hi + Math.imul(ah1, bh4)) | 0;\n    lo = (lo + Math.imul(al0, bl5)) | 0;\n    mid = (mid + Math.imul(al0, bh5)) | 0;\n    mid = (mid + Math.imul(ah0, bl5)) | 0;\n    hi = (hi + Math.imul(ah0, bh5)) | 0;\n    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;\n    w5 &= 0x3ffffff;\n    /* k = 6 */\n    lo = Math.imul(al6, bl0);\n    mid = Math.imul(al6, bh0);\n    mid = (mid + Math.imul(ah6, bl0)) | 0;\n    hi = Math.imul(ah6, bh0);\n    lo = (lo + Math.imul(al5, bl1)) | 0;\n    mid = (mid + Math.imul(al5, bh1)) | 0;\n    mid = (mid + Math.imul(ah5, bl1)) | 0;\n    hi = (hi + Math.imul(ah5, bh1)) | 0;\n    lo = (lo + Math.imul(al4, bl2)) | 0;\n    mid = (mid + Math.imul(al4, bh2)) | 0;\n    mid = (mid + Math.imul(ah4, bl2)) | 0;\n    hi = (hi + Math.imul(ah4, bh2)) | 0;\n    lo = (lo + Math.imul(al3, bl3)) | 0;\n    mid = (mid + Math.imul(al3, bh3)) | 0;\n    mid = (mid + Math.imul(ah3, bl3)) | 0;\n    hi = (hi + Math.imul(ah3, bh3)) | 0;\n    lo = (lo + Math.imul(al2, bl4)) | 0;\n    mid = (mid + Math.imul(al2, bh4)) | 0;\n    mid = (mid + Math.imul(ah2, bl4)) | 0;\n    hi = (hi + Math.imul(ah2, bh4)) | 0;\n    lo = (lo + Math.imul(al1, bl5)) | 0;\n    mid = (mid + Math.imul(al1, bh5)) | 0;\n    mid = (mid + Math.imul(ah1, bl5)) | 0;\n    hi = (hi + Math.imul(ah1, bh5)) | 0;\n    lo = (lo + Math.imul(al0, bl6)) | 0;\n    mid = (mid + Math.imul(al0, bh6)) | 0;\n    mid = (mid + Math.imul(ah0, bl6)) | 0;\n    hi = (hi + Math.imul(ah0, bh6)) | 0;\n    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;\n    w6 &= 0x3ffffff;\n    /* k = 7 */\n    lo = Math.imul(al7, bl0);\n    mid = Math.imul(al7, bh0);\n    mid = (mid + Math.imul(ah7, bl0)) | 0;\n    hi = Math.imul(ah7, bh0);\n    lo = (lo + Math.imul(al6, bl1)) | 0;\n    mid = (mid + Math.imul(al6, bh1)) | 0;\n    mid = (mid + Math.imul(ah6, bl1)) | 0;\n    hi = (hi + Math.imul(ah6, bh1)) | 0;\n    lo = (lo + Math.imul(al5, bl2)) | 0;\n    mid = (mid + Math.imul(al5, bh2)) | 0;\n    mid = (mid + Math.imul(ah5, bl2)) | 0;\n    hi = (hi + Math.imul(ah5, bh2)) | 0;\n    lo = (lo + Math.imul(al4, bl3)) | 0;\n    mid = (mid + Math.imul(al4, bh3)) | 0;\n    mid = (mid + Math.imul(ah4, bl3)) | 0;\n    hi = (hi + Math.imul(ah4, bh3)) | 0;\n    lo = (lo + Math.imul(al3, bl4)) | 0;\n    mid = (mid + Math.imul(al3, bh4)) | 0;\n    mid = (mid + Math.imul(ah3, bl4)) | 0;\n    hi = (hi + Math.imul(ah3, bh4)) | 0;\n    lo = (lo + Math.imul(al2, bl5)) | 0;\n    mid = (mid + Math.imul(al2, bh5)) | 0;\n    mid = (mid + Math.imul(ah2, bl5)) | 0;\n    hi = (hi + Math.imul(ah2, bh5)) | 0;\n    lo = (lo + Math.imul(al1, bl6)) | 0;\n    mid = (mid + Math.imul(al1, bh6)) | 0;\n    mid = (mid + Math.imul(ah1, bl6)) | 0;\n    hi = (hi + Math.imul(ah1, bh6)) | 0;\n    lo = (lo + Math.imul(al0, bl7)) | 0;\n    mid = (mid + Math.imul(al0, bh7)) | 0;\n    mid = (mid + Math.imul(ah0, bl7)) | 0;\n    hi = (hi + Math.imul(ah0, bh7)) | 0;\n    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;\n    w7 &= 0x3ffffff;\n    /* k = 8 */\n    lo = Math.imul(al8, bl0);\n    mid = Math.imul(al8, bh0);\n    mid = (mid + Math.imul(ah8, bl0)) | 0;\n    hi = Math.imul(ah8, bh0);\n    lo = (lo + Math.imul(al7, bl1)) | 0;\n    mid = (mid + Math.imul(al7, bh1)) | 0;\n    mid = (mid + Math.imul(ah7, bl1)) | 0;\n    hi = (hi + Math.imul(ah7, bh1)) | 0;\n    lo = (lo + Math.imul(al6, bl2)) | 0;\n    mid = (mid + Math.imul(al6, bh2)) | 0;\n    mid = (mid + Math.imul(ah6, bl2)) | 0;\n    hi = (hi + Math.imul(ah6, bh2)) | 0;\n    lo = (lo + Math.imul(al5, bl3)) | 0;\n    mid = (mid + Math.imul(al5, bh3)) | 0;\n    mid = (mid + Math.imul(ah5, bl3)) | 0;\n    hi = (hi + Math.imul(ah5, bh3)) | 0;\n    lo = (lo + Math.imul(al4, bl4)) | 0;\n    mid = (mid + Math.imul(al4, bh4)) | 0;\n    mid = (mid + Math.imul(ah4, bl4)) | 0;\n    hi = (hi + Math.imul(ah4, bh4)) | 0;\n    lo = (lo + Math.imul(al3, bl5)) | 0;\n    mid = (mid + Math.imul(al3, bh5)) | 0;\n    mid = (mid + Math.imul(ah3, bl5)) | 0;\n    hi = (hi + Math.imul(ah3, bh5)) | 0;\n    lo = (lo + Math.imul(al2, bl6)) | 0;\n    mid = (mid + Math.imul(al2, bh6)) | 0;\n    mid = (mid + Math.imul(ah2, bl6)) | 0;\n    hi = (hi + Math.imul(ah2, bh6)) | 0;\n    lo = (lo + Math.imul(al1, bl7)) | 0;\n    mid = (mid + Math.imul(al1, bh7)) | 0;\n    mid = (mid + Math.imul(ah1, bl7)) | 0;\n    hi = (hi + Math.imul(ah1, bh7)) | 0;\n    lo = (lo + Math.imul(al0, bl8)) | 0;\n    mid = (mid + Math.imul(al0, bh8)) | 0;\n    mid = (mid + Math.imul(ah0, bl8)) | 0;\n    hi = (hi + Math.imul(ah0, bh8)) | 0;\n    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;\n    w8 &= 0x3ffffff;\n    /* k = 9 */\n    lo = Math.imul(al9, bl0);\n    mid = Math.imul(al9, bh0);\n    mid = (mid + Math.imul(ah9, bl0)) | 0;\n    hi = Math.imul(ah9, bh0);\n    lo = (lo + Math.imul(al8, bl1)) | 0;\n    mid = (mid + Math.imul(al8, bh1)) | 0;\n    mid = (mid + Math.imul(ah8, bl1)) | 0;\n    hi = (hi + Math.imul(ah8, bh1)) | 0;\n    lo = (lo + Math.imul(al7, bl2)) | 0;\n    mid = (mid + Math.imul(al7, bh2)) | 0;\n    mid = (mid + Math.imul(ah7, bl2)) | 0;\n    hi = (hi + Math.imul(ah7, bh2)) | 0;\n    lo = (lo + Math.imul(al6, bl3)) | 0;\n    mid = (mid + Math.imul(al6, bh3)) | 0;\n    mid = (mid + Math.imul(ah6, bl3)) | 0;\n    hi = (hi + Math.imul(ah6, bh3)) | 0;\n    lo = (lo + Math.imul(al5, bl4)) | 0;\n    mid = (mid + Math.imul(al5, bh4)) | 0;\n    mid = (mid + Math.imul(ah5, bl4)) | 0;\n    hi = (hi + Math.imul(ah5, bh4)) | 0;\n    lo = (lo + Math.imul(al4, bl5)) | 0;\n    mid = (mid + Math.imul(al4, bh5)) | 0;\n    mid = (mid + Math.imul(ah4, bl5)) | 0;\n    hi = (hi + Math.imul(ah4, bh5)) | 0;\n    lo = (lo + Math.imul(al3, bl6)) | 0;\n    mid = (mid + Math.imul(al3, bh6)) | 0;\n    mid = (mid + Math.imul(ah3, bl6)) | 0;\n    hi = (hi + Math.imul(ah3, bh6)) | 0;\n    lo = (lo + Math.imul(al2, bl7)) | 0;\n    mid = (mid + Math.imul(al2, bh7)) | 0;\n    mid = (mid + Math.imul(ah2, bl7)) | 0;\n    hi = (hi + Math.imul(ah2, bh7)) | 0;\n    lo = (lo + Math.imul(al1, bl8)) | 0;\n    mid = (mid + Math.imul(al1, bh8)) | 0;\n    mid = (mid + Math.imul(ah1, bl8)) | 0;\n    hi = (hi + Math.imul(ah1, bh8)) | 0;\n    lo = (lo + Math.imul(al0, bl9)) | 0;\n    mid = (mid + Math.imul(al0, bh9)) | 0;\n    mid = (mid + Math.imul(ah0, bl9)) | 0;\n    hi = (hi + Math.imul(ah0, bh9)) | 0;\n    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;\n    w9 &= 0x3ffffff;\n    /* k = 10 */\n    lo = Math.imul(al9, bl1);\n    mid = Math.imul(al9, bh1);\n    mid = (mid + Math.imul(ah9, bl1)) | 0;\n    hi = Math.imul(ah9, bh1);\n    lo = (lo + Math.imul(al8, bl2)) | 0;\n    mid = (mid + Math.imul(al8, bh2)) | 0;\n    mid = (mid + Math.imul(ah8, bl2)) | 0;\n    hi = (hi + Math.imul(ah8, bh2)) | 0;\n    lo = (lo + Math.imul(al7, bl3)) | 0;\n    mid = (mid + Math.imul(al7, bh3)) | 0;\n    mid = (mid + Math.imul(ah7, bl3)) | 0;\n    hi = (hi + Math.imul(ah7, bh3)) | 0;\n    lo = (lo + Math.imul(al6, bl4)) | 0;\n    mid = (mid + Math.imul(al6, bh4)) | 0;\n    mid = (mid + Math.imul(ah6, bl4)) | 0;\n    hi = (hi + Math.imul(ah6, bh4)) | 0;\n    lo = (lo + Math.imul(al5, bl5)) | 0;\n    mid = (mid + Math.imul(al5, bh5)) | 0;\n    mid = (mid + Math.imul(ah5, bl5)) | 0;\n    hi = (hi + Math.imul(ah5, bh5)) | 0;\n    lo = (lo + Math.imul(al4, bl6)) | 0;\n    mid = (mid + Math.imul(al4, bh6)) | 0;\n    mid = (mid + Math.imul(ah4, bl6)) | 0;\n    hi = (hi + Math.imul(ah4, bh6)) | 0;\n    lo = (lo + Math.imul(al3, bl7)) | 0;\n    mid = (mid + Math.imul(al3, bh7)) | 0;\n    mid = (mid + Math.imul(ah3, bl7)) | 0;\n    hi = (hi + Math.imul(ah3, bh7)) | 0;\n    lo = (lo + Math.imul(al2, bl8)) | 0;\n    mid = (mid + Math.imul(al2, bh8)) | 0;\n    mid = (mid + Math.imul(ah2, bl8)) | 0;\n    hi = (hi + Math.imul(ah2, bh8)) | 0;\n    lo = (lo + Math.imul(al1, bl9)) | 0;\n    mid = (mid + Math.imul(al1, bh9)) | 0;\n    mid = (mid + Math.imul(ah1, bl9)) | 0;\n    hi = (hi + Math.imul(ah1, bh9)) | 0;\n    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;\n    w10 &= 0x3ffffff;\n    /* k = 11 */\n    lo = Math.imul(al9, bl2);\n    mid = Math.imul(al9, bh2);\n    mid = (mid + Math.imul(ah9, bl2)) | 0;\n    hi = Math.imul(ah9, bh2);\n    lo = (lo + Math.imul(al8, bl3)) | 0;\n    mid = (mid + Math.imul(al8, bh3)) | 0;\n    mid = (mid + Math.imul(ah8, bl3)) | 0;\n    hi = (hi + Math.imul(ah8, bh3)) | 0;\n    lo = (lo + Math.imul(al7, bl4)) | 0;\n    mid = (mid + Math.imul(al7, bh4)) | 0;\n    mid = (mid + Math.imul(ah7, bl4)) | 0;\n    hi = (hi + Math.imul(ah7, bh4)) | 0;\n    lo = (lo + Math.imul(al6, bl5)) | 0;\n    mid = (mid + Math.imul(al6, bh5)) | 0;\n    mid = (mid + Math.imul(ah6, bl5)) | 0;\n    hi = (hi + Math.imul(ah6, bh5)) | 0;\n    lo = (lo + Math.imul(al5, bl6)) | 0;\n    mid = (mid + Math.imul(al5, bh6)) | 0;\n    mid = (mid + Math.imul(ah5, bl6)) | 0;\n    hi = (hi + Math.imul(ah5, bh6)) | 0;\n    lo = (lo + Math.imul(al4, bl7)) | 0;\n    mid = (mid + Math.imul(al4, bh7)) | 0;\n    mid = (mid + Math.imul(ah4, bl7)) | 0;\n    hi = (hi + Math.imul(ah4, bh7)) | 0;\n    lo = (lo + Math.imul(al3, bl8)) | 0;\n    mid = (mid + Math.imul(al3, bh8)) | 0;\n    mid = (mid + Math.imul(ah3, bl8)) | 0;\n    hi = (hi + Math.imul(ah3, bh8)) | 0;\n    lo = (lo + Math.imul(al2, bl9)) | 0;\n    mid = (mid + Math.imul(al2, bh9)) | 0;\n    mid = (mid + Math.imul(ah2, bl9)) | 0;\n    hi = (hi + Math.imul(ah2, bh9)) | 0;\n    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;\n    w11 &= 0x3ffffff;\n    /* k = 12 */\n    lo = Math.imul(al9, bl3);\n    mid = Math.imul(al9, bh3);\n    mid = (mid + Math.imul(ah9, bl3)) | 0;\n    hi = Math.imul(ah9, bh3);\n    lo = (lo + Math.imul(al8, bl4)) | 0;\n    mid = (mid + Math.imul(al8, bh4)) | 0;\n    mid = (mid + Math.imul(ah8, bl4)) | 0;\n    hi = (hi + Math.imul(ah8, bh4)) | 0;\n    lo = (lo + Math.imul(al7, bl5)) | 0;\n    mid = (mid + Math.imul(al7, bh5)) | 0;\n    mid = (mid + Math.imul(ah7, bl5)) | 0;\n    hi = (hi + Math.imul(ah7, bh5)) | 0;\n    lo = (lo + Math.imul(al6, bl6)) | 0;\n    mid = (mid + Math.imul(al6, bh6)) | 0;\n    mid = (mid + Math.imul(ah6, bl6)) | 0;\n    hi = (hi + Math.imul(ah6, bh6)) | 0;\n    lo = (lo + Math.imul(al5, bl7)) | 0;\n    mid = (mid + Math.imul(al5, bh7)) | 0;\n    mid = (mid + Math.imul(ah5, bl7)) | 0;\n    hi = (hi + Math.imul(ah5, bh7)) | 0;\n    lo = (lo + Math.imul(al4, bl8)) | 0;\n    mid = (mid + Math.imul(al4, bh8)) | 0;\n    mid = (mid + Math.imul(ah4, bl8)) | 0;\n    hi = (hi + Math.imul(ah4, bh8)) | 0;\n    lo = (lo + Math.imul(al3, bl9)) | 0;\n    mid = (mid + Math.imul(al3, bh9)) | 0;\n    mid = (mid + Math.imul(ah3, bl9)) | 0;\n    hi = (hi + Math.imul(ah3, bh9)) | 0;\n    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;\n    w12 &= 0x3ffffff;\n    /* k = 13 */\n    lo = Math.imul(al9, bl4);\n    mid = Math.imul(al9, bh4);\n    mid = (mid + Math.imul(ah9, bl4)) | 0;\n    hi = Math.imul(ah9, bh4);\n    lo = (lo + Math.imul(al8, bl5)) | 0;\n    mid = (mid + Math.imul(al8, bh5)) | 0;\n    mid = (mid + Math.imul(ah8, bl5)) | 0;\n    hi = (hi + Math.imul(ah8, bh5)) | 0;\n    lo = (lo + Math.imul(al7, bl6)) | 0;\n    mid = (mid + Math.imul(al7, bh6)) | 0;\n    mid = (mid + Math.imul(ah7, bl6)) | 0;\n    hi = (hi + Math.imul(ah7, bh6)) | 0;\n    lo = (lo + Math.imul(al6, bl7)) | 0;\n    mid = (mid + Math.imul(al6, bh7)) | 0;\n    mid = (mid + Math.imul(ah6, bl7)) | 0;\n    hi = (hi + Math.imul(ah6, bh7)) | 0;\n    lo = (lo + Math.imul(al5, bl8)) | 0;\n    mid = (mid + Math.imul(al5, bh8)) | 0;\n    mid = (mid + Math.imul(ah5, bl8)) | 0;\n    hi = (hi + Math.imul(ah5, bh8)) | 0;\n    lo = (lo + Math.imul(al4, bl9)) | 0;\n    mid = (mid + Math.imul(al4, bh9)) | 0;\n    mid = (mid + Math.imul(ah4, bl9)) | 0;\n    hi = (hi + Math.imul(ah4, bh9)) | 0;\n    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;\n    w13 &= 0x3ffffff;\n    /* k = 14 */\n    lo = Math.imul(al9, bl5);\n    mid = Math.imul(al9, bh5);\n    mid = (mid + Math.imul(ah9, bl5)) | 0;\n    hi = Math.imul(ah9, bh5);\n    lo = (lo + Math.imul(al8, bl6)) | 0;\n    mid = (mid + Math.imul(al8, bh6)) | 0;\n    mid = (mid + Math.imul(ah8, bl6)) | 0;\n    hi = (hi + Math.imul(ah8, bh6)) | 0;\n    lo = (lo + Math.imul(al7, bl7)) | 0;\n    mid = (mid + Math.imul(al7, bh7)) | 0;\n    mid = (mid + Math.imul(ah7, bl7)) | 0;\n    hi = (hi + Math.imul(ah7, bh7)) | 0;\n    lo = (lo + Math.imul(al6, bl8)) | 0;\n    mid = (mid + Math.imul(al6, bh8)) | 0;\n    mid = (mid + Math.imul(ah6, bl8)) | 0;\n    hi = (hi + Math.imul(ah6, bh8)) | 0;\n    lo = (lo + Math.imul(al5, bl9)) | 0;\n    mid = (mid + Math.imul(al5, bh9)) | 0;\n    mid = (mid + Math.imul(ah5, bl9)) | 0;\n    hi = (hi + Math.imul(ah5, bh9)) | 0;\n    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;\n    w14 &= 0x3ffffff;\n    /* k = 15 */\n    lo = Math.imul(al9, bl6);\n    mid = Math.imul(al9, bh6);\n    mid = (mid + Math.imul(ah9, bl6)) | 0;\n    hi = Math.imul(ah9, bh6);\n    lo = (lo + Math.imul(al8, bl7)) | 0;\n    mid = (mid + Math.imul(al8, bh7)) | 0;\n    mid = (mid + Math.imul(ah8, bl7)) | 0;\n    hi = (hi + Math.imul(ah8, bh7)) | 0;\n    lo = (lo + Math.imul(al7, bl8)) | 0;\n    mid = (mid + Math.imul(al7, bh8)) | 0;\n    mid = (mid + Math.imul(ah7, bl8)) | 0;\n    hi = (hi + Math.imul(ah7, bh8)) | 0;\n    lo = (lo + Math.imul(al6, bl9)) | 0;\n    mid = (mid + Math.imul(al6, bh9)) | 0;\n    mid = (mid + Math.imul(ah6, bl9)) | 0;\n    hi = (hi + Math.imul(ah6, bh9)) | 0;\n    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;\n    w15 &= 0x3ffffff;\n    /* k = 16 */\n    lo = Math.imul(al9, bl7);\n    mid = Math.imul(al9, bh7);\n    mid = (mid + Math.imul(ah9, bl7)) | 0;\n    hi = Math.imul(ah9, bh7);\n    lo = (lo + Math.imul(al8, bl8)) | 0;\n    mid = (mid + Math.imul(al8, bh8)) | 0;\n    mid = (mid + Math.imul(ah8, bl8)) | 0;\n    hi = (hi + Math.imul(ah8, bh8)) | 0;\n    lo = (lo + Math.imul(al7, bl9)) | 0;\n    mid = (mid + Math.imul(al7, bh9)) | 0;\n    mid = (mid + Math.imul(ah7, bl9)) | 0;\n    hi = (hi + Math.imul(ah7, bh9)) | 0;\n    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;\n    w16 &= 0x3ffffff;\n    /* k = 17 */\n    lo = Math.imul(al9, bl8);\n    mid = Math.imul(al9, bh8);\n    mid = (mid + Math.imul(ah9, bl8)) | 0;\n    hi = Math.imul(ah9, bh8);\n    lo = (lo + Math.imul(al8, bl9)) | 0;\n    mid = (mid + Math.imul(al8, bh9)) | 0;\n    mid = (mid + Math.imul(ah8, bl9)) | 0;\n    hi = (hi + Math.imul(ah8, bh9)) | 0;\n    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;\n    w17 &= 0x3ffffff;\n    /* k = 18 */\n    lo = Math.imul(al9, bl9);\n    mid = Math.imul(al9, bh9);\n    mid = (mid + Math.imul(ah9, bl9)) | 0;\n    hi = Math.imul(ah9, bh9);\n    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;\n    w18 &= 0x3ffffff;\n    o[0] = w0;\n    o[1] = w1;\n    o[2] = w2;\n    o[3] = w3;\n    o[4] = w4;\n    o[5] = w5;\n    o[6] = w6;\n    o[7] = w7;\n    o[8] = w8;\n    o[9] = w9;\n    o[10] = w10;\n    o[11] = w11;\n    o[12] = w12;\n    o[13] = w13;\n    o[14] = w14;\n    o[15] = w15;\n    o[16] = w16;\n    o[17] = w17;\n    o[18] = w18;\n    if (c !== 0) {\n      o[19] = c;\n      out.length++;\n    }\n    return out;\n  };\n\n  // Polyfill comb\n  if (!Math.imul) {\n    comb10MulTo = smallMulTo;\n  }\n\n  function bigMulTo (self, num, out) {\n    out.negative = num.negative ^ self.negative;\n    out.length = self.length + num.length;\n\n    var carry = 0;\n    var hncarry = 0;\n    for (var k = 0; k < out.length - 1; k++) {\n      // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n      // note that ncarry could be >= 0x3ffffff\n      var ncarry = hncarry;\n      hncarry = 0;\n      var rword = carry & 0x3ffffff;\n      var maxJ = Math.min(k, num.length - 1);\n      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n        var i = k - j;\n        var a = self.words[i] | 0;\n        var b = num.words[j] | 0;\n        var r = a * b;\n\n        var lo = r & 0x3ffffff;\n        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;\n        lo = (lo + rword) | 0;\n        rword = lo & 0x3ffffff;\n        ncarry = (ncarry + (lo >>> 26)) | 0;\n\n        hncarry += ncarry >>> 26;\n        ncarry &= 0x3ffffff;\n      }\n      out.words[k] = rword;\n      carry = ncarry;\n      ncarry = hncarry;\n    }\n    if (carry !== 0) {\n      out.words[k] = carry;\n    } else {\n      out.length--;\n    }\n\n    return out.strip();\n  }\n\n  function jumboMulTo (self, num, out) {\n    var fftm = new FFTM();\n    return fftm.mulp(self, num, out);\n  }\n\n  BN.prototype.mulTo = function mulTo (num, out) {\n    var res;\n    var len = this.length + num.length;\n    if (this.length === 10 && num.length === 10) {\n      res = comb10MulTo(this, num, out);\n    } else if (len < 63) {\n      res = smallMulTo(this, num, out);\n    } else if (len < 1024) {\n      res = bigMulTo(this, num, out);\n    } else {\n      res = jumboMulTo(this, num, out);\n    }\n\n    return res;\n  };\n\n  // Cooley-Tukey algorithm for FFT\n  // slightly revisited to rely on looping instead of recursion\n\n  function FFTM (x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  FFTM.prototype.makeRBT = function makeRBT (N) {\n    var t = new Array(N);\n    var l = BN.prototype._countBits(N) - 1;\n    for (var i = 0; i < N; i++) {\n      t[i] = this.revBin(i, l, N);\n    }\n\n    return t;\n  };\n\n  // Returns binary-reversed representation of `x`\n  FFTM.prototype.revBin = function revBin (x, l, N) {\n    if (x === 0 || x === N - 1) return x;\n\n    var rb = 0;\n    for (var i = 0; i < l; i++) {\n      rb |= (x & 1) << (l - i - 1);\n      x >>= 1;\n    }\n\n    return rb;\n  };\n\n  // Performs \"tweedling\" phase, therefore 'emulating'\n  // behaviour of the recursive algorithm\n  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {\n    for (var i = 0; i < N; i++) {\n      rtws[i] = rws[rbt[i]];\n      itws[i] = iws[rbt[i]];\n    }\n  };\n\n  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {\n    this.permute(rbt, rws, iws, rtws, itws, N);\n\n    for (var s = 1; s < N; s <<= 1) {\n      var l = s << 1;\n\n      var rtwdf = Math.cos(2 * Math.PI / l);\n      var itwdf = Math.sin(2 * Math.PI / l);\n\n      for (var p = 0; p < N; p += l) {\n        var rtwdf_ = rtwdf;\n        var itwdf_ = itwdf;\n\n        for (var j = 0; j < s; j++) {\n          var re = rtws[p + j];\n          var ie = itws[p + j];\n\n          var ro = rtws[p + j + s];\n          var io = itws[p + j + s];\n\n          var rx = rtwdf_ * ro - itwdf_ * io;\n\n          io = rtwdf_ * io + itwdf_ * ro;\n          ro = rx;\n\n          rtws[p + j] = re + ro;\n          itws[p + j] = ie + io;\n\n          rtws[p + j + s] = re - ro;\n          itws[p + j + s] = ie - io;\n\n          /* jshint maxdepth : false */\n          if (j !== l) {\n            rx = rtwdf * rtwdf_ - itwdf * itwdf_;\n\n            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;\n            rtwdf_ = rx;\n          }\n        }\n      }\n    }\n  };\n\n  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {\n    var N = Math.max(m, n) | 1;\n    var odd = N & 1;\n    var i = 0;\n    for (N = N / 2 | 0; N; N = N >>> 1) {\n      i++;\n    }\n\n    return 1 << i + 1 + odd;\n  };\n\n  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {\n    if (N <= 1) return;\n\n    for (var i = 0; i < N / 2; i++) {\n      var t = rws[i];\n\n      rws[i] = rws[N - i - 1];\n      rws[N - i - 1] = t;\n\n      t = iws[i];\n\n      iws[i] = -iws[N - i - 1];\n      iws[N - i - 1] = -t;\n    }\n  };\n\n  FFTM.prototype.normalize13b = function normalize13b (ws, N) {\n    var carry = 0;\n    for (var i = 0; i < N / 2; i++) {\n      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +\n        Math.round(ws[2 * i] / N) +\n        carry;\n\n      ws[i] = w & 0x3ffffff;\n\n      if (w < 0x4000000) {\n        carry = 0;\n      } else {\n        carry = w / 0x4000000 | 0;\n      }\n    }\n\n    return ws;\n  };\n\n  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {\n    var carry = 0;\n    for (var i = 0; i < len; i++) {\n      carry = carry + (ws[i] | 0);\n\n      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;\n      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;\n    }\n\n    // Pad with zeroes\n    for (i = 2 * len; i < N; ++i) {\n      rws[i] = 0;\n    }\n\n    assert(carry === 0);\n    assert((carry & ~0x1fff) === 0);\n  };\n\n  FFTM.prototype.stub = function stub (N) {\n    var ph = new Array(N);\n    for (var i = 0; i < N; i++) {\n      ph[i] = 0;\n    }\n\n    return ph;\n  };\n\n  FFTM.prototype.mulp = function mulp (x, y, out) {\n    var N = 2 * this.guessLen13b(x.length, y.length);\n\n    var rbt = this.makeRBT(N);\n\n    var _ = this.stub(N);\n\n    var rws = new Array(N);\n    var rwst = new Array(N);\n    var iwst = new Array(N);\n\n    var nrws = new Array(N);\n    var nrwst = new Array(N);\n    var niwst = new Array(N);\n\n    var rmws = out.words;\n    rmws.length = N;\n\n    this.convert13b(x.words, x.length, rws, N);\n    this.convert13b(y.words, y.length, nrws, N);\n\n    this.transform(rws, _, rwst, iwst, N, rbt);\n    this.transform(nrws, _, nrwst, niwst, N, rbt);\n\n    for (var i = 0; i < N; i++) {\n      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];\n      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];\n      rwst[i] = rx;\n    }\n\n    this.conjugate(rwst, iwst, N);\n    this.transform(rwst, iwst, rmws, _, N, rbt);\n    this.conjugate(rmws, _, N);\n    this.normalize13b(rmws, N);\n\n    out.negative = x.negative ^ y.negative;\n    out.length = x.length + y.length;\n    return out.strip();\n  };\n\n  // Multiply `this` by `num`\n  BN.prototype.mul = function mul (num) {\n    var out = new BN(null);\n    out.words = new Array(this.length + num.length);\n    return this.mulTo(num, out);\n  };\n\n  // Multiply employing FFT\n  BN.prototype.mulf = function mulf (num) {\n    var out = new BN(null);\n    out.words = new Array(this.length + num.length);\n    return jumboMulTo(this, num, out);\n  };\n\n  // In-place Multiplication\n  BN.prototype.imul = function imul (num) {\n    return this.clone().mulTo(num, this);\n  };\n\n  BN.prototype.imuln = function imuln (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n\n    // Carry\n    var carry = 0;\n    for (var i = 0; i < this.length; i++) {\n      var w = (this.words[i] | 0) * num;\n      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);\n      carry >>= 26;\n      carry += (w / 0x4000000) | 0;\n      // NOTE: lo is 27bit maximum\n      carry += lo >>> 26;\n      this.words[i] = lo & 0x3ffffff;\n    }\n\n    if (carry !== 0) {\n      this.words[i] = carry;\n      this.length++;\n    }\n\n    return this;\n  };\n\n  BN.prototype.muln = function muln (num) {\n    return this.clone().imuln(num);\n  };\n\n  // `this` * `this`\n  BN.prototype.sqr = function sqr () {\n    return this.mul(this);\n  };\n\n  // `this` * `this` in-place\n  BN.prototype.isqr = function isqr () {\n    return this.imul(this.clone());\n  };\n\n  // Math.pow(`this`, `num`)\n  BN.prototype.pow = function pow (num) {\n    var w = toBitArray(num);\n    if (w.length === 0) return new BN(1);\n\n    // Skip leading zeroes\n    var res = this;\n    for (var i = 0; i < w.length; i++, res = res.sqr()) {\n      if (w[i] !== 0) break;\n    }\n\n    if (++i < w.length) {\n      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {\n        if (w[i] === 0) continue;\n\n        res = res.mul(q);\n      }\n    }\n\n    return res;\n  };\n\n  // Shift-left in-place\n  BN.prototype.iushln = function iushln (bits) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var r = bits % 26;\n    var s = (bits - r) / 26;\n    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);\n    var i;\n\n    if (r !== 0) {\n      var carry = 0;\n\n      for (i = 0; i < this.length; i++) {\n        var newCarry = this.words[i] & carryMask;\n        var c = ((this.words[i] | 0) - newCarry) << r;\n        this.words[i] = c | carry;\n        carry = newCarry >>> (26 - r);\n      }\n\n      if (carry) {\n        this.words[i] = carry;\n        this.length++;\n      }\n    }\n\n    if (s !== 0) {\n      for (i = this.length - 1; i >= 0; i--) {\n        this.words[i + s] = this.words[i];\n      }\n\n      for (i = 0; i < s; i++) {\n        this.words[i] = 0;\n      }\n\n      this.length += s;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ishln = function ishln (bits) {\n    // TODO(indutny): implement me\n    assert(this.negative === 0);\n    return this.iushln(bits);\n  };\n\n  // Shift-right in-place\n  // NOTE: `hint` is a lowest bit before trailing zeroes\n  // NOTE: if `extended` is present - it will be filled with destroyed bits\n  BN.prototype.iushrn = function iushrn (bits, hint, extended) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var h;\n    if (hint) {\n      h = (hint - (hint % 26)) / 26;\n    } else {\n      h = 0;\n    }\n\n    var r = bits % 26;\n    var s = Math.min((bits - r) / 26, this.length);\n    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);\n    var maskedWords = extended;\n\n    h -= s;\n    h = Math.max(0, h);\n\n    // Extended mode, copy masked part\n    if (maskedWords) {\n      for (var i = 0; i < s; i++) {\n        maskedWords.words[i] = this.words[i];\n      }\n      maskedWords.length = s;\n    }\n\n    if (s === 0) {\n      // No-op, we should not move anything at all\n    } else if (this.length > s) {\n      this.length -= s;\n      for (i = 0; i < this.length; i++) {\n        this.words[i] = this.words[i + s];\n      }\n    } else {\n      this.words[0] = 0;\n      this.length = 1;\n    }\n\n    var carry = 0;\n    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {\n      var word = this.words[i] | 0;\n      this.words[i] = (carry << (26 - r)) | (word >>> r);\n      carry = word & mask;\n    }\n\n    // Push carried bits as a mask\n    if (maskedWords && carry !== 0) {\n      maskedWords.words[maskedWords.length++] = carry;\n    }\n\n    if (this.length === 0) {\n      this.words[0] = 0;\n      this.length = 1;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ishrn = function ishrn (bits, hint, extended) {\n    // TODO(indutny): implement me\n    assert(this.negative === 0);\n    return this.iushrn(bits, hint, extended);\n  };\n\n  // Shift-left\n  BN.prototype.shln = function shln (bits) {\n    return this.clone().ishln(bits);\n  };\n\n  BN.prototype.ushln = function ushln (bits) {\n    return this.clone().iushln(bits);\n  };\n\n  // Shift-right\n  BN.prototype.shrn = function shrn (bits) {\n    return this.clone().ishrn(bits);\n  };\n\n  BN.prototype.ushrn = function ushrn (bits) {\n    return this.clone().iushrn(bits);\n  };\n\n  // Test if n bit is set\n  BN.prototype.testn = function testn (bit) {\n    assert(typeof bit === 'number' && bit >= 0);\n    var r = bit % 26;\n    var s = (bit - r) / 26;\n    var q = 1 << r;\n\n    // Fast case: bit is much higher than all existing words\n    if (this.length <= s) return false;\n\n    // Check bit and return\n    var w = this.words[s];\n\n    return !!(w & q);\n  };\n\n  // Return only lowers bits of number (in-place)\n  BN.prototype.imaskn = function imaskn (bits) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var r = bits % 26;\n    var s = (bits - r) / 26;\n\n    assert(this.negative === 0, 'imaskn works only with positive numbers');\n\n    if (this.length <= s) {\n      return this;\n    }\n\n    if (r !== 0) {\n      s++;\n    }\n    this.length = Math.min(s, this.length);\n\n    if (r !== 0) {\n      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);\n      this.words[this.length - 1] &= mask;\n    }\n\n    return this.strip();\n  };\n\n  // Return only lowers bits of number\n  BN.prototype.maskn = function maskn (bits) {\n    return this.clone().imaskn(bits);\n  };\n\n  // Add plain number `num` to `this`\n  BN.prototype.iaddn = function iaddn (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n    if (num < 0) return this.isubn(-num);\n\n    // Possible sign change\n    if (this.negative !== 0) {\n      if (this.length === 1 && (this.words[0] | 0) < num) {\n        this.words[0] = num - (this.words[0] | 0);\n        this.negative = 0;\n        return this;\n      }\n\n      this.negative = 0;\n      this.isubn(num);\n      this.negative = 1;\n      return this;\n    }\n\n    // Add without checks\n    return this._iaddn(num);\n  };\n\n  BN.prototype._iaddn = function _iaddn (num) {\n    this.words[0] += num;\n\n    // Carry\n    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {\n      this.words[i] -= 0x4000000;\n      if (i === this.length - 1) {\n        this.words[i + 1] = 1;\n      } else {\n        this.words[i + 1]++;\n      }\n    }\n    this.length = Math.max(this.length, i + 1);\n\n    return this;\n  };\n\n  // Subtract plain number `num` from `this`\n  BN.prototype.isubn = function isubn (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n    if (num < 0) return this.iaddn(-num);\n\n    if (this.negative !== 0) {\n      this.negative = 0;\n      this.iaddn(num);\n      this.negative = 1;\n      return this;\n    }\n\n    this.words[0] -= num;\n\n    if (this.length === 1 && this.words[0] < 0) {\n      this.words[0] = -this.words[0];\n      this.negative = 1;\n    } else {\n      // Carry\n      for (var i = 0; i < this.length && this.words[i] < 0; i++) {\n        this.words[i] += 0x4000000;\n        this.words[i + 1] -= 1;\n      }\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.addn = function addn (num) {\n    return this.clone().iaddn(num);\n  };\n\n  BN.prototype.subn = function subn (num) {\n    return this.clone().isubn(num);\n  };\n\n  BN.prototype.iabs = function iabs () {\n    this.negative = 0;\n\n    return this;\n  };\n\n  BN.prototype.abs = function abs () {\n    return this.clone().iabs();\n  };\n\n  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {\n    var len = num.length + shift;\n    var i;\n\n    this._expand(len);\n\n    var w;\n    var carry = 0;\n    for (i = 0; i < num.length; i++) {\n      w = (this.words[i + shift] | 0) + carry;\n      var right = (num.words[i] | 0) * mul;\n      w -= right & 0x3ffffff;\n      carry = (w >> 26) - ((right / 0x4000000) | 0);\n      this.words[i + shift] = w & 0x3ffffff;\n    }\n    for (; i < this.length - shift; i++) {\n      w = (this.words[i + shift] | 0) + carry;\n      carry = w >> 26;\n      this.words[i + shift] = w & 0x3ffffff;\n    }\n\n    if (carry === 0) return this.strip();\n\n    // Subtraction overflow\n    assert(carry === -1);\n    carry = 0;\n    for (i = 0; i < this.length; i++) {\n      w = -(this.words[i] | 0) + carry;\n      carry = w >> 26;\n      this.words[i] = w & 0x3ffffff;\n    }\n    this.negative = 1;\n\n    return this.strip();\n  };\n\n  BN.prototype._wordDiv = function _wordDiv (num, mode) {\n    var shift = this.length - num.length;\n\n    var a = this.clone();\n    var b = num;\n\n    // Normalize\n    var bhi = b.words[b.length - 1] | 0;\n    var bhiBits = this._countBits(bhi);\n    shift = 26 - bhiBits;\n    if (shift !== 0) {\n      b = b.ushln(shift);\n      a.iushln(shift);\n      bhi = b.words[b.length - 1] | 0;\n    }\n\n    // Initialize quotient\n    var m = a.length - b.length;\n    var q;\n\n    if (mode !== 'mod') {\n      q = new BN(null);\n      q.length = m + 1;\n      q.words = new Array(q.length);\n      for (var i = 0; i < q.length; i++) {\n        q.words[i] = 0;\n      }\n    }\n\n    var diff = a.clone()._ishlnsubmul(b, 1, m);\n    if (diff.negative === 0) {\n      a = diff;\n      if (q) {\n        q.words[m] = 1;\n      }\n    }\n\n    for (var j = m - 1; j >= 0; j--) {\n      var qj = (a.words[b.length + j] | 0) * 0x4000000 +\n        (a.words[b.length + j - 1] | 0);\n\n      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max\n      // (0x7ffffff)\n      qj = Math.min((qj / bhi) | 0, 0x3ffffff);\n\n      a._ishlnsubmul(b, qj, j);\n      while (a.negative !== 0) {\n        qj--;\n        a.negative = 0;\n        a._ishlnsubmul(b, 1, j);\n        if (!a.isZero()) {\n          a.negative ^= 1;\n        }\n      }\n      if (q) {\n        q.words[j] = qj;\n      }\n    }\n    if (q) {\n      q.strip();\n    }\n    a.strip();\n\n    // Denormalize\n    if (mode !== 'div' && shift !== 0) {\n      a.iushrn(shift);\n    }\n\n    return {\n      div: q || null,\n      mod: a\n    };\n  };\n\n  // NOTE: 1) `mode` can be set to `mod` to request mod only,\n  //       to `div` to request div only, or be absent to\n  //       request both div & mod\n  //       2) `positive` is true if unsigned mod is requested\n  BN.prototype.divmod = function divmod (num, mode, positive) {\n    assert(!num.isZero());\n\n    if (this.isZero()) {\n      return {\n        div: new BN(0),\n        mod: new BN(0)\n      };\n    }\n\n    var div, mod, res;\n    if (this.negative !== 0 && num.negative === 0) {\n      res = this.neg().divmod(num, mode);\n\n      if (mode !== 'mod') {\n        div = res.div.neg();\n      }\n\n      if (mode !== 'div') {\n        mod = res.mod.neg();\n        if (positive && mod.negative !== 0) {\n          mod.iadd(num);\n        }\n      }\n\n      return {\n        div: div,\n        mod: mod\n      };\n    }\n\n    if (this.negative === 0 && num.negative !== 0) {\n      res = this.divmod(num.neg(), mode);\n\n      if (mode !== 'mod') {\n        div = res.div.neg();\n      }\n\n      return {\n        div: div,\n        mod: res.mod\n      };\n    }\n\n    if ((this.negative & num.negative) !== 0) {\n      res = this.neg().divmod(num.neg(), mode);\n\n      if (mode !== 'div') {\n        mod = res.mod.neg();\n        if (positive && mod.negative !== 0) {\n          mod.isub(num);\n        }\n      }\n\n      return {\n        div: res.div,\n        mod: mod\n      };\n    }\n\n    // Both numbers are positive at this point\n\n    // Strip both numbers to approximate shift value\n    if (num.length > this.length || this.cmp(num) < 0) {\n      return {\n        div: new BN(0),\n        mod: this\n      };\n    }\n\n    // Very short reduction\n    if (num.length === 1) {\n      if (mode === 'div') {\n        return {\n          div: this.divn(num.words[0]),\n          mod: null\n        };\n      }\n\n      if (mode === 'mod') {\n        return {\n          div: null,\n          mod: new BN(this.modn(num.words[0]))\n        };\n      }\n\n      return {\n        div: this.divn(num.words[0]),\n        mod: new BN(this.modn(num.words[0]))\n      };\n    }\n\n    return this._wordDiv(num, mode);\n  };\n\n  // Find `this` / `num`\n  BN.prototype.div = function div (num) {\n    return this.divmod(num, 'div', false).div;\n  };\n\n  // Find `this` % `num`\n  BN.prototype.mod = function mod (num) {\n    return this.divmod(num, 'mod', false).mod;\n  };\n\n  BN.prototype.umod = function umod (num) {\n    return this.divmod(num, 'mod', true).mod;\n  };\n\n  // Find Round(`this` / `num`)\n  BN.prototype.divRound = function divRound (num) {\n    var dm = this.divmod(num);\n\n    // Fast case - exact division\n    if (dm.mod.isZero()) return dm.div;\n\n    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;\n\n    var half = num.ushrn(1);\n    var r2 = num.andln(1);\n    var cmp = mod.cmp(half);\n\n    // Round down\n    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;\n\n    // Round up\n    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);\n  };\n\n  BN.prototype.modn = function modn (num) {\n    assert(num <= 0x3ffffff);\n    var p = (1 << 26) % num;\n\n    var acc = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      acc = (p * acc + (this.words[i] | 0)) % num;\n    }\n\n    return acc;\n  };\n\n  // In-place division by number\n  BN.prototype.idivn = function idivn (num) {\n    assert(num <= 0x3ffffff);\n\n    var carry = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      var w = (this.words[i] | 0) + carry * 0x4000000;\n      this.words[i] = (w / num) | 0;\n      carry = w % num;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.divn = function divn (num) {\n    return this.clone().idivn(num);\n  };\n\n  BN.prototype.egcd = function egcd (p) {\n    assert(p.negative === 0);\n    assert(!p.isZero());\n\n    var x = this;\n    var y = p.clone();\n\n    if (x.negative !== 0) {\n      x = x.umod(p);\n    } else {\n      x = x.clone();\n    }\n\n    // A * x + B * y = x\n    var A = new BN(1);\n    var B = new BN(0);\n\n    // C * x + D * y = y\n    var C = new BN(0);\n    var D = new BN(1);\n\n    var g = 0;\n\n    while (x.isEven() && y.isEven()) {\n      x.iushrn(1);\n      y.iushrn(1);\n      ++g;\n    }\n\n    var yp = y.clone();\n    var xp = x.clone();\n\n    while (!x.isZero()) {\n      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n      if (i > 0) {\n        x.iushrn(i);\n        while (i-- > 0) {\n          if (A.isOdd() || B.isOdd()) {\n            A.iadd(yp);\n            B.isub(xp);\n          }\n\n          A.iushrn(1);\n          B.iushrn(1);\n        }\n      }\n\n      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n      if (j > 0) {\n        y.iushrn(j);\n        while (j-- > 0) {\n          if (C.isOdd() || D.isOdd()) {\n            C.iadd(yp);\n            D.isub(xp);\n          }\n\n          C.iushrn(1);\n          D.iushrn(1);\n        }\n      }\n\n      if (x.cmp(y) >= 0) {\n        x.isub(y);\n        A.isub(C);\n        B.isub(D);\n      } else {\n        y.isub(x);\n        C.isub(A);\n        D.isub(B);\n      }\n    }\n\n    return {\n      a: C,\n      b: D,\n      gcd: y.iushln(g)\n    };\n  };\n\n  // This is reduced incarnation of the binary EEA\n  // above, designated to invert members of the\n  // _prime_ fields F(p) at a maximal speed\n  BN.prototype._invmp = function _invmp (p) {\n    assert(p.negative === 0);\n    assert(!p.isZero());\n\n    var a = this;\n    var b = p.clone();\n\n    if (a.negative !== 0) {\n      a = a.umod(p);\n    } else {\n      a = a.clone();\n    }\n\n    var x1 = new BN(1);\n    var x2 = new BN(0);\n\n    var delta = b.clone();\n\n    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {\n      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n      if (i > 0) {\n        a.iushrn(i);\n        while (i-- > 0) {\n          if (x1.isOdd()) {\n            x1.iadd(delta);\n          }\n\n          x1.iushrn(1);\n        }\n      }\n\n      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n      if (j > 0) {\n        b.iushrn(j);\n        while (j-- > 0) {\n          if (x2.isOdd()) {\n            x2.iadd(delta);\n          }\n\n          x2.iushrn(1);\n        }\n      }\n\n      if (a.cmp(b) >= 0) {\n        a.isub(b);\n        x1.isub(x2);\n      } else {\n        b.isub(a);\n        x2.isub(x1);\n      }\n    }\n\n    var res;\n    if (a.cmpn(1) === 0) {\n      res = x1;\n    } else {\n      res = x2;\n    }\n\n    if (res.cmpn(0) < 0) {\n      res.iadd(p);\n    }\n\n    return res;\n  };\n\n  BN.prototype.gcd = function gcd (num) {\n    if (this.isZero()) return num.abs();\n    if (num.isZero()) return this.abs();\n\n    var a = this.clone();\n    var b = num.clone();\n    a.negative = 0;\n    b.negative = 0;\n\n    // Remove common factor of two\n    for (var shift = 0; a.isEven() && b.isEven(); shift++) {\n      a.iushrn(1);\n      b.iushrn(1);\n    }\n\n    do {\n      while (a.isEven()) {\n        a.iushrn(1);\n      }\n      while (b.isEven()) {\n        b.iushrn(1);\n      }\n\n      var r = a.cmp(b);\n      if (r < 0) {\n        // Swap `a` and `b` to make `a` always bigger than `b`\n        var t = a;\n        a = b;\n        b = t;\n      } else if (r === 0 || b.cmpn(1) === 0) {\n        break;\n      }\n\n      a.isub(b);\n    } while (true);\n\n    return b.iushln(shift);\n  };\n\n  // Invert number in the field F(num)\n  BN.prototype.invm = function invm (num) {\n    return this.egcd(num).a.umod(num);\n  };\n\n  BN.prototype.isEven = function isEven () {\n    return (this.words[0] & 1) === 0;\n  };\n\n  BN.prototype.isOdd = function isOdd () {\n    return (this.words[0] & 1) === 1;\n  };\n\n  // And first word and num\n  BN.prototype.andln = function andln (num) {\n    return this.words[0] & num;\n  };\n\n  // Increment at the bit position in-line\n  BN.prototype.bincn = function bincn (bit) {\n    assert(typeof bit === 'number');\n    var r = bit % 26;\n    var s = (bit - r) / 26;\n    var q = 1 << r;\n\n    // Fast case: bit is much higher than all existing words\n    if (this.length <= s) {\n      this._expand(s + 1);\n      this.words[s] |= q;\n      return this;\n    }\n\n    // Add bit and propagate, if needed\n    var carry = q;\n    for (var i = s; carry !== 0 && i < this.length; i++) {\n      var w = this.words[i] | 0;\n      w += carry;\n      carry = w >>> 26;\n      w &= 0x3ffffff;\n      this.words[i] = w;\n    }\n    if (carry !== 0) {\n      this.words[i] = carry;\n      this.length++;\n    }\n    return this;\n  };\n\n  BN.prototype.isZero = function isZero () {\n    return this.length === 1 && this.words[0] === 0;\n  };\n\n  BN.prototype.cmpn = function cmpn (num) {\n    var negative = num < 0;\n\n    if (this.negative !== 0 && !negative) return -1;\n    if (this.negative === 0 && negative) return 1;\n\n    this.strip();\n\n    var res;\n    if (this.length > 1) {\n      res = 1;\n    } else {\n      if (negative) {\n        num = -num;\n      }\n\n      assert(num <= 0x3ffffff, 'Number is too big');\n\n      var w = this.words[0] | 0;\n      res = w === num ? 0 : w < num ? -1 : 1;\n    }\n    if (this.negative !== 0) return -res | 0;\n    return res;\n  };\n\n  // Compare two numbers and return:\n  // 1 - if `this` > `num`\n  // 0 - if `this` == `num`\n  // -1 - if `this` < `num`\n  BN.prototype.cmp = function cmp (num) {\n    if (this.negative !== 0 && num.negative === 0) return -1;\n    if (this.negative === 0 && num.negative !== 0) return 1;\n\n    var res = this.ucmp(num);\n    if (this.negative !== 0) return -res | 0;\n    return res;\n  };\n\n  // Unsigned comparison\n  BN.prototype.ucmp = function ucmp (num) {\n    // At this point both numbers have the same sign\n    if (this.length > num.length) return 1;\n    if (this.length < num.length) return -1;\n\n    var res = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      var a = this.words[i] | 0;\n      var b = num.words[i] | 0;\n\n      if (a === b) continue;\n      if (a < b) {\n        res = -1;\n      } else if (a > b) {\n        res = 1;\n      }\n      break;\n    }\n    return res;\n  };\n\n  BN.prototype.gtn = function gtn (num) {\n    return this.cmpn(num) === 1;\n  };\n\n  BN.prototype.gt = function gt (num) {\n    return this.cmp(num) === 1;\n  };\n\n  BN.prototype.gten = function gten (num) {\n    return this.cmpn(num) >= 0;\n  };\n\n  BN.prototype.gte = function gte (num) {\n    return this.cmp(num) >= 0;\n  };\n\n  BN.prototype.ltn = function ltn (num) {\n    return this.cmpn(num) === -1;\n  };\n\n  BN.prototype.lt = function lt (num) {\n    return this.cmp(num) === -1;\n  };\n\n  BN.prototype.lten = function lten (num) {\n    return this.cmpn(num) <= 0;\n  };\n\n  BN.prototype.lte = function lte (num) {\n    return this.cmp(num) <= 0;\n  };\n\n  BN.prototype.eqn = function eqn (num) {\n    return this.cmpn(num) === 0;\n  };\n\n  BN.prototype.eq = function eq (num) {\n    return this.cmp(num) === 0;\n  };\n\n  //\n  // A reduce context, could be using montgomery or something better, depending\n  // on the `m` itself.\n  //\n  BN.red = function red (num) {\n    return new Red(num);\n  };\n\n  BN.prototype.toRed = function toRed (ctx) {\n    assert(!this.red, 'Already a number in reduction context');\n    assert(this.negative === 0, 'red works only with positives');\n    return ctx.convertTo(this)._forceRed(ctx);\n  };\n\n  BN.prototype.fromRed = function fromRed () {\n    assert(this.red, 'fromRed works only with numbers in reduction context');\n    return this.red.convertFrom(this);\n  };\n\n  BN.prototype._forceRed = function _forceRed (ctx) {\n    this.red = ctx;\n    return this;\n  };\n\n  BN.prototype.forceRed = function forceRed (ctx) {\n    assert(!this.red, 'Already a number in reduction context');\n    return this._forceRed(ctx);\n  };\n\n  BN.prototype.redAdd = function redAdd (num) {\n    assert(this.red, 'redAdd works only with red numbers');\n    return this.red.add(this, num);\n  };\n\n  BN.prototype.redIAdd = function redIAdd (num) {\n    assert(this.red, 'redIAdd works only with red numbers');\n    return this.red.iadd(this, num);\n  };\n\n  BN.prototype.redSub = function redSub (num) {\n    assert(this.red, 'redSub works only with red numbers');\n    return this.red.sub(this, num);\n  };\n\n  BN.prototype.redISub = function redISub (num) {\n    assert(this.red, 'redISub works only with red numbers');\n    return this.red.isub(this, num);\n  };\n\n  BN.prototype.redShl = function redShl (num) {\n    assert(this.red, 'redShl works only with red numbers');\n    return this.red.shl(this, num);\n  };\n\n  BN.prototype.redMul = function redMul (num) {\n    assert(this.red, 'redMul works only with red numbers');\n    this.red._verify2(this, num);\n    return this.red.mul(this, num);\n  };\n\n  BN.prototype.redIMul = function redIMul (num) {\n    assert(this.red, 'redMul works only with red numbers');\n    this.red._verify2(this, num);\n    return this.red.imul(this, num);\n  };\n\n  BN.prototype.redSqr = function redSqr () {\n    assert(this.red, 'redSqr works only with red numbers');\n    this.red._verify1(this);\n    return this.red.sqr(this);\n  };\n\n  BN.prototype.redISqr = function redISqr () {\n    assert(this.red, 'redISqr works only with red numbers');\n    this.red._verify1(this);\n    return this.red.isqr(this);\n  };\n\n  // Square root over p\n  BN.prototype.redSqrt = function redSqrt () {\n    assert(this.red, 'redSqrt works only with red numbers');\n    this.red._verify1(this);\n    return this.red.sqrt(this);\n  };\n\n  BN.prototype.redInvm = function redInvm () {\n    assert(this.red, 'redInvm works only with red numbers');\n    this.red._verify1(this);\n    return this.red.invm(this);\n  };\n\n  // Return negative clone of `this` % `red modulo`\n  BN.prototype.redNeg = function redNeg () {\n    assert(this.red, 'redNeg works only with red numbers');\n    this.red._verify1(this);\n    return this.red.neg(this);\n  };\n\n  BN.prototype.redPow = function redPow (num) {\n    assert(this.red && !num.red, 'redPow(normalNum)');\n    this.red._verify1(this);\n    return this.red.pow(this, num);\n  };\n\n  // Prime numbers with efficient reduction\n  var primes = {\n    k256: null,\n    p224: null,\n    p192: null,\n    p25519: null\n  };\n\n  // Pseudo-Mersenne prime\n  function MPrime (name, p) {\n    // P = 2 ^ N - K\n    this.name = name;\n    this.p = new BN(p, 16);\n    this.n = this.p.bitLength();\n    this.k = new BN(1).iushln(this.n).isub(this.p);\n\n    this.tmp = this._tmp();\n  }\n\n  MPrime.prototype._tmp = function _tmp () {\n    var tmp = new BN(null);\n    tmp.words = new Array(Math.ceil(this.n / 13));\n    return tmp;\n  };\n\n  MPrime.prototype.ireduce = function ireduce (num) {\n    // Assumes that `num` is less than `P^2`\n    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)\n    var r = num;\n    var rlen;\n\n    do {\n      this.split(r, this.tmp);\n      r = this.imulK(r);\n      r = r.iadd(this.tmp);\n      rlen = r.bitLength();\n    } while (rlen > this.n);\n\n    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);\n    if (cmp === 0) {\n      r.words[0] = 0;\n      r.length = 1;\n    } else if (cmp > 0) {\n      r.isub(this.p);\n    } else {\n      if (r.strip !== undefined) {\n        // r is BN v4 instance\n        r.strip();\n      } else {\n        // r is BN v5 instance\n        r._strip();\n      }\n    }\n\n    return r;\n  };\n\n  MPrime.prototype.split = function split (input, out) {\n    input.iushrn(this.n, 0, out);\n  };\n\n  MPrime.prototype.imulK = function imulK (num) {\n    return num.imul(this.k);\n  };\n\n  function K256 () {\n    MPrime.call(\n      this,\n      'k256',\n      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');\n  }\n  inherits(K256, MPrime);\n\n  K256.prototype.split = function split (input, output) {\n    // 256 = 9 * 26 + 22\n    var mask = 0x3fffff;\n\n    var outLen = Math.min(input.length, 9);\n    for (var i = 0; i < outLen; i++) {\n      output.words[i] = input.words[i];\n    }\n    output.length = outLen;\n\n    if (input.length <= 9) {\n      input.words[0] = 0;\n      input.length = 1;\n      return;\n    }\n\n    // Shift by 9 limbs\n    var prev = input.words[9];\n    output.words[output.length++] = prev & mask;\n\n    for (i = 10; i < input.length; i++) {\n      var next = input.words[i] | 0;\n      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);\n      prev = next;\n    }\n    prev >>>= 22;\n    input.words[i - 10] = prev;\n    if (prev === 0 && input.length > 10) {\n      input.length -= 10;\n    } else {\n      input.length -= 9;\n    }\n  };\n\n  K256.prototype.imulK = function imulK (num) {\n    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]\n    num.words[num.length] = 0;\n    num.words[num.length + 1] = 0;\n    num.length += 2;\n\n    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390\n    var lo = 0;\n    for (var i = 0; i < num.length; i++) {\n      var w = num.words[i] | 0;\n      lo += w * 0x3d1;\n      num.words[i] = lo & 0x3ffffff;\n      lo = w * 0x40 + ((lo / 0x4000000) | 0);\n    }\n\n    // Fast length reduction\n    if (num.words[num.length - 1] === 0) {\n      num.length--;\n      if (num.words[num.length - 1] === 0) {\n        num.length--;\n      }\n    }\n    return num;\n  };\n\n  function P224 () {\n    MPrime.call(\n      this,\n      'p224',\n      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');\n  }\n  inherits(P224, MPrime);\n\n  function P192 () {\n    MPrime.call(\n      this,\n      'p192',\n      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');\n  }\n  inherits(P192, MPrime);\n\n  function P25519 () {\n    // 2 ^ 255 - 19\n    MPrime.call(\n      this,\n      '25519',\n      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');\n  }\n  inherits(P25519, MPrime);\n\n  P25519.prototype.imulK = function imulK (num) {\n    // K = 0x13\n    var carry = 0;\n    for (var i = 0; i < num.length; i++) {\n      var hi = (num.words[i] | 0) * 0x13 + carry;\n      var lo = hi & 0x3ffffff;\n      hi >>>= 26;\n\n      num.words[i] = lo;\n      carry = hi;\n    }\n    if (carry !== 0) {\n      num.words[num.length++] = carry;\n    }\n    return num;\n  };\n\n  // Exported mostly for testing purposes, use plain name instead\n  BN._prime = function prime (name) {\n    // Cached version of prime\n    if (primes[name]) return primes[name];\n\n    var prime;\n    if (name === 'k256') {\n      prime = new K256();\n    } else if (name === 'p224') {\n      prime = new P224();\n    } else if (name === 'p192') {\n      prime = new P192();\n    } else if (name === 'p25519') {\n      prime = new P25519();\n    } else {\n      throw new Error('Unknown prime ' + name);\n    }\n    primes[name] = prime;\n\n    return prime;\n  };\n\n  //\n  // Base reduction engine\n  //\n  function Red (m) {\n    if (typeof m === 'string') {\n      var prime = BN._prime(m);\n      this.m = prime.p;\n      this.prime = prime;\n    } else {\n      assert(m.gtn(1), 'modulus must be greater than 1');\n      this.m = m;\n      this.prime = null;\n    }\n  }\n\n  Red.prototype._verify1 = function _verify1 (a) {\n    assert(a.negative === 0, 'red works only with positives');\n    assert(a.red, 'red works only with red numbers');\n  };\n\n  Red.prototype._verify2 = function _verify2 (a, b) {\n    assert((a.negative | b.negative) === 0, 'red works only with positives');\n    assert(a.red && a.red === b.red,\n      'red works only with red numbers');\n  };\n\n  Red.prototype.imod = function imod (a) {\n    if (this.prime) return this.prime.ireduce(a)._forceRed(this);\n    return a.umod(this.m)._forceRed(this);\n  };\n\n  Red.prototype.neg = function neg (a) {\n    if (a.isZero()) {\n      return a.clone();\n    }\n\n    return this.m.sub(a)._forceRed(this);\n  };\n\n  Red.prototype.add = function add (a, b) {\n    this._verify2(a, b);\n\n    var res = a.add(b);\n    if (res.cmp(this.m) >= 0) {\n      res.isub(this.m);\n    }\n    return res._forceRed(this);\n  };\n\n  Red.prototype.iadd = function iadd (a, b) {\n    this._verify2(a, b);\n\n    var res = a.iadd(b);\n    if (res.cmp(this.m) >= 0) {\n      res.isub(this.m);\n    }\n    return res;\n  };\n\n  Red.prototype.sub = function sub (a, b) {\n    this._verify2(a, b);\n\n    var res = a.sub(b);\n    if (res.cmpn(0) < 0) {\n      res.iadd(this.m);\n    }\n    return res._forceRed(this);\n  };\n\n  Red.prototype.isub = function isub (a, b) {\n    this._verify2(a, b);\n\n    var res = a.isub(b);\n    if (res.cmpn(0) < 0) {\n      res.iadd(this.m);\n    }\n    return res;\n  };\n\n  Red.prototype.shl = function shl (a, num) {\n    this._verify1(a);\n    return this.imod(a.ushln(num));\n  };\n\n  Red.prototype.imul = function imul (a, b) {\n    this._verify2(a, b);\n    return this.imod(a.imul(b));\n  };\n\n  Red.prototype.mul = function mul (a, b) {\n    this._verify2(a, b);\n    return this.imod(a.mul(b));\n  };\n\n  Red.prototype.isqr = function isqr (a) {\n    return this.imul(a, a.clone());\n  };\n\n  Red.prototype.sqr = function sqr (a) {\n    return this.mul(a, a);\n  };\n\n  Red.prototype.sqrt = function sqrt (a) {\n    if (a.isZero()) return a.clone();\n\n    var mod3 = this.m.andln(3);\n    assert(mod3 % 2 === 1);\n\n    // Fast case\n    if (mod3 === 3) {\n      var pow = this.m.add(new BN(1)).iushrn(2);\n      return this.pow(a, pow);\n    }\n\n    // Tonelli-Shanks algorithm (Totally unoptimized and slow)\n    //\n    // Find Q and S, that Q * 2 ^ S = (P - 1)\n    var q = this.m.subn(1);\n    var s = 0;\n    while (!q.isZero() && q.andln(1) === 0) {\n      s++;\n      q.iushrn(1);\n    }\n    assert(!q.isZero());\n\n    var one = new BN(1).toRed(this);\n    var nOne = one.redNeg();\n\n    // Find quadratic non-residue\n    // NOTE: Max is such because of generalized Riemann hypothesis.\n    var lpow = this.m.subn(1).iushrn(1);\n    var z = this.m.bitLength();\n    z = new BN(2 * z * z).toRed(this);\n\n    while (this.pow(z, lpow).cmp(nOne) !== 0) {\n      z.redIAdd(nOne);\n    }\n\n    var c = this.pow(z, q);\n    var r = this.pow(a, q.addn(1).iushrn(1));\n    var t = this.pow(a, q);\n    var m = s;\n    while (t.cmp(one) !== 0) {\n      var tmp = t;\n      for (var i = 0; tmp.cmp(one) !== 0; i++) {\n        tmp = tmp.redSqr();\n      }\n      assert(i < m);\n      var b = this.pow(c, new BN(1).iushln(m - i - 1));\n\n      r = r.redMul(b);\n      c = b.redSqr();\n      t = t.redMul(c);\n      m = i;\n    }\n\n    return r;\n  };\n\n  Red.prototype.invm = function invm (a) {\n    var inv = a._invmp(this.m);\n    if (inv.negative !== 0) {\n      inv.negative = 0;\n      return this.imod(inv).redNeg();\n    } else {\n      return this.imod(inv);\n    }\n  };\n\n  Red.prototype.pow = function pow (a, num) {\n    if (num.isZero()) return new BN(1).toRed(this);\n    if (num.cmpn(1) === 0) return a.clone();\n\n    var windowSize = 4;\n    var wnd = new Array(1 << windowSize);\n    wnd[0] = new BN(1).toRed(this);\n    wnd[1] = a;\n    for (var i = 2; i < wnd.length; i++) {\n      wnd[i] = this.mul(wnd[i - 1], a);\n    }\n\n    var res = wnd[0];\n    var current = 0;\n    var currentLen = 0;\n    var start = num.bitLength() % 26;\n    if (start === 0) {\n      start = 26;\n    }\n\n    for (i = num.length - 1; i >= 0; i--) {\n      var word = num.words[i];\n      for (var j = start - 1; j >= 0; j--) {\n        var bit = (word >> j) & 1;\n        if (res !== wnd[0]) {\n          res = this.sqr(res);\n        }\n\n        if (bit === 0 && current === 0) {\n          currentLen = 0;\n          continue;\n        }\n\n        current <<= 1;\n        current |= bit;\n        currentLen++;\n        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;\n\n        res = this.mul(res, wnd[current]);\n        currentLen = 0;\n        current = 0;\n      }\n      start = 26;\n    }\n\n    return res;\n  };\n\n  Red.prototype.convertTo = function convertTo (num) {\n    var r = num.umod(this.m);\n\n    return r === num ? r.clone() : r;\n  };\n\n  Red.prototype.convertFrom = function convertFrom (num) {\n    var res = num.clone();\n    res.red = null;\n    return res;\n  };\n\n  //\n  // Montgomery method engine\n  //\n\n  BN.mont = function mont (num) {\n    return new Mont(num);\n  };\n\n  function Mont (m) {\n    Red.call(this, m);\n\n    this.shift = this.m.bitLength();\n    if (this.shift % 26 !== 0) {\n      this.shift += 26 - (this.shift % 26);\n    }\n\n    this.r = new BN(1).iushln(this.shift);\n    this.r2 = this.imod(this.r.sqr());\n    this.rinv = this.r._invmp(this.m);\n\n    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);\n    this.minv = this.minv.umod(this.r);\n    this.minv = this.r.sub(this.minv);\n  }\n  inherits(Mont, Red);\n\n  Mont.prototype.convertTo = function convertTo (num) {\n    return this.imod(num.ushln(this.shift));\n  };\n\n  Mont.prototype.convertFrom = function convertFrom (num) {\n    var r = this.imod(num.mul(this.rinv));\n    r.red = null;\n    return r;\n  };\n\n  Mont.prototype.imul = function imul (a, b) {\n    if (a.isZero() || b.isZero()) {\n      a.words[0] = 0;\n      a.length = 1;\n      return a;\n    }\n\n    var t = a.imul(b);\n    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n    var u = t.isub(c).iushrn(this.shift);\n    var res = u;\n\n    if (u.cmp(this.m) >= 0) {\n      res = u.isub(this.m);\n    } else if (u.cmpn(0) < 0) {\n      res = u.iadd(this.m);\n    }\n\n    return res._forceRed(this);\n  };\n\n  Mont.prototype.mul = function mul (a, b) {\n    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);\n\n    var t = a.mul(b);\n    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n    var u = t.isub(c).iushrn(this.shift);\n    var res = u;\n    if (u.cmp(this.m) >= 0) {\n      res = u.isub(this.m);\n    } else if (u.cmpn(0) < 0) {\n      res = u.iadd(this.m);\n    }\n\n    return res._forceRed(this);\n  };\n\n  Mont.prototype.invm = function invm (a) {\n    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R\n    var res = this.imod(a._invmp(this.m).mul(this.r2));\n    return res._forceRed(this);\n  };\n})(typeof module === 'undefined' || module, this);\n"],"sourceRoot":""}